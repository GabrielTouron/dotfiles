!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=250)}([function(t,e){var n=function(t){return t&&t.Math==Math&&t};t.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof window&&window)||Function("return this")()},function(t,e,n){var r=n(0),o=n(33),i=n(3),a=n(34),s=n(37),c=n(55),u=o("wks"),l=r.Symbol,f=c?l:l&&l.withoutSetter||a;t.exports=function(t){return i(u,t)||(s&&i(l,t)?u[t]=l[t]:u[t]=f("Symbol."+t)),u[t]}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(5);t.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){var r=n(2);t.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(t,e,n){var r=n(6),o=n(50),i=n(4),a=n(19),s=Object.defineProperty;e.f=r?s:function(t,e,n){if(i(t),e=a(e,!0),i(n),o)try{return s(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(0),o=n(14).f,i=n(9),a=n(11),s=n(31),c=n(73),u=n(54);t.exports=function(t,e){var n,l,f,p,d,h=t.target,v=t.global,m=t.stat;if(n=v?r:m?r[h]||s(h,{}):(r[h]||{}).prototype)for(l in e){if(p=e[l],f=t.noTargetGet?(d=o(n,l))&&d.value:n[l],!u(v?l:h+(m?".":"#")+l,t.forced)&&void 0!==f){if(typeof p==typeof f)continue;c(p,f)}(t.sham||f&&f.sham)&&i(p,"sham",!0),a(n,l,p,t)}}},function(t,e,n){var r=n(6),o=n(7),i=n(16);t.exports=r?function(t,e,n){return o.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var r=n(0),o=n(9),i=n(3),a=n(31),s=n(32),c=n(18),u=c.get,l=c.enforce,f=String(String).split("String");(t.exports=function(t,e,n,s){var c=!!s&&!!s.unsafe,u=!!s&&!!s.enumerable,p=!!s&&!!s.noTargetGet;"function"==typeof n&&("string"!=typeof e||i(n,"name")||o(n,"name",e),l(n).source=f.join("string"==typeof e?e:"")),t!==r?(c?!p&&t[e]&&(u=!0):delete t[e],u?t[e]=n:o(t,e,n)):u?t[e]=n:a(e,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&u(this).source||s(this)}))},function(t,e,n){var r=n(44),o=n(25);t.exports=function(t){return r(o(t))}},function(t,e,n){var r=n(52),o=n(0),i=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?i(r[t])||i(o[t]):r[t]&&r[t][e]||o[t]&&o[t][e]}},function(t,e,n){var r=n(6),o=n(43),i=n(16),a=n(12),s=n(19),c=n(3),u=n(50),l=Object.getOwnPropertyDescriptor;e.f=r?l:function(t,e){if(t=a(t),e=s(e,!0),u)try{return l(t,e)}catch(t){}if(c(t,e))return i(!o.f.call(t,e),t[e])}},function(t,e){t.exports=!1},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){var r=n(40),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e,n){var r,o,i,a=n(83),s=n(0),c=n(5),u=n(9),l=n(3),f=n(26),p=n(20),d=s.WeakMap;if(a){var h=new d,v=h.get,m=h.has,g=h.set;r=function(t,e){return g.call(h,t,e),e},o=function(t){return v.call(h,t)||{}},i=function(t){return m.call(h,t)}}else{var y=f("state");p[y]=!0,r=function(t,e){return u(t,y,e),e},o=function(t){return l(t,y)?t[y]:{}},i=function(t){return l(t,y)}}t.exports={set:r,get:o,has:i,enforce:function(t){return i(t)?o(t):r(t,{})},getterFor:function(t){return function(e){var n;if(!c(e)||(n=o(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return n}}}},function(t,e,n){var r=n(5);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports={}},function(t,e,n){var r=n(7).f,o=n(3),i=n(1)("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){var r=n(23);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},function(t,e){t.exports={}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},function(t,e,n){var r=n(33),o=n(34),i=r("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},function(t,e,n){var r=n(25);t.exports=function(t){return Object(r(t))}},,function(t,e){var n,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(t){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var c,u=[],l=!1,f=-1;function p(){l&&c&&(l=!1,c.length?u=c.concat(u):f=-1,u.length&&d())}function d(){if(!l){var t=s(p);l=!0;for(var e=u.length;e;){for(c=u,u=[];++f<e;)c&&c[f].run();f=-1,e=u.length}c=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function h(t,e){this.fun=t,this.array=e}function v(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];u.push(new h(t,e)),1!==u.length||l||s(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e,n){var r=n(0),o=n(5),i=r.document,a=o(i)&&o(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},function(t,e,n){var r=n(0),o=n(9);t.exports=function(t,e){try{o(r,t,e)}catch(n){r[t]=e}return e}},function(t,e,n){var r=n(51),o=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(t){return o.call(t)}),t.exports=r.inspectSource},function(t,e,n){var r=n(15),o=n(51);(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.6.5",mode:r?"pure":"global",copyright:"Â© 2020 Denis Pushkarev (zloirock.ru)"})},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++n+r).toString(36)}},function(t,e,n){var r=n(53),o=n(36).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,e,n){var r=n(2);t.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},function(t,e,n){var r=n(22),o=n(44),i=n(27),a=n(17),s=n(86),c=[].push,u=function(t){var e=1==t,n=2==t,u=3==t,l=4==t,f=6==t,p=5==t||f;return function(d,h,v,m){for(var g,y,b=i(d),w=o(b),x=r(h,v,3),A=a(w.length),_=0,S=m||s,C=e?S(d,A):n?S(d,0):void 0;A>_;_++)if((p||_ in w)&&(y=x(g=w[_],_,b),t))if(e)C[_]=y;else if(y)switch(t){case 3:return!0;case 5:return g;case 6:return _;case 2:c.call(C,g)}else if(l)return!1;return f?-1:u||l?l:C}};t.exports={forEach:u(0),map:u(1),filter:u(2),some:u(3),every:u(4),find:u(5),findIndex:u(6)}},function(t,e,n){var r={};r[n(1)("toStringTag")]="z",t.exports="[object z]"===String(r)},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){var r,o=n(4),i=n(76),a=n(36),s=n(20),c=n(56),u=n(30),l=n(26),f=l("IE_PROTO"),p=function(){},d=function(t){return"<script>"+t+"<\/script>"},h=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,e;h=r?function(t){t.write(d("")),t.close();var e=t.parentWindow.Object;return t=null,e}(r):((e=u("iframe")).style.display="none",c.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(d("document.F=Object")),t.close(),t.F);for(var n=a.length;n--;)delete h.prototype[a[n]];return h()};s[f]=!0,t.exports=Object.create||function(t,e){var n;return null!==t?(p.prototype=o(t),n=new p,p.prototype=null,n[f]=t):n=h(),void 0===e?n:i(n,e)}},function(t,e,n){var r=n(6),o=n(2),i=n(3),a=Object.defineProperty,s={},c=function(t){throw t};t.exports=function(t,e){if(i(s,t))return s[t];e||(e={});var n=[][t],u=!!i(e,"ACCESSORS")&&e.ACCESSORS,l=i(e,0)?e[0]:c,f=i(e,1)?e[1]:void 0;return s[t]=!!n&&!o((function(){if(u&&!r)return!0;var t={length:-1};u?a(t,1,{enumerable:!0,get:c}):t[1]=1,n.call(t,l,f)}))}},function(t,e,n){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);e.f=i?function(t){var e=o(this,t);return!!e&&e.enumerable}:r},function(t,e,n){var r=n(2),o=n(10),i="".split;t.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(10);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){var r=n(53),o=n(36);t.exports=Object.keys||function(t){return r(t,o)}},function(t,e,n){var r=n(39),o=n(10),i=n(1)("toStringTag"),a="Arguments"==o(function(){return arguments}());t.exports=r?o:function(t){var e,n,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?n:a?o(e):"Object"==(r=o(e))&&"function"==typeof e.callee?"Arguments":r}},function(t,e,n){var r=n(48),o=n(24),i=n(1)("iterator");t.exports=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,e,n){var r=n(6),o=n(2),i=n(30);t.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(0),o=n(31),i=r["__core-js_shared__"]||o("__core-js_shared__",{});t.exports=i},function(t,e,n){var r=n(0);t.exports=r},function(t,e,n){var r=n(3),o=n(12),i=n(74).indexOf,a=n(20);t.exports=function(t,e){var n,s=o(t),c=0,u=[];for(n in s)!r(a,n)&&r(s,n)&&u.push(n);for(;e.length>c;)r(s,n=e[c++])&&(~i(u,n)||u.push(n));return u}},function(t,e,n){var r=n(2),o=/#|\.prototype\./,i=function(t,e){var n=s[a(t)];return n==u||n!=c&&("function"==typeof e?r(e):!!e)},a=i.normalize=function(t){return String(t).replace(o,".").toLowerCase()},s=i.data={},c=i.NATIVE="N",u=i.POLYFILL="P";t.exports=i},function(t,e,n){var r=n(37);t.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(t,e,n){var r=n(13);t.exports=r("document","documentElement")},function(t,e,n){var r=n(1);e.f=r},function(t,e,n){var r,o,i=n(0),a=n(59),s=i.process,c=s&&s.versions,u=c&&c.v8;u?o=(r=u.split("."))[0]+r[1]:a&&(!(r=a.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=a.match(/Chrome\/(\d+)/))&&(o=r[1]),t.exports=o&&+o},function(t,e,n){var r=n(13);t.exports=r("navigator","userAgent")||""},function(t,e,n){var r,o,i,a=n(0),s=n(2),c=n(10),u=n(22),l=n(56),f=n(30),p=n(61),d=a.location,h=a.setImmediate,v=a.clearImmediate,m=a.process,g=a.MessageChannel,y=a.Dispatch,b=0,w={},x=function(t){if(w.hasOwnProperty(t)){var e=w[t];delete w[t],e()}},A=function(t){return function(){x(t)}},_=function(t){x(t.data)},S=function(t){a.postMessage(t+"",d.protocol+"//"+d.host)};h&&v||(h=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return w[++b]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},r(b),b},v=function(t){delete w[t]},"process"==c(m)?r=function(t){m.nextTick(A(t))}:y&&y.now?r=function(t){y.now(A(t))}:g&&!p?(i=(o=new g).port2,o.port1.onmessage=_,r=u(i.postMessage,i,1)):!a.addEventListener||"function"!=typeof postMessage||a.importScripts||s(S)||"file:"===d.protocol?r="onreadystatechange"in f("script")?function(t){l.appendChild(f("script")).onreadystatechange=function(){l.removeChild(this),x(t)}}:function(t){setTimeout(A(t),0)}:(r=S,a.addEventListener("message",_,!1))),t.exports={set:h,clear:v}},function(t,e,n){var r=n(59);t.exports=/(iphone|ipod|ipad).*applewebkit/i.test(r)},function(t,e,n){"use strict";var r=n(23),o=function(t){var e,n;this.promise=new t((function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r})),this.resolve=r(e),this.reject=r(n)};t.exports.f=function(t){return new o(t)}},,,function(t,e,n){var r,o,i;o=[t],void 0===(i="function"==typeof(r=function(t){"use strict";if("undefined"==typeof browser||Object.getPrototypeOf(browser)!==Object.prototype){const e="The message port closed before a response was received.",n="Returning a Promise is the preferred way to send a reply from an onMessage/onMessageExternal listener, as the sendResponse will be removed from the specs (See https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage)",r=()=>{const t={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getBrowserInfo:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(0===Object.keys(t).length)throw new Error("api-metadata.json has not been included in browser-polyfill");class r extends WeakMap{constructor(t,e){super(e),this.createItem=t}get(t){return this.has(t)||this.set(t,this.createItem(t)),super.get(t)}}const o=(t,e)=>(...n)=>{chrome.runtime.lastError?t.reject(chrome.runtime.lastError):e.singleCallbackArg||n.length<=1?t.resolve(n[0]):t.resolve(n)},i=t=>1==t?"argument":"arguments",a=(t,e,n)=>new Proxy(e,{apply:(e,r,o)=>n.call(r,t,...o)});let s=Function.call.bind(Object.prototype.hasOwnProperty);const c=(t,e={},n={})=>{let r=Object.create(null),u={has:(e,n)=>n in t||n in r,get(u,l,f){if(l in r)return r[l];if(!(l in t))return;let p=t[l];if("function"==typeof p)if("function"==typeof e[l])p=a(t,t[l],e[l]);else if(s(n,l)){let e=((t,e)=>function(n,...r){if(r.length<e.minArgs)throw new Error(`Expected at least ${e.minArgs} ${i(e.minArgs)} for ${t}(), got ${r.length}`);if(r.length>e.maxArgs)throw new Error(`Expected at most ${e.maxArgs} ${i(e.maxArgs)} for ${t}(), got ${r.length}`);return new Promise((i,a)=>{if(e.fallbackToNoCallback)try{n[t](...r,o({resolve:i,reject:a},e))}catch(o){console.warn(t+" API method doesn't seem to support the callback parameter, falling back to call it without a callback: ",o),n[t](...r),e.fallbackToNoCallback=!1,e.noCallback=!0,i()}else e.noCallback?(n[t](...r),i()):n[t](...r,o({resolve:i,reject:a},e))})})(l,n[l]);p=a(t,t[l],e)}else p=p.bind(t);else{if("object"!=typeof p||null===p||!s(e,l)&&!s(n,l))return Object.defineProperty(r,l,{configurable:!0,enumerable:!0,get:()=>t[l],set(e){t[l]=e}}),p;p=c(p,e[l],n[l])}return r[l]=p,p},set:(e,n,o,i)=>(n in r?r[n]=o:t[n]=o,!0),defineProperty:(t,e,n)=>Reflect.defineProperty(r,e,n),deleteProperty:(t,e)=>Reflect.deleteProperty(r,e)},l=Object.create(t);return new Proxy(l,u)},u=t=>({addListener(e,n,...r){e.addListener(t.get(n),...r)},hasListener:(e,n)=>e.hasListener(t.get(n)),removeListener(e,n){e.removeListener(t.get(n))}});let l=!1;const f=new r(t=>"function"!=typeof t?t:function(e,r,o){let i,a,s=!1,c=new Promise(t=>{i=function(e){l||(console.warn(n,(new Error).stack),l=!0),s=!0,t(e)}});try{a=t(e,r,i)}catch(t){a=Promise.reject(t)}const u=!0!==a&&(f=a)&&"object"==typeof f&&"function"==typeof f.then;var f;if(!0!==a&&!u&&!s)return!1;const p=t=>{t.then(t=>{o(t)},t=>{let e;e=t&&(t instanceof Error||"string"==typeof t.message)?t.message:"An unexpected error occurred",o({__mozWebExtensionPolyfillReject__:!0,message:e})}).catch(t=>{console.error("Failed to send onMessage rejected reply",t)})};return p(u?a:c),!0}),p=({reject:t,resolve:n},r)=>{chrome.runtime.lastError?chrome.runtime.lastError.message===e?n():t(chrome.runtime.lastError):r&&r.__mozWebExtensionPolyfillReject__?t(new Error(r.message)):n(r)},d=(t,e,n,...r)=>{if(r.length<e.minArgs)throw new Error(`Expected at least ${e.minArgs} ${i(e.minArgs)} for ${t}(), got ${r.length}`);if(r.length>e.maxArgs)throw new Error(`Expected at most ${e.maxArgs} ${i(e.maxArgs)} for ${t}(), got ${r.length}`);return new Promise((t,e)=>{const o=p.bind(null,{resolve:t,reject:e});r.push(o),n.sendMessage(...r)})},h={runtime:{onMessage:u(f),onMessageExternal:u(f),sendMessage:d.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:d.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},v={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return t.privacy={network:{networkPredictionEnabled:v,webRTCIPHandlingPolicy:v},services:{passwordSavingEnabled:v},websites:{hyperlinkAuditingEnabled:v,referrersEnabled:v}},c(chrome,h,t)};t.exports=r()}else t.exports=browser})?r.apply(e,o):r)||(t.exports=i)},function(t,e,n){var r=n(13),o=n(35),i=n(45),a=n(4);t.exports=r("Reflect","ownKeys")||function(t){var e=o.f(a(t)),n=i.f;return n?e.concat(n(t)):e}},function(t,e,n){var r=n(2),o=n(1),i=n(58),a=o("species");t.exports=function(t){return i>=51||!r((function(){var e=[];return(e.constructor={})[a]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},function(t,e,n){"use strict";var r=n(19),o=n(7),i=n(16);t.exports=function(t,e,n){var a=r(e);a in t?o.f(t,a,i(0,n)):t[a]=n}},function(t,e){t.exports=function(t,e,n){if(!(t instanceof e))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return t}},function(t,e,n){var r=n(1),o=n(24),i=r("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||a[i]===t)}},function(t,e,n){var r=n(4);t.exports=function(t,e,n,o){try{return o?e(r(n)[0],n[1]):e(n)}catch(e){var i=t.return;throw void 0!==i&&r(i.call(t)),e}}},,function(t,e,n){var r=n(3),o=n(66),i=n(14),a=n(7);t.exports=function(t,e){for(var n=o(e),s=a.f,c=i.f,u=0;u<n.length;u++){var l=n[u];r(t,l)||s(t,l,c(e,l))}}},function(t,e,n){var r=n(12),o=n(17),i=n(75),a=function(t){return function(e,n,a){var s,c=r(e),u=o(c.length),l=i(a,u);if(t&&n!=n){for(;u>l;)if((s=c[l++])!=s)return!0}else for(;u>l;l++)if((t||l in c)&&c[l]===n)return t||l||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},function(t,e,n){var r=n(40),o=Math.max,i=Math.min;t.exports=function(t,e){var n=r(t);return n<0?o(n+e,0):i(n,e)}},function(t,e,n){var r=n(6),o=n(7),i=n(4),a=n(47);t.exports=r?Object.defineProperties:function(t,e){i(t);for(var n,r=a(e),s=r.length,c=0;s>c;)o.f(t,n=r[c++],e[n]);return t}},function(t,e,n){"use strict";var r=n(12),o=n(105),i=n(24),a=n(18),s=n(106),c=a.set,u=a.getterFor("Array Iterator");t.exports=s(Array,"Array",(function(t,e){c(this,{type:"Array Iterator",target:r(t),index:0,kind:e})}),(function(){var t=u(this),e=t.target,n=t.kind,r=t.index++;return!e||r>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),"values"),i.Arguments=i.Array,o("keys"),o("values"),o("entries")},function(t,e,n){var r=n(11);t.exports=function(t,e,n){for(var o in e)r(t,o,e[o],n);return t}},function(t,e,n){var r=n(1)("iterator"),o=!1;try{var i=0,a={next:function(){return{done:!!i++}},return:function(){o=!0}};a[r]=function(){return this},Array.from(a,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var n=!1;try{var i={};i[r]=function(){return{next:function(){return{done:n=!0}}}},t(i)}catch(t){}return n}},function(t,e,n){var r=n(4),o=n(23),i=n(1)("species");t.exports=function(t,e){var n,a=r(t).constructor;return void 0===a||null==(n=r(a)[i])?e:o(n)}},function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(t,e,n){"use strict";var r=n(8),o=n(0),i=n(13),a=n(15),s=n(6),c=n(37),u=n(55),l=n(2),f=n(3),p=n(46),d=n(5),h=n(4),v=n(27),m=n(12),g=n(19),y=n(16),b=n(41),w=n(47),x=n(35),A=n(84),_=n(45),S=n(14),C=n(7),k=n(43),O=n(9),j=n(11),E=n(33),T=n(26),L=n(20),$=n(34),P=n(1),I=n(57),M=n(85),R=n(21),N=n(18),z=n(38).forEach,D=T("hidden"),U=P("toPrimitive"),F=N.set,V=N.getterFor("Symbol"),B=Object.prototype,H=o.Symbol,q=i("JSON","stringify"),W=S.f,G=C.f,K=A.f,X=k.f,Z=E("symbols"),J=E("op-symbols"),Y=E("string-to-symbol-registry"),Q=E("symbol-to-string-registry"),tt=E("wks"),et=o.QObject,nt=!et||!et.prototype||!et.prototype.findChild,rt=s&&l((function(){return 7!=b(G({},"a",{get:function(){return G(this,"a",{value:7}).a}})).a}))?function(t,e,n){var r=W(B,e);r&&delete B[e],G(t,e,n),r&&t!==B&&G(B,e,r)}:G,ot=function(t,e){var n=Z[t]=b(H.prototype);return F(n,{type:"Symbol",tag:t,description:e}),s||(n.description=e),n},it=u?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof H},at=function(t,e,n){t===B&&at(J,e,n),h(t);var r=g(e,!0);return h(n),f(Z,r)?(n.enumerable?(f(t,D)&&t[D][r]&&(t[D][r]=!1),n=b(n,{enumerable:y(0,!1)})):(f(t,D)||G(t,D,y(1,{})),t[D][r]=!0),rt(t,r,n)):G(t,r,n)},st=function(t,e){h(t);var n=m(e),r=w(n).concat(ft(n));return z(r,(function(e){s&&!ct.call(n,e)||at(t,e,n[e])})),t},ct=function(t){var e=g(t,!0),n=X.call(this,e);return!(this===B&&f(Z,e)&&!f(J,e))&&(!(n||!f(this,e)||!f(Z,e)||f(this,D)&&this[D][e])||n)},ut=function(t,e){var n=m(t),r=g(e,!0);if(n!==B||!f(Z,r)||f(J,r)){var o=W(n,r);return!o||!f(Z,r)||f(n,D)&&n[D][r]||(o.enumerable=!0),o}},lt=function(t){var e=K(m(t)),n=[];return z(e,(function(t){f(Z,t)||f(L,t)||n.push(t)})),n},ft=function(t){var e=t===B,n=K(e?J:m(t)),r=[];return z(n,(function(t){!f(Z,t)||e&&!f(B,t)||r.push(Z[t])})),r};(c||(j((H=function(){if(this instanceof H)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,e=$(t),n=function(t){this===B&&n.call(J,t),f(this,D)&&f(this[D],e)&&(this[D][e]=!1),rt(this,e,y(1,t))};return s&&nt&&rt(B,e,{configurable:!0,set:n}),ot(e,t)}).prototype,"toString",(function(){return V(this).tag})),j(H,"withoutSetter",(function(t){return ot($(t),t)})),k.f=ct,C.f=at,S.f=ut,x.f=A.f=lt,_.f=ft,I.f=function(t){return ot(P(t),t)},s&&(G(H.prototype,"description",{configurable:!0,get:function(){return V(this).description}}),a||j(B,"propertyIsEnumerable",ct,{unsafe:!0}))),r({global:!0,wrap:!0,forced:!c,sham:!c},{Symbol:H}),z(w(tt),(function(t){M(t)})),r({target:"Symbol",stat:!0,forced:!c},{for:function(t){var e=String(t);if(f(Y,e))return Y[e];var n=H(e);return Y[e]=n,Q[n]=e,n},keyFor:function(t){if(!it(t))throw TypeError(t+" is not a symbol");if(f(Q,t))return Q[t]},useSetter:function(){nt=!0},useSimple:function(){nt=!1}}),r({target:"Object",stat:!0,forced:!c,sham:!s},{create:function(t,e){return void 0===e?b(t):st(b(t),e)},defineProperty:at,defineProperties:st,getOwnPropertyDescriptor:ut}),r({target:"Object",stat:!0,forced:!c},{getOwnPropertyNames:lt,getOwnPropertySymbols:ft}),r({target:"Object",stat:!0,forced:l((function(){_.f(1)}))},{getOwnPropertySymbols:function(t){return _.f(v(t))}}),q)&&r({target:"JSON",stat:!0,forced:!c||l((function(){var t=H();return"[null]"!=q([t])||"{}"!=q({a:t})||"{}"!=q(Object(t))}))},{stringify:function(t,e,n){for(var r,o=[t],i=1;arguments.length>i;)o.push(arguments[i++]);if(r=e,(d(e)||void 0!==t)&&!it(t))return p(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!it(e))return e}),o[1]=e,q.apply(null,o)}});H.prototype[U]||O(H.prototype,U,H.prototype.valueOf),R(H,"Symbol"),L[D]=!0},function(t,e,n){var r=n(0),o=n(32),i=r.WeakMap;t.exports="function"==typeof i&&/native code/.test(o(i))},function(t,e,n){var r=n(12),o=n(35).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return a.slice()}}(t):o(r(t))}},function(t,e,n){var r=n(52),o=n(3),i=n(57),a=n(7).f;t.exports=function(t){var e=r.Symbol||(r.Symbol={});o(e,t)||a(e,t,{value:i.f(t)})}},function(t,e,n){var r=n(5),o=n(46),i=n(1)("species");t.exports=function(t,e){var n;return o(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!o(n.prototype)?r(n)&&null===(n=n[i])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===e?0:e)}},function(t,e,n){"use strict";var r=n(8),o=n(38).filter,i=n(67),a=n(42),s=i("filter"),c=a("filter");r({target:"Array",proto:!0,forced:!s||!c},{filter:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){"use strict";var r=n(38).forEach,o=n(113),i=n(42),a=o("forEach"),s=i("forEach");t.exports=a&&s?[].forEach:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}},function(t,e,n){"use strict";var r,o,i,a=n(90),s=n(9),c=n(3),u=n(1),l=n(15),f=u("iterator"),p=!1;[].keys&&("next"in(i=[].keys())?(o=a(a(i)))!==Object.prototype&&(r=o):p=!0),null==r&&(r={}),l||c(r,f)||s(r,f,(function(){return this})),t.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:p}},function(t,e,n){var r=n(3),o=n(27),i=n(26),a=n(114),s=i("IE_PROTO"),c=Object.prototype;t.exports=a?Object.getPrototypeOf:function(t){return t=o(t),r(t,s)?t[s]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?c:null}},function(t,e,n){var r=n(39),o=n(11),i=n(92);r||o(Object.prototype,"toString",i,{unsafe:!0})},function(t,e,n){"use strict";var r=n(39),o=n(48);t.exports=r?{}.toString:function(){return"[object "+o(this)+"]"}},function(t,e,n){"use strict";var r,o,i,a,s=n(8),c=n(15),u=n(0),l=n(13),f=n(94),p=n(11),d=n(78),h=n(21),v=n(95),m=n(5),g=n(23),y=n(69),b=n(10),w=n(32),x=n(96),A=n(79),_=n(80),S=n(60).set,C=n(97),k=n(98),O=n(99),j=n(62),E=n(100),T=n(18),L=n(54),$=n(1),P=n(58),I=$("species"),M="Promise",R=T.get,N=T.set,z=T.getterFor(M),D=f,U=u.TypeError,F=u.document,V=u.process,B=l("fetch"),H=j.f,q=H,W="process"==b(V),G=!!(F&&F.createEvent&&u.dispatchEvent),K=L(M,(function(){if(!(w(D)!==String(D))){if(66===P)return!0;if(!W&&"function"!=typeof PromiseRejectionEvent)return!0}if(c&&!D.prototype.finally)return!0;if(P>=51&&/native code/.test(D))return!1;var t=D.resolve(1),e=function(t){t((function(){}),(function(){}))};return(t.constructor={})[I]=e,!(t.then((function(){}))instanceof e)})),X=K||!A((function(t){D.all(t).catch((function(){}))})),Z=function(t){var e;return!(!m(t)||"function"!=typeof(e=t.then))&&e},J=function(t,e,n){if(!e.notified){e.notified=!0;var r=e.reactions;C((function(){for(var o=e.value,i=1==e.state,a=0;r.length>a;){var s,c,u,l=r[a++],f=i?l.ok:l.fail,p=l.resolve,d=l.reject,h=l.domain;try{f?(i||(2===e.rejection&&et(t,e),e.rejection=1),!0===f?s=o:(h&&h.enter(),s=f(o),h&&(h.exit(),u=!0)),s===l.promise?d(U("Promise-chain cycle")):(c=Z(s))?c.call(s,p,d):p(s)):d(o)}catch(t){h&&!u&&h.exit(),d(t)}}e.reactions=[],e.notified=!1,n&&!e.rejection&&Q(t,e)}))}},Y=function(t,e,n){var r,o;G?((r=F.createEvent("Event")).promise=e,r.reason=n,r.initEvent(t,!1,!0),u.dispatchEvent(r)):r={promise:e,reason:n},(o=u["on"+t])?o(r):"unhandledrejection"===t&&O("Unhandled promise rejection",n)},Q=function(t,e){S.call(u,(function(){var n,r=e.value;if(tt(e)&&(n=E((function(){W?V.emit("unhandledRejection",r,t):Y("unhandledrejection",t,r)})),e.rejection=W||tt(e)?2:1,n.error))throw n.value}))},tt=function(t){return 1!==t.rejection&&!t.parent},et=function(t,e){S.call(u,(function(){W?V.emit("rejectionHandled",t):Y("rejectionhandled",t,e.value)}))},nt=function(t,e,n,r){return function(o){t(e,n,o,r)}},rt=function(t,e,n,r){e.done||(e.done=!0,r&&(e=r),e.value=n,e.state=2,J(t,e,!0))},ot=function(t,e,n,r){if(!e.done){e.done=!0,r&&(e=r);try{if(t===n)throw U("Promise can't be resolved itself");var o=Z(n);o?C((function(){var r={done:!1};try{o.call(n,nt(ot,t,r,e),nt(rt,t,r,e))}catch(n){rt(t,r,n,e)}})):(e.value=n,e.state=1,J(t,e,!1))}catch(n){rt(t,{done:!1},n,e)}}};K&&(D=function(t){y(this,D,M),g(t),r.call(this);var e=R(this);try{t(nt(ot,this,e),nt(rt,this,e))}catch(t){rt(this,e,t)}},(r=function(t){N(this,{type:M,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=d(D.prototype,{then:function(t,e){var n=z(this),r=H(_(this,D));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=W?V.domain:void 0,n.parent=!0,n.reactions.push(r),0!=n.state&&J(this,n,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r,e=R(t);this.promise=t,this.resolve=nt(ot,t,e),this.reject=nt(rt,t,e)},j.f=H=function(t){return t===D||t===i?new o(t):q(t)},c||"function"!=typeof f||(a=f.prototype.then,p(f.prototype,"then",(function(t,e){var n=this;return new D((function(t,e){a.call(n,t,e)})).then(t,e)}),{unsafe:!0}),"function"==typeof B&&s({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return k(D,B.apply(u,arguments))}}))),s({global:!0,wrap:!0,forced:K},{Promise:D}),h(D,M,!1,!0),v(M),i=l(M),s({target:M,stat:!0,forced:K},{reject:function(t){var e=H(this);return e.reject.call(void 0,t),e.promise}}),s({target:M,stat:!0,forced:c||K},{resolve:function(t){return k(c&&this===i?D:this,t)}}),s({target:M,stat:!0,forced:X},{all:function(t){var e=this,n=H(e),r=n.resolve,o=n.reject,i=E((function(){var n=g(e.resolve),i=[],a=0,s=1;x(t,(function(t){var c=a++,u=!1;i.push(void 0),s++,n.call(e,t).then((function(t){u||(u=!0,i[c]=t,--s||r(i))}),o)})),--s||r(i)}));return i.error&&o(i.value),n.promise},race:function(t){var e=this,n=H(e),r=n.reject,o=E((function(){var o=g(e.resolve);x(t,(function(t){o.call(e,t).then(n.resolve,r)}))}));return o.error&&r(o.value),n.promise}})},function(t,e,n){var r=n(0);t.exports=r.Promise},function(t,e,n){"use strict";var r=n(13),o=n(7),i=n(1),a=n(6),s=i("species");t.exports=function(t){var e=r(t),n=o.f;a&&e&&!e[s]&&n(e,s,{configurable:!0,get:function(){return this}})}},function(t,e,n){var r=n(4),o=n(70),i=n(17),a=n(22),s=n(49),c=n(71),u=function(t,e){this.stopped=t,this.result=e};(t.exports=function(t,e,n,l,f){var p,d,h,v,m,g,y,b=a(e,n,l?2:1);if(f)p=t;else{if("function"!=typeof(d=s(t)))throw TypeError("Target is not iterable");if(o(d)){for(h=0,v=i(t.length);v>h;h++)if((m=l?b(r(y=t[h])[0],y[1]):b(t[h]))&&m instanceof u)return m;return new u(!1)}p=d.call(t)}for(g=p.next;!(y=g.call(p)).done;)if("object"==typeof(m=c(p,b,y.value,l))&&m&&m instanceof u)return m;return new u(!1)}).stop=function(t){return new u(!0,t)}},function(t,e,n){var r,o,i,a,s,c,u,l,f=n(0),p=n(14).f,d=n(10),h=n(60).set,v=n(61),m=f.MutationObserver||f.WebKitMutationObserver,g=f.process,y=f.Promise,b="process"==d(g),w=p(f,"queueMicrotask"),x=w&&w.value;x||(r=function(){var t,e;for(b&&(t=g.domain)&&t.exit();o;){e=o.fn,o=o.next;try{e()}catch(t){throw o?a():i=void 0,t}}i=void 0,t&&t.enter()},b?a=function(){g.nextTick(r)}:m&&!v?(s=!0,c=document.createTextNode(""),new m(r).observe(c,{characterData:!0}),a=function(){c.data=s=!s}):y&&y.resolve?(u=y.resolve(void 0),l=u.then,a=function(){l.call(u,r)}):a=function(){h.call(f,r)}),t.exports=x||function(t){var e={fn:t,next:void 0};i&&(i.next=e),o||(o=e,a()),i=e}},function(t,e,n){var r=n(4),o=n(5),i=n(62);t.exports=function(t,e){if(r(t),o(e)&&e.constructor===t)return e;var n=i.f(t);return(0,n.resolve)(e),n.promise}},function(t,e,n){var r=n(0);t.exports=function(t,e){var n=r.console;n&&n.error&&(1===arguments.length?n.error(t):n.error(t,e))}},function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},function(t,e,n){var r=function(t){"use strict";var e=Object.prototype,n=e.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",a=r.toStringTag||"@@toStringTag";function s(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{s({},"")}catch(t){s=function(t,e,n){return t[e]=n}}function c(t,e,n,r){var o=e&&e.prototype instanceof f?e:f,i=Object.create(o.prototype),a=new _(r||[]);return i._invoke=function(t,e,n){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return C()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var s=w(a,n);if(s){if(s===l)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var c=u(t,e,n);if("normal"===c.type){if(r=n.done?"completed":"suspendedYield",c.arg===l)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r="completed",n.method="throw",n.arg=c.arg)}}}(t,n,a),i}function u(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var l={};function f(){}function p(){}function d(){}var h={};h[o]=function(){return this};var v=Object.getPrototypeOf,m=v&&v(v(S([])));m&&m!==e&&n.call(m,o)&&(h=m);var g=d.prototype=f.prototype=Object.create(h);function y(t){["next","throw","return"].forEach((function(e){s(t,e,(function(t){return this._invoke(e,t)}))}))}function b(t,e){var r;this._invoke=function(o,i){function a(){return new e((function(r,a){!function r(o,i,a,s){var c=u(t[o],t,i);if("throw"!==c.type){var l=c.arg,f=l.value;return f&&"object"==typeof f&&n.call(f,"__await")?e.resolve(f.__await).then((function(t){r("next",t,a,s)}),(function(t){r("throw",t,a,s)})):e.resolve(f).then((function(t){l.value=t,a(l)}),(function(t){return r("throw",t,a,s)}))}s(c.arg)}(o,i,r,a)}))}return r=r?r.then(a,a):a()}}function w(t,e){var n=t.iterator[e.method];if(void 0===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,w(t,e),"throw"===e.method))return l;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return l}var r=u(n,t.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,l;var o=r.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,l):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,l)}function x(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function A(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function _(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(x,this),this.reset(!0)}function S(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function e(){for(;++r<t.length;)if(n.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:C}}function C(){return{value:void 0,done:!0}}return p.prototype=g.constructor=d,d.constructor=p,p.displayName=s(d,a,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===p||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,d):(t.__proto__=d,s(t,a,"GeneratorFunction")),t.prototype=Object.create(g),t},t.awrap=function(t){return{__await:t}},y(b.prototype),b.prototype[i]=function(){return this},t.AsyncIterator=b,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var a=new b(c(e,n,r,o),i);return t.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},y(g),s(g,a,"Generator"),g[o]=function(){return this},g.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=S,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(A),!t)for(var e in this)"t"===e.charAt(0)&&n.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(n,r){return a.type="throw",a.arg=t,e.next=n,r&&(e.method="next",e.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var s=n.call(i,"catchLoc"),c=n.call(i,"finallyLoc");if(s&&c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,l):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),l},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),A(n),l}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;A(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:S(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=void 0),l}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},,,,function(t,e,n){var r=n(1),o=n(41),i=n(7),a=r("unscopables"),s=Array.prototype;null==s[a]&&i.f(s,a,{configurable:!0,value:o(null)}),t.exports=function(t){s[a][t]=!0}},function(t,e,n){"use strict";var r=n(8),o=n(107),i=n(90),a=n(115),s=n(21),c=n(9),u=n(11),l=n(1),f=n(15),p=n(24),d=n(89),h=d.IteratorPrototype,v=d.BUGGY_SAFARI_ITERATORS,m=l("iterator"),g=function(){return this};t.exports=function(t,e,n,l,d,y,b){o(n,e,l);var w,x,A,_=function(t){if(t===d&&j)return j;if(!v&&t in k)return k[t];switch(t){case"keys":case"values":case"entries":return function(){return new n(this,t)}}return function(){return new n(this)}},S=e+" Iterator",C=!1,k=t.prototype,O=k[m]||k["@@iterator"]||d&&k[d],j=!v&&O||_(d),E="Array"==e&&k.entries||O;if(E&&(w=i(E.call(new t)),h!==Object.prototype&&w.next&&(f||i(w)===h||(a?a(w,h):"function"!=typeof w[m]&&c(w,m,g)),s(w,S,!0,!0),f&&(p[S]=g))),"values"==d&&O&&"values"!==O.name&&(C=!0,j=function(){return O.call(this)}),f&&!b||k[m]===j||c(k,m,j),p[e]=j,d)if(x={values:_("values"),keys:y?j:_("keys"),entries:_("entries")},b)for(A in x)(v||C||!(A in k))&&u(k,A,x[A]);else r({target:e,proto:!0,forced:v||C},x);return x}},function(t,e,n){"use strict";var r=n(89).IteratorPrototype,o=n(41),i=n(16),a=n(21),s=n(24),c=function(){return this};t.exports=function(t,e,n){var u=e+" Iterator";return t.prototype=o(r,{next:i(1,n)}),a(t,u,!1,!0),s[u]=c,t}},function(t,e,n){var r=n(40),o=n(25),i=function(t){return function(e,n){var i,a,s=String(o(e)),c=r(n),u=s.length;return c<0||c>=u?t?"":void 0:(i=s.charCodeAt(c))<55296||i>56319||c+1===u||(a=s.charCodeAt(c+1))<56320||a>57343?t?s.charAt(c):i:t?s.slice(c,c+2):a-56320+(i-55296<<10)+65536}};t.exports={codeAt:i(!1),charAt:i(!0)}},,,,function(t,e,n){"use strict";var r=n(8),o=n(88);r({target:"Array",proto:!0,forced:[].forEach!=o},{forEach:o})},function(t,e,n){"use strict";var r=n(2);t.exports=function(t,e){var n=[][t];return!!n&&r((function(){n.call(null,e||function(){throw 1},1)}))}},function(t,e,n){var r=n(2);t.exports=!r((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},function(t,e,n){var r=n(4),o=n(116);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,n={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),e=n instanceof Array}catch(t){}return function(n,i){return r(n),o(i),e?t.call(n,i):n.__proto__=i,n}}():void 0)},function(t,e,n){var r=n(5);t.exports=function(t){if(!r(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},function(t,e,n){var r=n(8),o=n(6),i=n(66),a=n(12),s=n(14),c=n(68);r({target:"Object",stat:!0,sham:!o},{getOwnPropertyDescriptors:function(t){for(var e,n,r=a(t),o=s.f,u=i(r),l={},f=0;u.length>f;)void 0!==(n=o(r,e=u[f++]))&&c(l,e,n);return l}})},function(t,e,n){var r=n(5),o=n(10),i=n(1)("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[i])?!!e:"RegExp"==o(t))}},function(t,e,n){var r=n(0),o=n(81),i=n(88),a=n(9);for(var s in o){var c=r[s],u=c&&c.prototype;if(u&&u.forEach!==i)try{a(u,"forEach",i)}catch(t){u.forEach=i}}},function(t,e,n){var r=n(0),o=n(81),i=n(77),a=n(9),s=n(1),c=s("iterator"),u=s("toStringTag"),l=i.values;for(var f in o){var p=r[f],d=p&&p.prototype;if(d){if(d[c]!==l)try{a(d,c,l)}catch(t){d[c]=l}if(d[u]||a(d,u,f),o[f])for(var h in i)if(d[h]!==i[h])try{a(d,h,i[h])}catch(t){d[h]=i[h]}}}},function(t,e,n){"use strict";var r=n(22),o=n(27),i=n(71),a=n(70),s=n(17),c=n(68),u=n(49);t.exports=function(t){var e,n,l,f,p,d,h=o(t),v="function"==typeof this?this:Array,m=arguments.length,g=m>1?arguments[1]:void 0,y=void 0!==g,b=u(h),w=0;if(y&&(g=r(g,m>2?arguments[2]:void 0,2)),null==b||v==Array&&a(b))for(n=new v(e=s(h.length));e>w;w++)d=y?g(h[w],w):h[w],c(n,w,d);else for(p=(f=b.call(h)).next,n=new v;!(l=p.call(f)).done;w++)d=y?i(f,g,[l.value,w],!0):l.value,c(n,w,d);return n.length=w,n}},function(t,e,n){var r="undefined"!=typeof window&&window||"undefined"!=typeof self&&self||window,o=Function.prototype.apply;function i(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new i(o.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new i(o.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout((function(){t._onTimeout&&t._onTimeout()}),e))},n(123),e.setImmediate="undefined"!=typeof self&&self.setImmediate||"undefined"!=typeof window&&window.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||"undefined"!=typeof window&&window.clearImmediate||this&&this.clearImmediate},function(t,e,n){(function(t){!function(e,n){"use strict";if(!e.setImmediate){var r,o,i,a,s,c=1,u={},l=!1,f=e.document,p=Object.getPrototypeOf&&Object.getPrototypeOf(e);p=p&&p.setTimeout?p:e,"[object process]"==={}.toString.call(e.process)?r=function(e){t.nextTick((function(){h(e)}))}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((i=new MessageChannel).port1.onmessage=function(t){h(t.data)},r=function(t){i.port2.postMessage(t)}):f&&"onreadystatechange"in f.createElement("script")?(o=f.documentElement,r=function(t){var e=f.createElement("script");e.onreadystatechange=function(){h(t),e.onreadystatechange=null,o.removeChild(e),e=null},o.appendChild(e)}):r=function(t){setTimeout(h,0,t)}:(a="setImmediate$"+Math.random()+"$",s=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&h(+t.data.slice(a.length))},e.addEventListener?e.addEventListener("message",s,!1):e.attachEvent("onmessage",s),r=function(t){e.postMessage(a+t,"*")}),p.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var o={callback:t,args:e};return u[c]=o,r(c),c++},p.clearImmediate=d}function d(t){delete u[t]}function h(t){if(l)setTimeout(h,0,t);else{var e=u[t];if(e){l=!0;try{!function(t){var e=t.callback,n=t.args;switch(n.length){case 0:e();break;case 1:e(n[0]);break;case 2:e(n[0],n[1]);break;case 3:e(n[0],n[1],n[2]);break;default:e.apply(void 0,n)}}(e)}finally{d(t),l=!1}}}}}("undefined"==typeof self?"undefined"==typeof window?this:window:self)}).call(this,n(29))},,,,,,,,,,,function(t,e,n){"use strict";(function(t){
/*!
 * Vue.js v2.6.12
 * (c) 2014-2020 Evan You
 * Released under the MIT License.
 */
var n=Object.freeze({});function r(t){return null==t}function o(t){return null!=t}function i(t){return!0===t}function a(t){return"string"==typeof t||"number"==typeof t||"symbol"==typeof t||"boolean"==typeof t}function s(t){return null!==t&&"object"==typeof t}var c=Object.prototype.toString;function u(t){return"[object Object]"===c.call(t)}function l(t){return"[object RegExp]"===c.call(t)}function f(t){var e=parseFloat(String(t));return e>=0&&Math.floor(e)===e&&isFinite(t)}function p(t){return o(t)&&"function"==typeof t.then&&"function"==typeof t.catch}function d(t){return null==t?"":Array.isArray(t)||u(t)&&t.toString===c?JSON.stringify(t,null,2):String(t)}function h(t){var e=parseFloat(t);return isNaN(e)?t:e}function v(t,e){for(var n=Object.create(null),r=t.split(","),o=0;o<r.length;o++)n[r[o]]=!0;return e?function(t){return n[t.toLowerCase()]}:function(t){return n[t]}}v("slot,component",!0);var m=v("key,ref,slot,slot-scope,is");function g(t,e){if(t.length){var n=t.indexOf(e);if(n>-1)return t.splice(n,1)}}var y=Object.prototype.hasOwnProperty;function b(t,e){return y.call(t,e)}function w(t){var e=Object.create(null);return function(n){return e[n]||(e[n]=t(n))}}var x=/-(\w)/g,A=w((function(t){return t.replace(x,(function(t,e){return e?e.toUpperCase():""}))})),_=w((function(t){return t.charAt(0).toUpperCase()+t.slice(1)})),S=/\B([A-Z])/g,C=w((function(t){return t.replace(S,"-$1").toLowerCase()}));var k=Function.prototype.bind?function(t,e){return t.bind(e)}:function(t,e){function n(n){var r=arguments.length;return r?r>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n};function O(t,e){e=e||0;for(var n=t.length-e,r=new Array(n);n--;)r[n]=t[n+e];return r}function j(t,e){for(var n in e)t[n]=e[n];return t}function E(t){for(var e={},n=0;n<t.length;n++)t[n]&&j(e,t[n]);return e}function T(t,e,n){}var L=function(t,e,n){return!1},$=function(t){return t};function P(t,e){if(t===e)return!0;var n=s(t),r=s(e);if(!n||!r)return!n&&!r&&String(t)===String(e);try{var o=Array.isArray(t),i=Array.isArray(e);if(o&&i)return t.length===e.length&&t.every((function(t,n){return P(t,e[n])}));if(t instanceof Date&&e instanceof Date)return t.getTime()===e.getTime();if(o||i)return!1;var a=Object.keys(t),c=Object.keys(e);return a.length===c.length&&a.every((function(n){return P(t[n],e[n])}))}catch(t){return!1}}function I(t,e){for(var n=0;n<t.length;n++)if(P(t[n],e))return n;return-1}function M(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}}var R=["component","directive","filter"],N=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],z={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:L,isReservedAttr:L,isUnknownElement:L,getTagNamespace:T,parsePlatformTagName:$,mustUseProp:L,async:!0,_lifecycleHooks:N},D=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function U(t,e,n,r){Object.defineProperty(t,e,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var F=new RegExp("[^"+D.source+".$_\\d]");var V,B="__proto__"in{},H="undefined"!=typeof window,q="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,W=q&&WXEnvironment.platform.toLowerCase(),G=H&&window.navigator.userAgent.toLowerCase(),K=G&&/msie|trident/.test(G),X=G&&G.indexOf("msie 9.0")>0,Z=G&&G.indexOf("edge/")>0,J=(G&&G.indexOf("android"),G&&/iphone|ipad|ipod|ios/.test(G)||"ios"===W),Y=(G&&/chrome\/\d+/.test(G),G&&/phantomjs/.test(G),G&&G.match(/firefox\/(\d+)/)),Q={}.watch,tt=!1;if(H)try{var et={};Object.defineProperty(et,"passive",{get:function(){tt=!0}}),window.addEventListener("test-passive",null,et)}catch(t){}var nt=function(){return void 0===V&&(V=!H&&!q&&"undefined"!=typeof window&&(window.process&&"server"===window.process.env.VUE_ENV)),V},rt=H&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ot(t){return"function"==typeof t&&/native code/.test(t.toString())}var it,at="undefined"!=typeof Symbol&&ot(Symbol)&&"undefined"!=typeof Reflect&&ot(Reflect.ownKeys);it="undefined"!=typeof Set&&ot(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var st=T,ct=0,ut=function(){this.id=ct++,this.subs=[]};ut.prototype.addSub=function(t){this.subs.push(t)},ut.prototype.removeSub=function(t){g(this.subs,t)},ut.prototype.depend=function(){ut.target&&ut.target.addDep(this)},ut.prototype.notify=function(){var t=this.subs.slice();for(var e=0,n=t.length;e<n;e++)t[e].update()},ut.target=null;var lt=[];function ft(t){lt.push(t),ut.target=t}function pt(){lt.pop(),ut.target=lt[lt.length-1]}var dt=function(t,e,n,r,o,i,a,s){this.tag=t,this.data=e,this.children=n,this.text=r,this.elm=o,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},ht={child:{configurable:!0}};ht.child.get=function(){return this.componentInstance},Object.defineProperties(dt.prototype,ht);var vt=function(t){void 0===t&&(t="");var e=new dt;return e.text=t,e.isComment=!0,e};function mt(t){return new dt(void 0,void 0,void 0,String(t))}function gt(t){var e=new dt(t.tag,t.data,t.children&&t.children.slice(),t.text,t.elm,t.context,t.componentOptions,t.asyncFactory);return e.ns=t.ns,e.isStatic=t.isStatic,e.key=t.key,e.isComment=t.isComment,e.fnContext=t.fnContext,e.fnOptions=t.fnOptions,e.fnScopeId=t.fnScopeId,e.asyncMeta=t.asyncMeta,e.isCloned=!0,e}var yt=Array.prototype,bt=Object.create(yt);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(t){var e=yt[t];U(bt,t,(function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var o,i=e.apply(this,n),a=this.__ob__;switch(t){case"push":case"unshift":o=n;break;case"splice":o=n.slice(2)}return o&&a.observeArray(o),a.dep.notify(),i}))}));var wt=Object.getOwnPropertyNames(bt),xt=!0;function At(t){xt=t}var _t=function(t){this.value=t,this.dep=new ut,this.vmCount=0,U(t,"__ob__",this),Array.isArray(t)?(B?function(t,e){t.__proto__=e}(t,bt):function(t,e,n){for(var r=0,o=n.length;r<o;r++){var i=n[r];U(t,i,e[i])}}(t,bt,wt),this.observeArray(t)):this.walk(t)};function St(t,e){var n;if(s(t)&&!(t instanceof dt))return b(t,"__ob__")&&t.__ob__ instanceof _t?n=t.__ob__:xt&&!nt()&&(Array.isArray(t)||u(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new _t(t)),e&&n&&n.vmCount++,n}function Ct(t,e,n,r,o){var i=new ut,a=Object.getOwnPropertyDescriptor(t,e);if(!a||!1!==a.configurable){var s=a&&a.get,c=a&&a.set;s&&!c||2!==arguments.length||(n=t[e]);var u=!o&&St(n);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(t):n;return ut.target&&(i.depend(),u&&(u.dep.depend(),Array.isArray(e)&&jt(e))),e},set:function(e){var r=s?s.call(t):n;e===r||e!=e&&r!=r||s&&!c||(c?c.call(t,e):n=e,u=!o&&St(e),i.notify())}})}}function kt(t,e,n){if(Array.isArray(t)&&f(e))return t.length=Math.max(t.length,e),t.splice(e,1,n),n;if(e in t&&!(e in Object.prototype))return t[e]=n,n;var r=t.__ob__;return t._isVue||r&&r.vmCount?n:r?(Ct(r.value,e,n),r.dep.notify(),n):(t[e]=n,n)}function Ot(t,e){if(Array.isArray(t)&&f(e))t.splice(e,1);else{var n=t.__ob__;t._isVue||n&&n.vmCount||b(t,e)&&(delete t[e],n&&n.dep.notify())}}function jt(t){for(var e=void 0,n=0,r=t.length;n<r;n++)(e=t[n])&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&jt(e)}_t.prototype.walk=function(t){for(var e=Object.keys(t),n=0;n<e.length;n++)Ct(t,e[n])},_t.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)St(t[e])};var Et=z.optionMergeStrategies;function Tt(t,e){if(!e)return t;for(var n,r,o,i=at?Reflect.ownKeys(e):Object.keys(e),a=0;a<i.length;a++)"__ob__"!==(n=i[a])&&(r=t[n],o=e[n],b(t,n)?r!==o&&u(r)&&u(o)&&Tt(r,o):kt(t,n,o));return t}function Lt(t,e,n){return n?function(){var r="function"==typeof e?e.call(n,n):e,o="function"==typeof t?t.call(n,n):t;return r?Tt(r,o):o}:e?t?function(){return Tt("function"==typeof e?e.call(this,this):e,"function"==typeof t?t.call(this,this):t)}:e:t}function $t(t,e){var n=e?t?t.concat(e):Array.isArray(e)?e:[e]:t;return n?function(t){for(var e=[],n=0;n<t.length;n++)-1===e.indexOf(t[n])&&e.push(t[n]);return e}(n):n}function Pt(t,e,n,r){var o=Object.create(t||null);return e?j(o,e):o}Et.data=function(t,e,n){return n?Lt(t,e,n):e&&"function"!=typeof e?t:Lt(t,e)},N.forEach((function(t){Et[t]=$t})),R.forEach((function(t){Et[t+"s"]=Pt})),Et.watch=function(t,e,n,r){if(t===Q&&(t=void 0),e===Q&&(e=void 0),!e)return Object.create(t||null);if(!t)return e;var o={};for(var i in j(o,t),e){var a=o[i],s=e[i];a&&!Array.isArray(a)&&(a=[a]),o[i]=a?a.concat(s):Array.isArray(s)?s:[s]}return o},Et.props=Et.methods=Et.inject=Et.computed=function(t,e,n,r){if(!t)return e;var o=Object.create(null);return j(o,t),e&&j(o,e),o},Et.provide=Lt;var It=function(t,e){return void 0===e?t:e};function Mt(t,e,n){if("function"==typeof e&&(e=e.options),function(t,e){var n=t.props;if(n){var r,o,i={};if(Array.isArray(n))for(r=n.length;r--;)"string"==typeof(o=n[r])&&(i[A(o)]={type:null});else if(u(n))for(var a in n)o=n[a],i[A(a)]=u(o)?o:{type:o};else 0;t.props=i}}(e),function(t,e){var n=t.inject;if(n){var r=t.inject={};if(Array.isArray(n))for(var o=0;o<n.length;o++)r[n[o]]={from:n[o]};else if(u(n))for(var i in n){var a=n[i];r[i]=u(a)?j({from:i},a):{from:a}}else 0}}(e),function(t){var e=t.directives;if(e)for(var n in e){var r=e[n];"function"==typeof r&&(e[n]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(t=Mt(t,e.extends,n)),e.mixins))for(var r=0,o=e.mixins.length;r<o;r++)t=Mt(t,e.mixins[r],n);var i,a={};for(i in t)s(i);for(i in e)b(t,i)||s(i);function s(r){var o=Et[r]||It;a[r]=o(t[r],e[r],n,r)}return a}function Rt(t,e,n,r){if("string"==typeof n){var o=t[e];if(b(o,n))return o[n];var i=A(n);if(b(o,i))return o[i];var a=_(i);return b(o,a)?o[a]:o[n]||o[i]||o[a]}}function Nt(t,e,n,r){var o=e[t],i=!b(n,t),a=n[t],s=Ut(Boolean,o.type);if(s>-1)if(i&&!b(o,"default"))a=!1;else if(""===a||a===C(t)){var c=Ut(String,o.type);(c<0||s<c)&&(a=!0)}if(void 0===a){a=function(t,e,n){if(!b(e,"default"))return;var r=e.default;0;if(t&&t.$options.propsData&&void 0===t.$options.propsData[n]&&void 0!==t._props[n])return t._props[n];return"function"==typeof r&&"Function"!==zt(e.type)?r.call(t):r}(r,o,t);var u=xt;At(!0),St(a),At(u)}return a}function zt(t){var e=t&&t.toString().match(/^\s*function (\w+)/);return e?e[1]:""}function Dt(t,e){return zt(t)===zt(e)}function Ut(t,e){if(!Array.isArray(e))return Dt(e,t)?0:-1;for(var n=0,r=e.length;n<r;n++)if(Dt(e[n],t))return n;return-1}function Ft(t,e,n){ft();try{if(e)for(var r=e;r=r.$parent;){var o=r.$options.errorCaptured;if(o)for(var i=0;i<o.length;i++)try{if(!1===o[i].call(r,t,e,n))return}catch(t){Bt(t,r,"errorCaptured hook")}}Bt(t,e,n)}finally{pt()}}function Vt(t,e,n,r,o){var i;try{(i=n?t.apply(e,n):t.call(e))&&!i._isVue&&p(i)&&!i._handled&&(i.catch((function(t){return Ft(t,r,o+" (Promise/async)")})),i._handled=!0)}catch(t){Ft(t,r,o)}return i}function Bt(t,e,n){if(z.errorHandler)try{return z.errorHandler.call(null,t,e,n)}catch(e){e!==t&&Ht(e,null,"config.errorHandler")}Ht(t,e,n)}function Ht(t,e,n){if(!H&&!q||"undefined"==typeof console)throw t;console.error(t)}var qt,Wt=!1,Gt=[],Kt=!1;function Xt(){Kt=!1;var t=Gt.slice(0);Gt.length=0;for(var e=0;e<t.length;e++)t[e]()}if("undefined"!=typeof Promise&&ot(Promise)){var Zt=Promise.resolve();qt=function(){Zt.then(Xt),J&&setTimeout(T)},Wt=!0}else if(K||"undefined"==typeof MutationObserver||!ot(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())qt=void 0!==t&&ot(t)?function(){t(Xt)}:function(){setTimeout(Xt,0)};else{var Jt=1,Yt=new MutationObserver(Xt),Qt=document.createTextNode(String(Jt));Yt.observe(Qt,{characterData:!0}),qt=function(){Jt=(Jt+1)%2,Qt.data=String(Jt)},Wt=!0}function te(t,e){var n;if(Gt.push((function(){if(t)try{t.call(e)}catch(t){Ft(t,e,"nextTick")}else n&&n(e)})),Kt||(Kt=!0,qt()),!t&&"undefined"!=typeof Promise)return new Promise((function(t){n=t}))}var ee=new it;function ne(t){!function t(e,n){var r,o,i=Array.isArray(e);if(!i&&!s(e)||Object.isFrozen(e)||e instanceof dt)return;if(e.__ob__){var a=e.__ob__.dep.id;if(n.has(a))return;n.add(a)}if(i)for(r=e.length;r--;)t(e[r],n);else for(o=Object.keys(e),r=o.length;r--;)t(e[o[r]],n)}(t,ee),ee.clear()}var re=w((function(t){var e="&"===t.charAt(0),n="~"===(t=e?t.slice(1):t).charAt(0),r="!"===(t=n?t.slice(1):t).charAt(0);return{name:t=r?t.slice(1):t,once:n,capture:r,passive:e}}));function oe(t,e){function n(){var t=arguments,r=n.fns;if(!Array.isArray(r))return Vt(r,null,arguments,e,"v-on handler");for(var o=r.slice(),i=0;i<o.length;i++)Vt(o[i],null,t,e,"v-on handler")}return n.fns=t,n}function ie(t,e,n,o,a,s){var c,u,l,f;for(c in t)u=t[c],l=e[c],f=re(c),r(u)||(r(l)?(r(u.fns)&&(u=t[c]=oe(u,s)),i(f.once)&&(u=t[c]=a(f.name,u,f.capture)),n(f.name,u,f.capture,f.passive,f.params)):u!==l&&(l.fns=u,t[c]=l));for(c in e)r(t[c])&&o((f=re(c)).name,e[c],f.capture)}function ae(t,e,n){var a;t instanceof dt&&(t=t.data.hook||(t.data.hook={}));var s=t[e];function c(){n.apply(this,arguments),g(a.fns,c)}r(s)?a=oe([c]):o(s.fns)&&i(s.merged)?(a=s).fns.push(c):a=oe([s,c]),a.merged=!0,t[e]=a}function se(t,e,n,r,i){if(o(e)){if(b(e,n))return t[n]=e[n],i||delete e[n],!0;if(b(e,r))return t[n]=e[r],i||delete e[r],!0}return!1}function ce(t){return a(t)?[mt(t)]:Array.isArray(t)?function t(e,n){var s,c,u,l,f=[];for(s=0;s<e.length;s++)r(c=e[s])||"boolean"==typeof c||(u=f.length-1,l=f[u],Array.isArray(c)?c.length>0&&(ue((c=t(c,(n||"")+"_"+s))[0])&&ue(l)&&(f[u]=mt(l.text+c[0].text),c.shift()),f.push.apply(f,c)):a(c)?ue(l)?f[u]=mt(l.text+c):""!==c&&f.push(mt(c)):ue(c)&&ue(l)?f[u]=mt(l.text+c.text):(i(e._isVList)&&o(c.tag)&&r(c.key)&&o(n)&&(c.key="__vlist"+n+"_"+s+"__"),f.push(c)));return f}(t):void 0}function ue(t){return o(t)&&o(t.text)&&!1===t.isComment}function le(t,e){if(t){for(var n=Object.create(null),r=at?Reflect.ownKeys(t):Object.keys(t),o=0;o<r.length;o++){var i=r[o];if("__ob__"!==i){for(var a=t[i].from,s=e;s;){if(s._provided&&b(s._provided,a)){n[i]=s._provided[a];break}s=s.$parent}if(!s)if("default"in t[i]){var c=t[i].default;n[i]="function"==typeof c?c.call(e):c}else 0}}return n}}function fe(t,e){if(!t||!t.length)return{};for(var n={},r=0,o=t.length;r<o;r++){var i=t[r],a=i.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,i.context!==e&&i.fnContext!==e||!a||null==a.slot)(n.default||(n.default=[])).push(i);else{var s=a.slot,c=n[s]||(n[s]=[]);"template"===i.tag?c.push.apply(c,i.children||[]):c.push(i)}}for(var u in n)n[u].every(pe)&&delete n[u];return n}function pe(t){return t.isComment&&!t.asyncFactory||" "===t.text}function de(t,e,r){var o,i=Object.keys(e).length>0,a=t?!!t.$stable:!i,s=t&&t.$key;if(t){if(t._normalized)return t._normalized;if(a&&r&&r!==n&&s===r.$key&&!i&&!r.$hasNormal)return r;for(var c in o={},t)t[c]&&"$"!==c[0]&&(o[c]=he(e,c,t[c]))}else o={};for(var u in e)u in o||(o[u]=ve(e,u));return t&&Object.isExtensible(t)&&(t._normalized=o),U(o,"$stable",a),U(o,"$key",s),U(o,"$hasNormal",i),o}function he(t,e,n){var r=function(){var t=arguments.length?n.apply(null,arguments):n({});return(t=t&&"object"==typeof t&&!Array.isArray(t)?[t]:ce(t))&&(0===t.length||1===t.length&&t[0].isComment)?void 0:t};return n.proxy&&Object.defineProperty(t,e,{get:r,enumerable:!0,configurable:!0}),r}function ve(t,e){return function(){return t[e]}}function me(t,e){var n,r,i,a,c;if(Array.isArray(t)||"string"==typeof t)for(n=new Array(t.length),r=0,i=t.length;r<i;r++)n[r]=e(t[r],r);else if("number"==typeof t)for(n=new Array(t),r=0;r<t;r++)n[r]=e(r+1,r);else if(s(t))if(at&&t[Symbol.iterator]){n=[];for(var u=t[Symbol.iterator](),l=u.next();!l.done;)n.push(e(l.value,n.length)),l=u.next()}else for(a=Object.keys(t),n=new Array(a.length),r=0,i=a.length;r<i;r++)c=a[r],n[r]=e(t[c],c,r);return o(n)||(n=[]),n._isVList=!0,n}function ge(t,e,n,r){var o,i=this.$scopedSlots[t];i?(n=n||{},r&&(n=j(j({},r),n)),o=i(n)||e):o=this.$slots[t]||e;var a=n&&n.slot;return a?this.$createElement("template",{slot:a},o):o}function ye(t){return Rt(this.$options,"filters",t)||$}function be(t,e){return Array.isArray(t)?-1===t.indexOf(e):t!==e}function we(t,e,n,r,o){var i=z.keyCodes[e]||n;return o&&r&&!z.keyCodes[e]?be(o,r):i?be(i,t):r?C(r)!==e:void 0}function xe(t,e,n,r,o){if(n)if(s(n)){var i;Array.isArray(n)&&(n=E(n));var a=function(a){if("class"===a||"style"===a||m(a))i=t;else{var s=t.attrs&&t.attrs.type;i=r||z.mustUseProp(e,s,a)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}var c=A(a),u=C(a);c in i||u in i||(i[a]=n[a],o&&((t.on||(t.on={}))["update:"+a]=function(t){n[a]=t}))};for(var c in n)a(c)}else;return t}function Ae(t,e){var n=this._staticTrees||(this._staticTrees=[]),r=n[t];return r&&!e||Se(r=n[t]=this.$options.staticRenderFns[t].call(this._renderProxy,null,this),"__static__"+t,!1),r}function _e(t,e,n){return Se(t,"__once__"+e+(n?"_"+n:""),!0),t}function Se(t,e,n){if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]&&"string"!=typeof t[r]&&Ce(t[r],e+"_"+r,n);else Ce(t,e,n)}function Ce(t,e,n){t.isStatic=!0,t.key=e,t.isOnce=n}function ke(t,e){if(e)if(u(e)){var n=t.on=t.on?j({},t.on):{};for(var r in e){var o=n[r],i=e[r];n[r]=o?[].concat(o,i):i}}else;return t}function Oe(t,e,n,r){e=e||{$stable:!n};for(var o=0;o<t.length;o++){var i=t[o];Array.isArray(i)?Oe(i,e,n):i&&(i.proxy&&(i.fn.proxy=!0),e[i.key]=i.fn)}return r&&(e.$key=r),e}function je(t,e){for(var n=0;n<e.length;n+=2){var r=e[n];"string"==typeof r&&r&&(t[e[n]]=e[n+1])}return t}function Ee(t,e){return"string"==typeof t?e+t:t}function Te(t){t._o=_e,t._n=h,t._s=d,t._l=me,t._t=ge,t._q=P,t._i=I,t._m=Ae,t._f=ye,t._k=we,t._b=xe,t._v=mt,t._e=vt,t._u=Oe,t._g=ke,t._d=je,t._p=Ee}function Le(t,e,r,o,a){var s,c=this,u=a.options;b(o,"_uid")?(s=Object.create(o))._original=o:(s=o,o=o._original);var l=i(u._compiled),f=!l;this.data=t,this.props=e,this.children=r,this.parent=o,this.listeners=t.on||n,this.injections=le(u.inject,o),this.slots=function(){return c.$slots||de(t.scopedSlots,c.$slots=fe(r,o)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return de(t.scopedSlots,this.slots())}}),l&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=de(t.scopedSlots,this.$slots)),u._scopeId?this._c=function(t,e,n,r){var i=ze(s,t,e,n,r,f);return i&&!Array.isArray(i)&&(i.fnScopeId=u._scopeId,i.fnContext=o),i}:this._c=function(t,e,n,r){return ze(s,t,e,n,r,f)}}function $e(t,e,n,r,o){var i=gt(t);return i.fnContext=n,i.fnOptions=r,e.slot&&((i.data||(i.data={})).slot=e.slot),i}function Pe(t,e){for(var n in e)t[A(n)]=e[n]}Te(Le.prototype);var Ie={init:function(t,e){if(t.componentInstance&&!t.componentInstance._isDestroyed&&t.data.keepAlive){var n=t;Ie.prepatch(n,n)}else{(t.componentInstance=function(t,e){var n={_isComponent:!0,_parentVnode:t,parent:e},r=t.data.inlineTemplate;o(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns);return new t.componentOptions.Ctor(n)}(t,Ke)).$mount(e?t.elm:void 0,e)}},prepatch:function(t,e){var r=e.componentOptions;!function(t,e,r,o,i){0;var a=o.data.scopedSlots,s=t.$scopedSlots,c=!!(a&&!a.$stable||s!==n&&!s.$stable||a&&t.$scopedSlots.$key!==a.$key),u=!!(i||t.$options._renderChildren||c);t.$options._parentVnode=o,t.$vnode=o,t._vnode&&(t._vnode.parent=o);if(t.$options._renderChildren=i,t.$attrs=o.data.attrs||n,t.$listeners=r||n,e&&t.$options.props){At(!1);for(var l=t._props,f=t.$options._propKeys||[],p=0;p<f.length;p++){var d=f[p],h=t.$options.props;l[d]=Nt(d,h,e,t)}At(!0),t.$options.propsData=e}r=r||n;var v=t.$options._parentListeners;t.$options._parentListeners=r,Ge(t,r,v),u&&(t.$slots=fe(i,o.context),t.$forceUpdate());0}(e.componentInstance=t.componentInstance,r.propsData,r.listeners,e,r.children)},insert:function(t){var e,n=t.context,r=t.componentInstance;r._isMounted||(r._isMounted=!0,Ye(r,"mounted")),t.data.keepAlive&&(n._isMounted?((e=r)._inactive=!1,tn.push(e)):Je(r,!0))},destroy:function(t){var e=t.componentInstance;e._isDestroyed||(t.data.keepAlive?function t(e,n){if(n&&(e._directInactive=!0,Ze(e)))return;if(!e._inactive){e._inactive=!0;for(var r=0;r<e.$children.length;r++)t(e.$children[r]);Ye(e,"deactivated")}}(e,!0):e.$destroy())}},Me=Object.keys(Ie);function Re(t,e,a,c,u){if(!r(t)){var l=a.$options._base;if(s(t)&&(t=l.extend(t)),"function"==typeof t){var f;if(r(t.cid)&&void 0===(t=function(t,e){if(i(t.error)&&o(t.errorComp))return t.errorComp;if(o(t.resolved))return t.resolved;var n=Ue;n&&o(t.owners)&&-1===t.owners.indexOf(n)&&t.owners.push(n);if(i(t.loading)&&o(t.loadingComp))return t.loadingComp;if(n&&!o(t.owners)){var a=t.owners=[n],c=!0,u=null,l=null;n.$on("hook:destroyed",(function(){return g(a,n)}));var f=function(t){for(var e=0,n=a.length;e<n;e++)a[e].$forceUpdate();t&&(a.length=0,null!==u&&(clearTimeout(u),u=null),null!==l&&(clearTimeout(l),l=null))},d=M((function(n){t.resolved=Fe(n,e),c?a.length=0:f(!0)})),h=M((function(e){o(t.errorComp)&&(t.error=!0,f(!0))})),v=t(d,h);return s(v)&&(p(v)?r(t.resolved)&&v.then(d,h):p(v.component)&&(v.component.then(d,h),o(v.error)&&(t.errorComp=Fe(v.error,e)),o(v.loading)&&(t.loadingComp=Fe(v.loading,e),0===v.delay?t.loading=!0:u=setTimeout((function(){u=null,r(t.resolved)&&r(t.error)&&(t.loading=!0,f(!1))}),v.delay||200)),o(v.timeout)&&(l=setTimeout((function(){l=null,r(t.resolved)&&h(null)}),v.timeout)))),c=!1,t.loading?t.loadingComp:t.resolved}}(f=t,l)))return function(t,e,n,r,o){var i=vt();return i.asyncFactory=t,i.asyncMeta={data:e,context:n,children:r,tag:o},i}(f,e,a,c,u);e=e||{},xn(t),o(e.model)&&function(t,e){var n=t.model&&t.model.prop||"value",r=t.model&&t.model.event||"input";(e.attrs||(e.attrs={}))[n]=e.model.value;var i=e.on||(e.on={}),a=i[r],s=e.model.callback;o(a)?(Array.isArray(a)?-1===a.indexOf(s):a!==s)&&(i[r]=[s].concat(a)):i[r]=s}(t.options,e);var d=function(t,e,n){var i=e.options.props;if(!r(i)){var a={},s=t.attrs,c=t.props;if(o(s)||o(c))for(var u in i){var l=C(u);se(a,c,u,l,!0)||se(a,s,u,l,!1)}return a}}(e,t);if(i(t.options.functional))return function(t,e,r,i,a){var s=t.options,c={},u=s.props;if(o(u))for(var l in u)c[l]=Nt(l,u,e||n);else o(r.attrs)&&Pe(c,r.attrs),o(r.props)&&Pe(c,r.props);var f=new Le(r,c,a,i,t),p=s.render.call(null,f._c,f);if(p instanceof dt)return $e(p,r,f.parent,s,f);if(Array.isArray(p)){for(var d=ce(p)||[],h=new Array(d.length),v=0;v<d.length;v++)h[v]=$e(d[v],r,f.parent,s,f);return h}}(t,d,e,a,c);var h=e.on;if(e.on=e.nativeOn,i(t.options.abstract)){var v=e.slot;e={},v&&(e.slot=v)}!function(t){for(var e=t.hook||(t.hook={}),n=0;n<Me.length;n++){var r=Me[n],o=e[r],i=Ie[r];o===i||o&&o._merged||(e[r]=o?Ne(i,o):i)}}(e);var m=t.options.name||u;return new dt("vue-component-"+t.cid+(m?"-"+m:""),e,void 0,void 0,void 0,a,{Ctor:t,propsData:d,listeners:h,tag:u,children:c},f)}}}function Ne(t,e){var n=function(n,r){t(n,r),e(n,r)};return n._merged=!0,n}function ze(t,e,n,c,u,l){return(Array.isArray(n)||a(n))&&(u=c,c=n,n=void 0),i(l)&&(u=2),function(t,e,n,a,c){if(o(n)&&o(n.__ob__))return vt();o(n)&&o(n.is)&&(e=n.is);if(!e)return vt();0;Array.isArray(a)&&"function"==typeof a[0]&&((n=n||{}).scopedSlots={default:a[0]},a.length=0);2===c?a=ce(a):1===c&&(a=function(t){for(var e=0;e<t.length;e++)if(Array.isArray(t[e]))return Array.prototype.concat.apply([],t);return t}(a));var u,l;if("string"==typeof e){var f;l=t.$vnode&&t.$vnode.ns||z.getTagNamespace(e),u=z.isReservedTag(e)?new dt(z.parsePlatformTagName(e),n,a,void 0,void 0,t):n&&n.pre||!o(f=Rt(t.$options,"components",e))?new dt(e,n,a,void 0,void 0,t):Re(f,n,t,a,e)}else u=Re(e,n,t,a);return Array.isArray(u)?u:o(u)?(o(l)&&function t(e,n,a){e.ns=n,"foreignObject"===e.tag&&(n=void 0,a=!0);if(o(e.children))for(var s=0,c=e.children.length;s<c;s++){var u=e.children[s];o(u.tag)&&(r(u.ns)||i(a)&&"svg"!==u.tag)&&t(u,n,a)}}(u,l),o(n)&&function(t){s(t.style)&&ne(t.style);s(t.class)&&ne(t.class)}(n),u):vt()}(t,e,n,c,u)}var De,Ue=null;function Fe(t,e){return(t.__esModule||at&&"Module"===t[Symbol.toStringTag])&&(t=t.default),s(t)?e.extend(t):t}function Ve(t){return t.isComment&&t.asyncFactory}function Be(t){if(Array.isArray(t))for(var e=0;e<t.length;e++){var n=t[e];if(o(n)&&(o(n.componentOptions)||Ve(n)))return n}}function He(t,e){De.$on(t,e)}function qe(t,e){De.$off(t,e)}function We(t,e){var n=De;return function r(){var o=e.apply(null,arguments);null!==o&&n.$off(t,r)}}function Ge(t,e,n){De=t,ie(e,n||{},He,qe,We,t),De=void 0}var Ke=null;function Xe(t){var e=Ke;return Ke=t,function(){Ke=e}}function Ze(t){for(;t&&(t=t.$parent);)if(t._inactive)return!0;return!1}function Je(t,e){if(e){if(t._directInactive=!1,Ze(t))return}else if(t._directInactive)return;if(t._inactive||null===t._inactive){t._inactive=!1;for(var n=0;n<t.$children.length;n++)Je(t.$children[n]);Ye(t,"activated")}}function Ye(t,e){ft();var n=t.$options[e],r=e+" hook";if(n)for(var o=0,i=n.length;o<i;o++)Vt(n[o],t,null,t,r);t._hasHookEvent&&t.$emit("hook:"+e),pt()}var Qe=[],tn=[],en={},nn=!1,rn=!1,on=0;var an=0,sn=Date.now;if(H&&!K){var cn=window.performance;cn&&"function"==typeof cn.now&&sn()>document.createEvent("Event").timeStamp&&(sn=function(){return cn.now()})}function un(){var t,e;for(an=sn(),rn=!0,Qe.sort((function(t,e){return t.id-e.id})),on=0;on<Qe.length;on++)(t=Qe[on]).before&&t.before(),e=t.id,en[e]=null,t.run();var n=tn.slice(),r=Qe.slice();on=Qe.length=tn.length=0,en={},nn=rn=!1,function(t){for(var e=0;e<t.length;e++)t[e]._inactive=!0,Je(t[e],!0)}(n),function(t){var e=t.length;for(;e--;){var n=t[e],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&Ye(r,"updated")}}(r),rt&&z.devtools&&rt.emit("flush")}var ln=0,fn=function(t,e,n,r,o){this.vm=t,o&&(t._watcher=this),t._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++ln,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new it,this.newDepIds=new it,this.expression="","function"==typeof e?this.getter=e:(this.getter=function(t){if(!F.test(t)){var e=t.split(".");return function(t){for(var n=0;n<e.length;n++){if(!t)return;t=t[e[n]]}return t}}}(e),this.getter||(this.getter=T)),this.value=this.lazy?void 0:this.get()};fn.prototype.get=function(){var t;ft(this);var e=this.vm;try{t=this.getter.call(e,e)}catch(t){if(!this.user)throw t;Ft(t,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&ne(t),pt(),this.cleanupDeps()}return t},fn.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},fn.prototype.cleanupDeps=function(){for(var t=this.deps.length;t--;){var e=this.deps[t];this.newDepIds.has(e.id)||e.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},fn.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(t){var e=t.id;if(null==en[e]){if(en[e]=!0,rn){for(var n=Qe.length-1;n>on&&Qe[n].id>t.id;)n--;Qe.splice(n+1,0,t)}else Qe.push(t);nn||(nn=!0,te(un))}}(this)},fn.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||s(t)||this.deep){var e=this.value;if(this.value=t,this.user)try{this.cb.call(this.vm,t,e)}catch(t){Ft(t,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,t,e)}}},fn.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},fn.prototype.depend=function(){for(var t=this.deps.length;t--;)this.deps[t].depend()},fn.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||g(this.vm._watchers,this);for(var t=this.deps.length;t--;)this.deps[t].removeSub(this);this.active=!1}};var pn={enumerable:!0,configurable:!0,get:T,set:T};function dn(t,e,n){pn.get=function(){return this[e][n]},pn.set=function(t){this[e][n]=t},Object.defineProperty(t,n,pn)}function hn(t){t._watchers=[];var e=t.$options;e.props&&function(t,e){var n=t.$options.propsData||{},r=t._props={},o=t.$options._propKeys=[];t.$parent&&At(!1);var i=function(i){o.push(i);var a=Nt(i,e,n,t);Ct(r,i,a),i in t||dn(t,"_props",i)};for(var a in e)i(a);At(!0)}(t,e.props),e.methods&&function(t,e){t.$options.props;for(var n in e)t[n]="function"!=typeof e[n]?T:k(e[n],t)}(t,e.methods),e.data?function(t){var e=t.$options.data;u(e=t._data="function"==typeof e?function(t,e){ft();try{return t.call(e,e)}catch(t){return Ft(t,e,"data()"),{}}finally{pt()}}(e,t):e||{})||(e={});var n=Object.keys(e),r=t.$options.props,o=(t.$options.methods,n.length);for(;o--;){var i=n[o];0,r&&b(r,i)||(a=void 0,36!==(a=(i+"").charCodeAt(0))&&95!==a&&dn(t,"_data",i))}var a;St(e,!0)}(t):St(t._data={},!0),e.computed&&function(t,e){var n=t._computedWatchers=Object.create(null),r=nt();for(var o in e){var i=e[o],a="function"==typeof i?i:i.get;0,r||(n[o]=new fn(t,a||T,T,vn)),o in t||mn(t,o,i)}}(t,e.computed),e.watch&&e.watch!==Q&&function(t,e){for(var n in e){var r=e[n];if(Array.isArray(r))for(var o=0;o<r.length;o++)bn(t,n,r[o]);else bn(t,n,r)}}(t,e.watch)}var vn={lazy:!0};function mn(t,e,n){var r=!nt();"function"==typeof n?(pn.get=r?gn(e):yn(n),pn.set=T):(pn.get=n.get?r&&!1!==n.cache?gn(e):yn(n.get):T,pn.set=n.set||T),Object.defineProperty(t,e,pn)}function gn(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),ut.target&&e.depend(),e.value}}function yn(t){return function(){return t.call(this,this)}}function bn(t,e,n,r){return u(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=t[n]),t.$watch(e,n,r)}var wn=0;function xn(t){var e=t.options;if(t.super){var n=xn(t.super);if(n!==t.superOptions){t.superOptions=n;var r=function(t){var e,n=t.options,r=t.sealedOptions;for(var o in n)n[o]!==r[o]&&(e||(e={}),e[o]=n[o]);return e}(t);r&&j(t.extendOptions,r),(e=t.options=Mt(n,t.extendOptions)).name&&(e.components[e.name]=t)}}return e}function An(t){this._init(t)}function _n(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var n=this,r=n.cid,o=t._Ctor||(t._Ctor={});if(o[r])return o[r];var i=t.name||n.options.name;var a=function(t){this._init(t)};return(a.prototype=Object.create(n.prototype)).constructor=a,a.cid=e++,a.options=Mt(n.options,t),a.super=n,a.options.props&&function(t){var e=t.options.props;for(var n in e)dn(t.prototype,"_props",n)}(a),a.options.computed&&function(t){var e=t.options.computed;for(var n in e)mn(t.prototype,n,e[n])}(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,R.forEach((function(t){a[t]=n[t]})),i&&(a.options.components[i]=a),a.superOptions=n.options,a.extendOptions=t,a.sealedOptions=j({},a.options),o[r]=a,a}}function Sn(t){return t&&(t.Ctor.options.name||t.tag)}function Cn(t,e){return Array.isArray(t)?t.indexOf(e)>-1:"string"==typeof t?t.split(",").indexOf(e)>-1:!!l(t)&&t.test(e)}function kn(t,e){var n=t.cache,r=t.keys,o=t._vnode;for(var i in n){var a=n[i];if(a){var s=Sn(a.componentOptions);s&&!e(s)&&On(n,i,r,o)}}}function On(t,e,n,r){var o=t[e];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),t[e]=null,g(n,e)}!function(t){t.prototype._init=function(t){var e=this;e._uid=wn++,e._isVue=!0,t&&t._isComponent?function(t,e){var n=t.$options=Object.create(t.constructor.options),r=e._parentVnode;n.parent=e.parent,n._parentVnode=r;var o=r.componentOptions;n.propsData=o.propsData,n._parentListeners=o.listeners,n._renderChildren=o.children,n._componentTag=o.tag,e.render&&(n.render=e.render,n.staticRenderFns=e.staticRenderFns)}(e,t):e.$options=Mt(xn(e.constructor),t||{},e),e._renderProxy=e,e._self=e,function(t){var e=t.$options,n=e.parent;if(n&&!e.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(t)}t.$parent=n,t.$root=n?n.$root:t,t.$children=[],t.$refs={},t._watcher=null,t._inactive=null,t._directInactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}(e),function(t){t._events=Object.create(null),t._hasHookEvent=!1;var e=t.$options._parentListeners;e&&Ge(t,e)}(e),function(t){t._vnode=null,t._staticTrees=null;var e=t.$options,r=t.$vnode=e._parentVnode,o=r&&r.context;t.$slots=fe(e._renderChildren,o),t.$scopedSlots=n,t._c=function(e,n,r,o){return ze(t,e,n,r,o,!1)},t.$createElement=function(e,n,r,o){return ze(t,e,n,r,o,!0)};var i=r&&r.data;Ct(t,"$attrs",i&&i.attrs||n,null,!0),Ct(t,"$listeners",e._parentListeners||n,null,!0)}(e),Ye(e,"beforeCreate"),function(t){var e=le(t.$options.inject,t);e&&(At(!1),Object.keys(e).forEach((function(n){Ct(t,n,e[n])})),At(!0))}(e),hn(e),function(t){var e=t.$options.provide;e&&(t._provided="function"==typeof e?e.call(t):e)}(e),Ye(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}(An),function(t){var e={get:function(){return this._data}},n={get:function(){return this._props}};Object.defineProperty(t.prototype,"$data",e),Object.defineProperty(t.prototype,"$props",n),t.prototype.$set=kt,t.prototype.$delete=Ot,t.prototype.$watch=function(t,e,n){if(u(e))return bn(this,t,e,n);(n=n||{}).user=!0;var r=new fn(this,t,e,n);if(n.immediate)try{e.call(this,r.value)}catch(t){Ft(t,this,'callback for immediate watcher "'+r.expression+'"')}return function(){r.teardown()}}}(An),function(t){var e=/^hook:/;t.prototype.$on=function(t,n){var r=this;if(Array.isArray(t))for(var o=0,i=t.length;o<i;o++)r.$on(t[o],n);else(r._events[t]||(r._events[t]=[])).push(n),e.test(t)&&(r._hasHookEvent=!0);return r},t.prototype.$once=function(t,e){var n=this;function r(){n.$off(t,r),e.apply(n,arguments)}return r.fn=e,n.$on(t,r),n},t.prototype.$off=function(t,e){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(t)){for(var r=0,o=t.length;r<o;r++)n.$off(t[r],e);return n}var i,a=n._events[t];if(!a)return n;if(!e)return n._events[t]=null,n;for(var s=a.length;s--;)if((i=a[s])===e||i.fn===e){a.splice(s,1);break}return n},t.prototype.$emit=function(t){var e=this,n=e._events[t];if(n){n=n.length>1?O(n):n;for(var r=O(arguments,1),o='event handler for "'+t+'"',i=0,a=n.length;i<a;i++)Vt(n[i],e,r,e,o)}return e}}(An),function(t){t.prototype._update=function(t,e){var n=this,r=n.$el,o=n._vnode,i=Xe(n);n._vnode=t,n.$el=o?n.__patch__(o,t):n.__patch__(n.$el,t,e,!1),i(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},t.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){Ye(t,"beforeDestroy"),t._isBeingDestroyed=!0;var e=t.$parent;!e||e._isBeingDestroyed||t.$options.abstract||g(e.$children,t),t._watcher&&t._watcher.teardown();for(var n=t._watchers.length;n--;)t._watchers[n].teardown();t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,t.__patch__(t._vnode,null),Ye(t,"destroyed"),t.$off(),t.$el&&(t.$el.__vue__=null),t.$vnode&&(t.$vnode.parent=null)}}}(An),function(t){Te(t.prototype),t.prototype.$nextTick=function(t){return te(t,this)},t.prototype._render=function(){var t,e=this,n=e.$options,r=n.render,o=n._parentVnode;o&&(e.$scopedSlots=de(o.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=o;try{Ue=e,t=r.call(e._renderProxy,e.$createElement)}catch(n){Ft(n,e,"render"),t=e._vnode}finally{Ue=null}return Array.isArray(t)&&1===t.length&&(t=t[0]),t instanceof dt||(t=vt()),t.parent=o,t}}(An);var jn=[String,RegExp,Array],En={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:jn,exclude:jn,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var t in this.cache)On(this.cache,t,this.keys)},mounted:function(){var t=this;this.$watch("include",(function(e){kn(t,(function(t){return Cn(e,t)}))})),this.$watch("exclude",(function(e){kn(t,(function(t){return!Cn(e,t)}))}))},render:function(){var t=this.$slots.default,e=Be(t),n=e&&e.componentOptions;if(n){var r=Sn(n),o=this.include,i=this.exclude;if(o&&(!r||!Cn(o,r))||i&&r&&Cn(i,r))return e;var a=this.cache,s=this.keys,c=null==e.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):e.key;a[c]?(e.componentInstance=a[c].componentInstance,g(s,c),s.push(c)):(a[c]=e,s.push(c),this.max&&s.length>parseInt(this.max)&&On(a,s[0],s,this._vnode)),e.data.keepAlive=!0}return e||t&&t[0]}}};!function(t){var e={get:function(){return z}};Object.defineProperty(t,"config",e),t.util={warn:st,extend:j,mergeOptions:Mt,defineReactive:Ct},t.set=kt,t.delete=Ot,t.nextTick=te,t.observable=function(t){return St(t),t},t.options=Object.create(null),R.forEach((function(e){t.options[e+"s"]=Object.create(null)})),t.options._base=t,j(t.options.components,En),function(t){t.use=function(t){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(t)>-1)return this;var n=O(arguments,1);return n.unshift(this),"function"==typeof t.install?t.install.apply(t,n):"function"==typeof t&&t.apply(null,n),e.push(t),this}}(t),function(t){t.mixin=function(t){return this.options=Mt(this.options,t),this}}(t),_n(t),function(t){R.forEach((function(e){t[e]=function(t,n){return n?("component"===e&&u(n)&&(n.name=n.name||t,n=this.options._base.extend(n)),"directive"===e&&"function"==typeof n&&(n={bind:n,update:n}),this.options[e+"s"][t]=n,n):this.options[e+"s"][t]}}))}(t)}(An),Object.defineProperty(An.prototype,"$isServer",{get:nt}),Object.defineProperty(An.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(An,"FunctionalRenderContext",{value:Le}),An.version="2.6.12";var Tn=v("style,class"),Ln=v("input,textarea,option,select,progress"),$n=v("contenteditable,draggable,spellcheck"),Pn=v("events,caret,typing,plaintext-only"),In=v("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Mn="http://www.w3.org/1999/xlink",Rn=function(t){return":"===t.charAt(5)&&"xlink"===t.slice(0,5)},Nn=function(t){return Rn(t)?t.slice(6,t.length):""},zn=function(t){return null==t||!1===t};function Dn(t){for(var e=t.data,n=t,r=t;o(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=Un(r.data,e));for(;o(n=n.parent);)n&&n.data&&(e=Un(e,n.data));return function(t,e){if(o(t)||o(e))return Fn(t,Vn(e));return""}(e.staticClass,e.class)}function Un(t,e){return{staticClass:Fn(t.staticClass,e.staticClass),class:o(t.class)?[t.class,e.class]:e.class}}function Fn(t,e){return t?e?t+" "+e:t:e||""}function Vn(t){return Array.isArray(t)?function(t){for(var e,n="",r=0,i=t.length;r<i;r++)o(e=Vn(t[r]))&&""!==e&&(n&&(n+=" "),n+=e);return n}(t):s(t)?function(t){var e="";for(var n in t)t[n]&&(e&&(e+=" "),e+=n);return e}(t):"string"==typeof t?t:""}var Bn={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Hn=v("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),qn=v("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Wn=function(t){return Hn(t)||qn(t)};var Gn=Object.create(null);var Kn=v("text,number,password,search,email,tel,url");var Xn=Object.freeze({createElement:function(t,e){var n=document.createElement(t);return"select"!==t||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n},createElementNS:function(t,e){return document.createElementNS(Bn[t],e)},createTextNode:function(t){return document.createTextNode(t)},createComment:function(t){return document.createComment(t)},insertBefore:function(t,e,n){t.insertBefore(e,n)},removeChild:function(t,e){t.removeChild(e)},appendChild:function(t,e){t.appendChild(e)},parentNode:function(t){return t.parentNode},nextSibling:function(t){return t.nextSibling},tagName:function(t){return t.tagName},setTextContent:function(t,e){t.textContent=e},setStyleScope:function(t,e){t.setAttribute(e,"")}}),Zn={create:function(t,e){Jn(e)},update:function(t,e){t.data.ref!==e.data.ref&&(Jn(t,!0),Jn(e))},destroy:function(t){Jn(t,!0)}};function Jn(t,e){var n=t.data.ref;if(o(n)){var r=t.context,i=t.componentInstance||t.elm,a=r.$refs;e?Array.isArray(a[n])?g(a[n],i):a[n]===i&&(a[n]=void 0):t.data.refInFor?Array.isArray(a[n])?a[n].indexOf(i)<0&&a[n].push(i):a[n]=[i]:a[n]=i}}var Yn=new dt("",{},[]),Qn=["create","activate","update","remove","destroy"];function tr(t,e){return t.key===e.key&&(t.tag===e.tag&&t.isComment===e.isComment&&o(t.data)===o(e.data)&&function(t,e){if("input"!==t.tag)return!0;var n,r=o(n=t.data)&&o(n=n.attrs)&&n.type,i=o(n=e.data)&&o(n=n.attrs)&&n.type;return r===i||Kn(r)&&Kn(i)}(t,e)||i(t.isAsyncPlaceholder)&&t.asyncFactory===e.asyncFactory&&r(e.asyncFactory.error))}function er(t,e,n){var r,i,a={};for(r=e;r<=n;++r)o(i=t[r].key)&&(a[i]=r);return a}var nr={create:rr,update:rr,destroy:function(t){rr(t,Yn)}};function rr(t,e){(t.data.directives||e.data.directives)&&function(t,e){var n,r,o,i=t===Yn,a=e===Yn,s=ir(t.data.directives,t.context),c=ir(e.data.directives,e.context),u=[],l=[];for(n in c)r=s[n],o=c[n],r?(o.oldValue=r.value,o.oldArg=r.arg,sr(o,"update",e,t),o.def&&o.def.componentUpdated&&l.push(o)):(sr(o,"bind",e,t),o.def&&o.def.inserted&&u.push(o));if(u.length){var f=function(){for(var n=0;n<u.length;n++)sr(u[n],"inserted",e,t)};i?ae(e,"insert",f):f()}l.length&&ae(e,"postpatch",(function(){for(var n=0;n<l.length;n++)sr(l[n],"componentUpdated",e,t)}));if(!i)for(n in s)c[n]||sr(s[n],"unbind",t,t,a)}(t,e)}var or=Object.create(null);function ir(t,e){var n,r,o=Object.create(null);if(!t)return o;for(n=0;n<t.length;n++)(r=t[n]).modifiers||(r.modifiers=or),o[ar(r)]=r,r.def=Rt(e.$options,"directives",r.name);return o}function ar(t){return t.rawName||t.name+"."+Object.keys(t.modifiers||{}).join(".")}function sr(t,e,n,r,o){var i=t.def&&t.def[e];if(i)try{i(n.elm,t,n,r,o)}catch(r){Ft(r,n.context,"directive "+t.name+" "+e+" hook")}}var cr=[Zn,nr];function ur(t,e){var n=e.componentOptions;if(!(o(n)&&!1===n.Ctor.options.inheritAttrs||r(t.data.attrs)&&r(e.data.attrs))){var i,a,s=e.elm,c=t.data.attrs||{},u=e.data.attrs||{};for(i in o(u.__ob__)&&(u=e.data.attrs=j({},u)),u)a=u[i],c[i]!==a&&lr(s,i,a);for(i in(K||Z)&&u.value!==c.value&&lr(s,"value",u.value),c)r(u[i])&&(Rn(i)?s.removeAttributeNS(Mn,Nn(i)):$n(i)||s.removeAttribute(i))}}function lr(t,e,n){t.tagName.indexOf("-")>-1?fr(t,e,n):In(e)?zn(n)?t.removeAttribute(e):(n="allowfullscreen"===e&&"EMBED"===t.tagName?"true":e,t.setAttribute(e,n)):$n(e)?t.setAttribute(e,function(t,e){return zn(e)||"false"===e?"false":"contenteditable"===t&&Pn(e)?e:"true"}(e,n)):Rn(e)?zn(n)?t.removeAttributeNS(Mn,Nn(e)):t.setAttributeNS(Mn,e,n):fr(t,e,n)}function fr(t,e,n){if(zn(n))t.removeAttribute(e);else{if(K&&!X&&"TEXTAREA"===t.tagName&&"placeholder"===e&&""!==n&&!t.__ieph){var r=function(e){e.stopImmediatePropagation(),t.removeEventListener("input",r)};t.addEventListener("input",r),t.__ieph=!0}t.setAttribute(e,n)}}var pr={create:ur,update:ur};function dr(t,e){var n=e.elm,i=e.data,a=t.data;if(!(r(i.staticClass)&&r(i.class)&&(r(a)||r(a.staticClass)&&r(a.class)))){var s=Dn(e),c=n._transitionClasses;o(c)&&(s=Fn(s,Vn(c))),s!==n._prevClass&&(n.setAttribute("class",s),n._prevClass=s)}}var hr,vr={create:dr,update:dr};function mr(t,e,n){var r=hr;return function o(){var i=e.apply(null,arguments);null!==i&&br(t,o,n,r)}}var gr=Wt&&!(Y&&Number(Y[1])<=53);function yr(t,e,n,r){if(gr){var o=an,i=e;e=i._wrapper=function(t){if(t.target===t.currentTarget||t.timeStamp>=o||t.timeStamp<=0||t.target.ownerDocument!==document)return i.apply(this,arguments)}}hr.addEventListener(t,e,tt?{capture:n,passive:r}:n)}function br(t,e,n,r){(r||hr).removeEventListener(t,e._wrapper||e,n)}function wr(t,e){if(!r(t.data.on)||!r(e.data.on)){var n=e.data.on||{},i=t.data.on||{};hr=e.elm,function(t){if(o(t.__r)){var e=K?"change":"input";t[e]=[].concat(t.__r,t[e]||[]),delete t.__r}o(t.__c)&&(t.change=[].concat(t.__c,t.change||[]),delete t.__c)}(n),ie(n,i,yr,br,mr,e.context),hr=void 0}}var xr,Ar={create:wr,update:wr};function _r(t,e){if(!r(t.data.domProps)||!r(e.data.domProps)){var n,i,a=e.elm,s=t.data.domProps||{},c=e.data.domProps||{};for(n in o(c.__ob__)&&(c=e.data.domProps=j({},c)),s)n in c||(a[n]="");for(n in c){if(i=c[n],"textContent"===n||"innerHTML"===n){if(e.children&&(e.children.length=0),i===s[n])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===n&&"PROGRESS"!==a.tagName){a._value=i;var u=r(i)?"":String(i);Sr(a,u)&&(a.value=u)}else if("innerHTML"===n&&qn(a.tagName)&&r(a.innerHTML)){(xr=xr||document.createElement("div")).innerHTML="<svg>"+i+"</svg>";for(var l=xr.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;l.firstChild;)a.appendChild(l.firstChild)}else if(i!==s[n])try{a[n]=i}catch(t){}}}}function Sr(t,e){return!t.composing&&("OPTION"===t.tagName||function(t,e){var n=!0;try{n=document.activeElement!==t}catch(t){}return n&&t.value!==e}(t,e)||function(t,e){var n=t.value,r=t._vModifiers;if(o(r)){if(r.number)return h(n)!==h(e);if(r.trim)return n.trim()!==e.trim()}return n!==e}(t,e))}var Cr={create:_r,update:_r},kr=w((function(t){var e={},n=/:(.+)/;return t.split(/;(?![^(]*\))/g).forEach((function(t){if(t){var r=t.split(n);r.length>1&&(e[r[0].trim()]=r[1].trim())}})),e}));function Or(t){var e=jr(t.style);return t.staticStyle?j(t.staticStyle,e):e}function jr(t){return Array.isArray(t)?E(t):"string"==typeof t?kr(t):t}var Er,Tr=/^--/,Lr=/\s*!important$/,$r=function(t,e,n){if(Tr.test(e))t.style.setProperty(e,n);else if(Lr.test(n))t.style.setProperty(C(e),n.replace(Lr,""),"important");else{var r=Ir(e);if(Array.isArray(n))for(var o=0,i=n.length;o<i;o++)t.style[r]=n[o];else t.style[r]=n}},Pr=["Webkit","Moz","ms"],Ir=w((function(t){if(Er=Er||document.createElement("div").style,"filter"!==(t=A(t))&&t in Er)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<Pr.length;n++){var r=Pr[n]+e;if(r in Er)return r}}));function Mr(t,e){var n=e.data,i=t.data;if(!(r(n.staticStyle)&&r(n.style)&&r(i.staticStyle)&&r(i.style))){var a,s,c=e.elm,u=i.staticStyle,l=i.normalizedStyle||i.style||{},f=u||l,p=jr(e.data.style)||{};e.data.normalizedStyle=o(p.__ob__)?j({},p):p;var d=function(t,e){var n,r={};if(e)for(var o=t;o.componentInstance;)(o=o.componentInstance._vnode)&&o.data&&(n=Or(o.data))&&j(r,n);(n=Or(t.data))&&j(r,n);for(var i=t;i=i.parent;)i.data&&(n=Or(i.data))&&j(r,n);return r}(e,!0);for(s in f)r(d[s])&&$r(c,s,"");for(s in d)(a=d[s])!==f[s]&&$r(c,s,null==a?"":a)}}var Rr={create:Mr,update:Mr},Nr=/\s+/;function zr(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(Nr).forEach((function(e){return t.classList.add(e)})):t.classList.add(e);else{var n=" "+(t.getAttribute("class")||"")+" ";n.indexOf(" "+e+" ")<0&&t.setAttribute("class",(n+e).trim())}}function Dr(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(Nr).forEach((function(e){return t.classList.remove(e)})):t.classList.remove(e),t.classList.length||t.removeAttribute("class");else{for(var n=" "+(t.getAttribute("class")||"")+" ",r=" "+e+" ";n.indexOf(r)>=0;)n=n.replace(r," ");(n=n.trim())?t.setAttribute("class",n):t.removeAttribute("class")}}function Ur(t){if(t){if("object"==typeof t){var e={};return!1!==t.css&&j(e,Fr(t.name||"v")),j(e,t),e}return"string"==typeof t?Fr(t):void 0}}var Fr=w((function(t){return{enterClass:t+"-enter",enterToClass:t+"-enter-to",enterActiveClass:t+"-enter-active",leaveClass:t+"-leave",leaveToClass:t+"-leave-to",leaveActiveClass:t+"-leave-active"}})),Vr=H&&!X,Br="transition",Hr="transitionend",qr="animation",Wr="animationend";Vr&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Br="WebkitTransition",Hr="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(qr="WebkitAnimation",Wr="webkitAnimationEnd"));var Gr=H?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(t){return t()};function Kr(t){Gr((function(){Gr(t)}))}function Xr(t,e){var n=t._transitionClasses||(t._transitionClasses=[]);n.indexOf(e)<0&&(n.push(e),zr(t,e))}function Zr(t,e){t._transitionClasses&&g(t._transitionClasses,e),Dr(t,e)}function Jr(t,e,n){var r=Qr(t,e),o=r.type,i=r.timeout,a=r.propCount;if(!o)return n();var s="transition"===o?Hr:Wr,c=0,u=function(){t.removeEventListener(s,l),n()},l=function(e){e.target===t&&++c>=a&&u()};setTimeout((function(){c<a&&u()}),i+1),t.addEventListener(s,l)}var Yr=/\b(transform|all)(,|$)/;function Qr(t,e){var n,r=window.getComputedStyle(t),o=(r[Br+"Delay"]||"").split(", "),i=(r[Br+"Duration"]||"").split(", "),a=to(o,i),s=(r[qr+"Delay"]||"").split(", "),c=(r[qr+"Duration"]||"").split(", "),u=to(s,c),l=0,f=0;return"transition"===e?a>0&&(n="transition",l=a,f=i.length):"animation"===e?u>0&&(n="animation",l=u,f=c.length):f=(n=(l=Math.max(a,u))>0?a>u?"transition":"animation":null)?"transition"===n?i.length:c.length:0,{type:n,timeout:l,propCount:f,hasTransform:"transition"===n&&Yr.test(r[Br+"Property"])}}function to(t,e){for(;t.length<e.length;)t=t.concat(t);return Math.max.apply(null,e.map((function(e,n){return eo(e)+eo(t[n])})))}function eo(t){return 1e3*Number(t.slice(0,-1).replace(",","."))}function no(t,e){var n=t.elm;o(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var i=Ur(t.data.transition);if(!r(i)&&!o(n._enterCb)&&1===n.nodeType){for(var a=i.css,c=i.type,u=i.enterClass,l=i.enterToClass,f=i.enterActiveClass,p=i.appearClass,d=i.appearToClass,v=i.appearActiveClass,m=i.beforeEnter,g=i.enter,y=i.afterEnter,b=i.enterCancelled,w=i.beforeAppear,x=i.appear,A=i.afterAppear,_=i.appearCancelled,S=i.duration,C=Ke,k=Ke.$vnode;k&&k.parent;)C=k.context,k=k.parent;var O=!C._isMounted||!t.isRootInsert;if(!O||x||""===x){var j=O&&p?p:u,E=O&&v?v:f,T=O&&d?d:l,L=O&&w||m,$=O&&"function"==typeof x?x:g,P=O&&A||y,I=O&&_||b,R=h(s(S)?S.enter:S);0;var N=!1!==a&&!X,z=io($),D=n._enterCb=M((function(){N&&(Zr(n,T),Zr(n,E)),D.cancelled?(N&&Zr(n,j),I&&I(n)):P&&P(n),n._enterCb=null}));t.data.show||ae(t,"insert",(function(){var e=n.parentNode,r=e&&e._pending&&e._pending[t.key];r&&r.tag===t.tag&&r.elm._leaveCb&&r.elm._leaveCb(),$&&$(n,D)})),L&&L(n),N&&(Xr(n,j),Xr(n,E),Kr((function(){Zr(n,j),D.cancelled||(Xr(n,T),z||(oo(R)?setTimeout(D,R):Jr(n,c,D)))}))),t.data.show&&(e&&e(),$&&$(n,D)),N||z||D()}}}function ro(t,e){var n=t.elm;o(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var i=Ur(t.data.transition);if(r(i)||1!==n.nodeType)return e();if(!o(n._leaveCb)){var a=i.css,c=i.type,u=i.leaveClass,l=i.leaveToClass,f=i.leaveActiveClass,p=i.beforeLeave,d=i.leave,v=i.afterLeave,m=i.leaveCancelled,g=i.delayLeave,y=i.duration,b=!1!==a&&!X,w=io(d),x=h(s(y)?y.leave:y);0;var A=n._leaveCb=M((function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[t.key]=null),b&&(Zr(n,l),Zr(n,f)),A.cancelled?(b&&Zr(n,u),m&&m(n)):(e(),v&&v(n)),n._leaveCb=null}));g?g(_):_()}function _(){A.cancelled||(!t.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[t.key]=t),p&&p(n),b&&(Xr(n,u),Xr(n,f),Kr((function(){Zr(n,u),A.cancelled||(Xr(n,l),w||(oo(x)?setTimeout(A,x):Jr(n,c,A)))}))),d&&d(n,A),b||w||A())}}function oo(t){return"number"==typeof t&&!isNaN(t)}function io(t){if(r(t))return!1;var e=t.fns;return o(e)?io(Array.isArray(e)?e[0]:e):(t._length||t.length)>1}function ao(t,e){!0!==e.data.show&&no(e)}var so=function(t){var e,n,s={},c=t.modules,u=t.nodeOps;for(e=0;e<Qn.length;++e)for(s[Qn[e]]=[],n=0;n<c.length;++n)o(c[n][Qn[e]])&&s[Qn[e]].push(c[n][Qn[e]]);function l(t){var e=u.parentNode(t);o(e)&&u.removeChild(e,t)}function f(t,e,n,r,a,c,l){if(o(t.elm)&&o(c)&&(t=c[l]=gt(t)),t.isRootInsert=!a,!function(t,e,n,r){var a=t.data;if(o(a)){var c=o(t.componentInstance)&&a.keepAlive;if(o(a=a.hook)&&o(a=a.init)&&a(t,!1),o(t.componentInstance))return p(t,e),d(n,t.elm,r),i(c)&&function(t,e,n,r){var i,a=t;for(;a.componentInstance;)if(a=a.componentInstance._vnode,o(i=a.data)&&o(i=i.transition)){for(i=0;i<s.activate.length;++i)s.activate[i](Yn,a);e.push(a);break}d(n,t.elm,r)}(t,e,n,r),!0}}(t,e,n,r)){var f=t.data,v=t.children,m=t.tag;o(m)?(t.elm=t.ns?u.createElementNS(t.ns,m):u.createElement(m,t),y(t),h(t,v,e),o(f)&&g(t,e),d(n,t.elm,r)):i(t.isComment)?(t.elm=u.createComment(t.text),d(n,t.elm,r)):(t.elm=u.createTextNode(t.text),d(n,t.elm,r))}}function p(t,e){o(t.data.pendingInsert)&&(e.push.apply(e,t.data.pendingInsert),t.data.pendingInsert=null),t.elm=t.componentInstance.$el,m(t)?(g(t,e),y(t)):(Jn(t),e.push(t))}function d(t,e,n){o(t)&&(o(n)?u.parentNode(n)===t&&u.insertBefore(t,e,n):u.appendChild(t,e))}function h(t,e,n){if(Array.isArray(e)){0;for(var r=0;r<e.length;++r)f(e[r],n,t.elm,null,!0,e,r)}else a(t.text)&&u.appendChild(t.elm,u.createTextNode(String(t.text)))}function m(t){for(;t.componentInstance;)t=t.componentInstance._vnode;return o(t.tag)}function g(t,n){for(var r=0;r<s.create.length;++r)s.create[r](Yn,t);o(e=t.data.hook)&&(o(e.create)&&e.create(Yn,t),o(e.insert)&&n.push(t))}function y(t){var e;if(o(e=t.fnScopeId))u.setStyleScope(t.elm,e);else for(var n=t;n;)o(e=n.context)&&o(e=e.$options._scopeId)&&u.setStyleScope(t.elm,e),n=n.parent;o(e=Ke)&&e!==t.context&&e!==t.fnContext&&o(e=e.$options._scopeId)&&u.setStyleScope(t.elm,e)}function b(t,e,n,r,o,i){for(;r<=o;++r)f(n[r],i,t,e,!1,n,r)}function w(t){var e,n,r=t.data;if(o(r))for(o(e=r.hook)&&o(e=e.destroy)&&e(t),e=0;e<s.destroy.length;++e)s.destroy[e](t);if(o(e=t.children))for(n=0;n<t.children.length;++n)w(t.children[n])}function x(t,e,n){for(;e<=n;++e){var r=t[e];o(r)&&(o(r.tag)?(A(r),w(r)):l(r.elm))}}function A(t,e){if(o(e)||o(t.data)){var n,r=s.remove.length+1;for(o(e)?e.listeners+=r:e=function(t,e){function n(){0==--n.listeners&&l(t)}return n.listeners=e,n}(t.elm,r),o(n=t.componentInstance)&&o(n=n._vnode)&&o(n.data)&&A(n,e),n=0;n<s.remove.length;++n)s.remove[n](t,e);o(n=t.data.hook)&&o(n=n.remove)?n(t,e):e()}else l(t.elm)}function _(t,e,n,r){for(var i=n;i<r;i++){var a=e[i];if(o(a)&&tr(t,a))return i}}function S(t,e,n,a,c,l){if(t!==e){o(e.elm)&&o(a)&&(e=a[c]=gt(e));var p=e.elm=t.elm;if(i(t.isAsyncPlaceholder))o(e.asyncFactory.resolved)?O(t.elm,e,n):e.isAsyncPlaceholder=!0;else if(i(e.isStatic)&&i(t.isStatic)&&e.key===t.key&&(i(e.isCloned)||i(e.isOnce)))e.componentInstance=t.componentInstance;else{var d,h=e.data;o(h)&&o(d=h.hook)&&o(d=d.prepatch)&&d(t,e);var v=t.children,g=e.children;if(o(h)&&m(e)){for(d=0;d<s.update.length;++d)s.update[d](t,e);o(d=h.hook)&&o(d=d.update)&&d(t,e)}r(e.text)?o(v)&&o(g)?v!==g&&function(t,e,n,i,a){var s,c,l,p=0,d=0,h=e.length-1,v=e[0],m=e[h],g=n.length-1,y=n[0],w=n[g],A=!a;for(0;p<=h&&d<=g;)r(v)?v=e[++p]:r(m)?m=e[--h]:tr(v,y)?(S(v,y,i,n,d),v=e[++p],y=n[++d]):tr(m,w)?(S(m,w,i,n,g),m=e[--h],w=n[--g]):tr(v,w)?(S(v,w,i,n,g),A&&u.insertBefore(t,v.elm,u.nextSibling(m.elm)),v=e[++p],w=n[--g]):tr(m,y)?(S(m,y,i,n,d),A&&u.insertBefore(t,m.elm,v.elm),m=e[--h],y=n[++d]):(r(s)&&(s=er(e,p,h)),r(c=o(y.key)?s[y.key]:_(y,e,p,h))?f(y,i,t,v.elm,!1,n,d):tr(l=e[c],y)?(S(l,y,i,n,d),e[c]=void 0,A&&u.insertBefore(t,l.elm,v.elm)):f(y,i,t,v.elm,!1,n,d),y=n[++d]);p>h?b(t,r(n[g+1])?null:n[g+1].elm,n,d,g,i):d>g&&x(e,p,h)}(p,v,g,n,l):o(g)?(o(t.text)&&u.setTextContent(p,""),b(p,null,g,0,g.length-1,n)):o(v)?x(v,0,v.length-1):o(t.text)&&u.setTextContent(p,""):t.text!==e.text&&u.setTextContent(p,e.text),o(h)&&o(d=h.hook)&&o(d=d.postpatch)&&d(t,e)}}}function C(t,e,n){if(i(n)&&o(t.parent))t.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var k=v("attrs,class,staticClass,staticStyle,key");function O(t,e,n,r){var a,s=e.tag,c=e.data,u=e.children;if(r=r||c&&c.pre,e.elm=t,i(e.isComment)&&o(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(o(c)&&(o(a=c.hook)&&o(a=a.init)&&a(e,!0),o(a=e.componentInstance)))return p(e,n),!0;if(o(s)){if(o(u))if(t.hasChildNodes())if(o(a=c)&&o(a=a.domProps)&&o(a=a.innerHTML)){if(a!==t.innerHTML)return!1}else{for(var l=!0,f=t.firstChild,d=0;d<u.length;d++){if(!f||!O(f,u[d],n,r)){l=!1;break}f=f.nextSibling}if(!l||f)return!1}else h(e,u,n);if(o(c)){var v=!1;for(var m in c)if(!k(m)){v=!0,g(e,n);break}!v&&c.class&&ne(c.class)}}else t.data!==e.text&&(t.data=e.text);return!0}return function(t,e,n,a){if(!r(e)){var c,l=!1,p=[];if(r(t))l=!0,f(e,p);else{var d=o(t.nodeType);if(!d&&tr(t,e))S(t,e,p,null,null,a);else{if(d){if(1===t.nodeType&&t.hasAttribute("data-server-rendered")&&(t.removeAttribute("data-server-rendered"),n=!0),i(n)&&O(t,e,p))return C(e,p,!0),t;c=t,t=new dt(u.tagName(c).toLowerCase(),{},[],void 0,c)}var h=t.elm,v=u.parentNode(h);if(f(e,p,h._leaveCb?null:v,u.nextSibling(h)),o(e.parent))for(var g=e.parent,y=m(e);g;){for(var b=0;b<s.destroy.length;++b)s.destroy[b](g);if(g.elm=e.elm,y){for(var A=0;A<s.create.length;++A)s.create[A](Yn,g);var _=g.data.hook.insert;if(_.merged)for(var k=1;k<_.fns.length;k++)_.fns[k]()}else Jn(g);g=g.parent}o(v)?x([t],0,0):o(t.tag)&&w(t)}}return C(e,p,l),e.elm}o(t)&&w(t)}}({nodeOps:Xn,modules:[pr,vr,Ar,Cr,Rr,H?{create:ao,activate:ao,remove:function(t,e){!0!==t.data.show?ro(t,e):e()}}:{}].concat(cr)});X&&document.addEventListener("selectionchange",(function(){var t=document.activeElement;t&&t.vmodel&&mo(t,"input")}));var co={inserted:function(t,e,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?ae(n,"postpatch",(function(){co.componentUpdated(t,e,n)})):uo(t,e,n.context),t._vOptions=[].map.call(t.options,po)):("textarea"===n.tag||Kn(t.type))&&(t._vModifiers=e.modifiers,e.modifiers.lazy||(t.addEventListener("compositionstart",ho),t.addEventListener("compositionend",vo),t.addEventListener("change",vo),X&&(t.vmodel=!0)))},componentUpdated:function(t,e,n){if("select"===n.tag){uo(t,e,n.context);var r=t._vOptions,o=t._vOptions=[].map.call(t.options,po);if(o.some((function(t,e){return!P(t,r[e])})))(t.multiple?e.value.some((function(t){return fo(t,o)})):e.value!==e.oldValue&&fo(e.value,o))&&mo(t,"change")}}};function uo(t,e,n){lo(t,e,n),(K||Z)&&setTimeout((function(){lo(t,e,n)}),0)}function lo(t,e,n){var r=e.value,o=t.multiple;if(!o||Array.isArray(r)){for(var i,a,s=0,c=t.options.length;s<c;s++)if(a=t.options[s],o)i=I(r,po(a))>-1,a.selected!==i&&(a.selected=i);else if(P(po(a),r))return void(t.selectedIndex!==s&&(t.selectedIndex=s));o||(t.selectedIndex=-1)}}function fo(t,e){return e.every((function(e){return!P(e,t)}))}function po(t){return"_value"in t?t._value:t.value}function ho(t){t.target.composing=!0}function vo(t){t.target.composing&&(t.target.composing=!1,mo(t.target,"input"))}function mo(t,e){var n=document.createEvent("HTMLEvents");n.initEvent(e,!0,!0),t.dispatchEvent(n)}function go(t){return!t.componentInstance||t.data&&t.data.transition?t:go(t.componentInstance._vnode)}var yo={model:co,show:{bind:function(t,e,n){var r=e.value,o=(n=go(n)).data&&n.data.transition,i=t.__vOriginalDisplay="none"===t.style.display?"":t.style.display;r&&o?(n.data.show=!0,no(n,(function(){t.style.display=i}))):t.style.display=r?i:"none"},update:function(t,e,n){var r=e.value;!r!=!e.oldValue&&((n=go(n)).data&&n.data.transition?(n.data.show=!0,r?no(n,(function(){t.style.display=t.__vOriginalDisplay})):ro(n,(function(){t.style.display="none"}))):t.style.display=r?t.__vOriginalDisplay:"none")},unbind:function(t,e,n,r,o){o||(t.style.display=t.__vOriginalDisplay)}}},bo={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function wo(t){var e=t&&t.componentOptions;return e&&e.Ctor.options.abstract?wo(Be(e.children)):t}function xo(t){var e={},n=t.$options;for(var r in n.propsData)e[r]=t[r];var o=n._parentListeners;for(var i in o)e[A(i)]=o[i];return e}function Ao(t,e){if(/\d-keep-alive$/.test(e.tag))return t("keep-alive",{props:e.componentOptions.propsData})}var _o=function(t){return t.tag||Ve(t)},So=function(t){return"show"===t.name},Co={name:"transition",props:bo,abstract:!0,render:function(t){var e=this,n=this.$slots.default;if(n&&(n=n.filter(_o)).length){0;var r=this.mode;0;var o=n[0];if(function(t){for(;t=t.parent;)if(t.data.transition)return!0}(this.$vnode))return o;var i=wo(o);if(!i)return o;if(this._leaving)return Ao(t,o);var s="__transition-"+this._uid+"-";i.key=null==i.key?i.isComment?s+"comment":s+i.tag:a(i.key)?0===String(i.key).indexOf(s)?i.key:s+i.key:i.key;var c=(i.data||(i.data={})).transition=xo(this),u=this._vnode,l=wo(u);if(i.data.directives&&i.data.directives.some(So)&&(i.data.show=!0),l&&l.data&&!function(t,e){return e.key===t.key&&e.tag===t.tag}(i,l)&&!Ve(l)&&(!l.componentInstance||!l.componentInstance._vnode.isComment)){var f=l.data.transition=j({},c);if("out-in"===r)return this._leaving=!0,ae(f,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),Ao(t,o);if("in-out"===r){if(Ve(i))return u;var p,d=function(){p()};ae(c,"afterEnter",d),ae(c,"enterCancelled",d),ae(f,"delayLeave",(function(t){p=t}))}}return o}}},ko=j({tag:String,moveClass:String},bo);function Oo(t){t.elm._moveCb&&t.elm._moveCb(),t.elm._enterCb&&t.elm._enterCb()}function jo(t){t.data.newPos=t.elm.getBoundingClientRect()}function Eo(t){var e=t.data.pos,n=t.data.newPos,r=e.left-n.left,o=e.top-n.top;if(r||o){t.data.moved=!0;var i=t.elm.style;i.transform=i.WebkitTransform="translate("+r+"px,"+o+"px)",i.transitionDuration="0s"}}delete ko.mode;var To={Transition:Co,TransitionGroup:{props:ko,beforeMount:function(){var t=this,e=this._update;this._update=function(n,r){var o=Xe(t);t.__patch__(t._vnode,t.kept,!1,!0),t._vnode=t.kept,o(),e.call(t,n,r)}},render:function(t){for(var e=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],i=this.children=[],a=xo(this),s=0;s<o.length;s++){var c=o[s];if(c.tag)if(null!=c.key&&0!==String(c.key).indexOf("__vlist"))i.push(c),n[c.key]=c,(c.data||(c.data={})).transition=a;else;}if(r){for(var u=[],l=[],f=0;f<r.length;f++){var p=r[f];p.data.transition=a,p.data.pos=p.elm.getBoundingClientRect(),n[p.key]?u.push(p):l.push(p)}this.kept=t(e,null,u),this.removed=l}return t(e,null,i)},updated:function(){var t=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";t.length&&this.hasMove(t[0].elm,e)&&(t.forEach(Oo),t.forEach(jo),t.forEach(Eo),this._reflow=document.body.offsetHeight,t.forEach((function(t){if(t.data.moved){var n=t.elm,r=n.style;Xr(n,e),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(Hr,n._moveCb=function t(r){r&&r.target!==n||r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(Hr,t),n._moveCb=null,Zr(n,e))})}})))},methods:{hasMove:function(t,e){if(!Vr)return!1;if(this._hasMove)return this._hasMove;var n=t.cloneNode();t._transitionClasses&&t._transitionClasses.forEach((function(t){Dr(n,t)})),zr(n,e),n.style.display="none",this.$el.appendChild(n);var r=Qr(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}}};An.config.mustUseProp=function(t,e,n){return"value"===n&&Ln(t)&&"button"!==e||"selected"===n&&"option"===t||"checked"===n&&"input"===t||"muted"===n&&"video"===t},An.config.isReservedTag=Wn,An.config.isReservedAttr=Tn,An.config.getTagNamespace=function(t){return qn(t)?"svg":"math"===t?"math":void 0},An.config.isUnknownElement=function(t){if(!H)return!0;if(Wn(t))return!1;if(t=t.toLowerCase(),null!=Gn[t])return Gn[t];var e=document.createElement(t);return t.indexOf("-")>-1?Gn[t]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:Gn[t]=/HTMLUnknownElement/.test(e.toString())},j(An.options.directives,yo),j(An.options.components,To),An.prototype.__patch__=H?so:T,An.prototype.$mount=function(t,e){return function(t,e,n){var r;return t.$el=e,t.$options.render||(t.$options.render=vt),Ye(t,"beforeMount"),r=function(){t._update(t._render(),n)},new fn(t,r,T,{before:function(){t._isMounted&&!t._isDestroyed&&Ye(t,"beforeUpdate")}},!0),n=!1,null==t.$vnode&&(t._isMounted=!0,Ye(t,"mounted")),t}(this,t=t&&H?function(t){if("string"==typeof t){var e=document.querySelector(t);return e||document.createElement("div")}return t}(t):void 0,e)},H&&setTimeout((function(){z.devtools&&rt&&rt.emit("init",An)}),0),e.a=An}).call(this,n(122).setImmediate)},function(t,e,n){var r=n(118);t.exports=function(t){if(r(t))throw TypeError("The method doesn't accept regular expressions");return t}},function(t,e,n){var r=n(1)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[r]=!1,"/./"[t](e)}catch(t){}}return!1}},function(t,e,n){var r=n(2),o=n(1),i=n(15),a=o("iterator");t.exports=!r((function(){var t=new URL("b?a=1&b=2&c=3","http://a"),e=t.searchParams,n="";return t.pathname="c%20d",e.forEach((function(t,r){e.delete("b"),n+=r+t})),i&&!t.toJSON||!e.sort||"http://a/c%20d?a=1&c=3"!==t.href||"3"!==e.get("c")||"a=1"!==String(new URLSearchParams("?a=1"))||!e[a]||"a"!==new URL("https://a@b").username||"b"!==new URLSearchParams(new URLSearchParams("a=b")).get("a")||"xn--e1aybc"!==new URL("http://ÑÐµÑÑ").host||"#%D0%B1"!==new URL("http://a#Ð±").hash||"a1c3"!==n||"x"!==new URL("http://x",void 0).host}))},,,,,,,,,,,,,,,function(t,e){t.exports={functional:!0,render(t,e){const{_c:n,_v:r,data:o,children:i=[]}=e,{class:a,staticClass:s,style:c,staticStyle:u,attrs:l={},...f}=o;return n("svg",{class:[a,s],style:[c,u],attrs:Object.assign({viewBox:"0 0 488 96",fill:"none",xmlns:"http://www.w3.org/2000/svg"},l),...f},i.concat([n("path",{attrs:{d:"M32.673 72.008l9.928 17.196c2.4 4.156 8.398 4.156 10.798 0L90.456 25.02H59.802L32.673 72.008zM64.18 17.438h30.653l.323-.559c2.399-4.156-.6-9.35-5.4-9.35H69.9l-5.72 9.909zM61.146 7.528l-5.721 9.91H1.167l-.323-.559c-2.399-4.156.6-9.35 5.4-9.35h54.902zM51.047 25.02L28.296 64.425 5.544 25.02h45.503zM106.62 28.6h8.06l12.4 34.72 11.408-34.72h7.812L131.42 72h-8.68l-16.12-43.4zm52.116 43.958c-3.637 0-6.51-1.116-8.618-3.348-2.108-2.273-3.162-5.683-3.162-10.23V41h7.192v17.98c0 2.273.538 3.989 1.612 5.146 1.075 1.157 2.48 1.736 4.216 1.736 2.108 0 3.782-.6 5.022-1.798 1.282-1.199 1.964-2.79 2.046-4.774V41h7.192v31h-5.642l-.558-3.41a11.509 11.509 0 01-4.03 2.976c-1.57.661-3.327.992-5.27.992zm36.297 0c-2.232 0-4.237-.33-6.014-.992-1.777-.703-3.307-1.695-4.588-2.976-1.281-1.323-2.273-2.914-2.976-4.774-.661-1.86-.992-3.968-.992-6.324v-1.984c0-2.356.331-4.464.992-6.324.703-1.86 1.695-3.43 2.976-4.712 1.281-1.323 2.811-2.315 4.588-2.976 1.777-.703 3.782-1.054 6.014-1.054 4.505 0 8.06 1.385 10.664 4.154 2.604 2.77 3.906 6.737 3.906 11.904v2.418h-21.948c.207 2.604.93 4.485 2.17 5.642 1.24 1.116 2.976 1.674 5.208 1.674 2.191 0 3.782-.372 4.774-1.116 1.033-.785 1.715-1.695 2.046-2.728h7.44a14.824 14.824 0 01-1.55 4.03 10.93 10.93 0 01-2.79 3.224c-1.157.91-2.563 1.633-4.216 2.17-1.653.496-3.555.744-5.704.744zm0-25.792c-2.108 0-3.761.517-4.96 1.55-1.199 1.033-1.963 2.666-2.294 4.898h14.508c-.289-2.315-1.054-3.968-2.294-4.96-1.199-.992-2.852-1.488-4.96-1.488z",fill:"#0BDCA0"}}),n("path",{attrs:{d:"M212.93 28.6h34.1v6.572H233.7V72h-7.44V35.172h-13.33V28.6zm43.117 43.958c-2.232 0-4.237-.33-6.014-.992-1.778-.703-3.307-1.695-4.588-2.976-1.282-1.323-2.274-2.914-2.976-4.774-.662-1.86-.992-3.968-.992-6.324v-1.984c0-2.356.33-4.464.992-6.324.702-1.86 1.694-3.43 2.976-4.712 1.281-1.323 2.81-2.315 4.588-2.976 1.777-.703 3.782-1.054 6.014-1.054 4.505 0 8.06 1.385 10.664 4.154 2.604 2.77 3.906 6.737 3.906 11.904v2.418h-21.948c.206 2.604.93 4.485 2.17 5.642 1.24 1.116 2.976 1.674 5.208 1.674 2.19 0 3.782-.372 4.774-1.116 1.033-.785 1.715-1.695 2.046-2.728h7.44a14.857 14.857 0 01-1.55 4.03 10.93 10.93 0 01-2.79 3.224c-1.158.91-2.563 1.633-4.216 2.17-1.654.496-3.555.744-5.704.744zm0-25.792c-2.108 0-3.762.517-4.96 1.55-1.199 1.033-1.964 2.666-2.294 4.898h14.508c-.29-2.315-1.054-3.968-2.294-4.96-1.199-.992-2.852-1.488-4.96-1.488zM286.987 72c-3.265 0-5.787-.868-7.564-2.604-1.736-1.777-2.604-4.32-2.604-7.626V28.6h7.192v32.426c0 1.612.351 2.79 1.054 3.534.703.744 1.777 1.116 3.224 1.116h1.55V72h-2.852zm20.222.558c-2.232 0-4.237-.33-6.014-.992-1.778-.703-3.307-1.695-4.588-2.976-1.282-1.323-2.274-2.914-2.976-4.774-.662-1.86-.992-3.968-.992-6.324v-1.984c0-2.356.33-4.464.992-6.324.702-1.86 1.694-3.43 2.976-4.712 1.281-1.323 2.81-2.315 4.588-2.976 1.777-.703 3.782-1.054 6.014-1.054 4.505 0 8.06 1.385 10.664 4.154 2.604 2.77 3.906 6.737 3.906 11.904v2.418h-21.948c.206 2.604.93 4.485 2.17 5.642 1.24 1.116 2.976 1.674 5.208 1.674 2.19 0 3.782-.372 4.774-1.116 1.033-.785 1.715-1.695 2.046-2.728h7.44a14.857 14.857 0 01-1.55 4.03 10.93 10.93 0 01-2.79 3.224c-1.158.91-2.563 1.633-4.216 2.17-1.654.496-3.555.744-5.704.744zm0-25.792c-2.108 0-3.762.517-4.96 1.55-1.199 1.033-1.964 2.666-2.294 4.898h14.508c-.29-2.315-1.054-3.968-2.294-4.96-1.199-.992-2.852-1.488-4.96-1.488zm31.932 25.792c-4.257 0-7.419-.93-9.486-2.79-2.025-1.901-3.203-4.567-3.534-7.998h7.564c.331 1.777.868 3.038 1.612 3.782.786.703 2.067 1.054 3.844 1.054 2.108 0 3.534-.29 4.278-.868.786-.62 1.178-1.426 1.178-2.418 0-1.116-.454-1.963-1.364-2.542-.868-.579-1.963-1.033-3.286-1.364a50.375 50.375 0 00-4.278-.992 20.017 20.017 0 01-4.278-1.426 10.085 10.085 0 01-3.348-2.666c-.868-1.157-1.302-2.749-1.302-4.774 0-1.281.248-2.48.744-3.596s1.261-2.067 2.294-2.852c1.034-.827 2.315-1.467 3.844-1.922 1.571-.496 3.41-.744 5.518-.744 3.968 0 6.944.93 8.928 2.79 1.984 1.819 3.142 4.381 3.472 7.688h-7.564c-.33-1.695-.847-2.873-1.55-3.534-.661-.661-1.756-.992-3.286-.992-1.777 0-3.038.29-3.782.868-.702.579-1.054 1.281-1.054 2.108 0 1.033.434 1.798 1.302 2.294.91.455 2.026.847 3.348 1.178 1.323.29 2.749.6 4.278.93 1.53.29 2.956.785 4.278 1.488a8.72 8.72 0 013.286 2.852c.91 1.24 1.364 2.914 1.364 5.022 0 1.364-.268 2.625-.806 3.782-.496 1.157-1.281 2.15-2.356 2.976-1.033.827-2.376 1.488-4.03 1.984-1.612.455-3.554.682-5.828.682zm31.945 0c-2.232 0-4.258-.33-6.076-.992-1.778-.703-3.307-1.695-4.588-2.976-1.24-1.323-2.212-2.914-2.914-4.774-.662-1.86-.992-3.968-.992-6.324v-1.984c0-2.315.33-4.402.992-6.262.702-1.86 1.694-3.43 2.976-4.712 1.281-1.323 2.81-2.335 4.588-3.038 1.818-.703 3.823-1.054 6.014-1.054 3.926 0 6.964.971 9.114 2.914 2.19 1.943 3.596 4.464 4.216 7.564h-7.688c-.331-1.116-1.013-2.025-2.046-2.728-1.034-.703-2.336-1.054-3.906-1.054-.91 0-1.778.165-2.604.496-.786.29-1.488.785-2.108 1.488-.62.661-1.116 1.53-1.488 2.604-.331 1.033-.496 2.294-.496 3.782v1.984c0 1.447.186 2.707.558 3.782.372 1.033.868 1.901 1.488 2.604a6.134 6.134 0 002.108 1.488c.826.33 1.674.496 2.542.496 1.777 0 3.12-.393 4.03-1.178.95-.785 1.591-1.757 1.922-2.914h7.688c-.62 3.265-2.026 5.89-4.216 7.874-2.15 1.943-5.188 2.914-9.114 2.914zm31.612 0c-4.67 0-8.328-1.323-10.974-3.968-2.604-2.645-3.906-6.345-3.906-11.098v-1.984c0-2.356.331-4.464.992-6.324.703-1.86 1.695-3.43 2.976-4.712 1.323-1.323 2.894-2.315 4.712-2.976 1.819-.703 3.886-1.054 6.2-1.054 4.671 0 8.308 1.323 10.912 3.968 2.646 2.645 3.968 6.345 3.968 11.098v1.984c0 2.356-.351 4.464-1.054 6.324-.661 1.86-1.653 3.451-2.976 4.774-1.281 1.281-2.852 2.273-4.712 2.976-1.818.661-3.864.992-6.138.992zm0-6.696c2.356 0 4.154-.682 5.394-2.046 1.282-1.364 1.922-3.472 1.922-6.324v-1.984c0-2.81-.661-4.898-1.984-6.262-1.281-1.405-3.058-2.108-5.332-2.108-2.356 0-4.174.682-5.456 2.046-1.24 1.364-1.86 3.472-1.86 6.324v1.984c0 2.81.641 4.919 1.922 6.324 1.323 1.364 3.121 2.046 5.394 2.046zm37.312 6.696c-3.885 0-6.902-1.22-9.052-3.658v15.5h-7.192V41h5.642l.682 4.216c1.075-1.612 2.439-2.81 4.092-3.596 1.695-.785 3.638-1.178 5.828-1.178 1.778 0 3.41.33 4.898.992a9.86 9.86 0 013.906 2.852c1.075 1.24 1.922 2.81 2.542 4.712.62 1.86.93 4.03.93 6.51v1.984c0 2.48-.31 4.65-.93 6.51-.62 1.86-1.488 3.43-2.604 4.712a10.561 10.561 0 01-3.844 2.914c-1.488.62-3.12.93-4.898.93zm-2.17-6.696c2.191 0 3.886-.661 5.084-1.984 1.199-1.323 1.798-3.451 1.798-6.386v-1.984c0-2.852-.62-4.96-1.86-6.324-1.24-1.364-2.914-2.046-5.022-2.046-1.984 0-3.616.682-4.898 2.046-1.24 1.364-1.901 3.348-1.984 5.952v2.356c0 2.728.641 4.815 1.922 6.262 1.323 1.405 2.976 2.108 4.96 2.108zm33.33 6.696c-2.232 0-4.237-.33-6.014-.992-1.778-.703-3.307-1.695-4.588-2.976-1.282-1.323-2.274-2.914-2.976-4.774-.662-1.86-.992-3.968-.992-6.324v-1.984c0-2.356.33-4.464.992-6.324.702-1.86 1.694-3.43 2.976-4.712 1.281-1.323 2.81-2.315 4.588-2.976 1.777-.703 3.782-1.054 6.014-1.054 4.505 0 8.06 1.385 10.664 4.154 2.604 2.77 3.906 6.737 3.906 11.904v2.418h-21.948c.206 2.604.93 4.485 2.17 5.642 1.24 1.116 2.976 1.674 5.208 1.674 2.19 0 3.782-.372 4.774-1.116 1.033-.785 1.715-1.695 2.046-2.728h7.44a14.857 14.857 0 01-1.55 4.03 10.93 10.93 0 01-2.79 3.224c-1.158.91-2.563 1.633-4.216 2.17-1.654.496-3.555.744-5.704.744zm0-25.792c-2.108 0-3.762.517-4.96 1.55-1.199 1.033-1.964 2.666-2.294 4.898h14.508c-.29-2.315-1.054-3.968-2.294-4.96-1.199-.992-2.852-1.488-4.96-1.488z",fill:"#000"}})]))}}},function(t,e){t.exports={functional:!0,render(t,e){const{_c:n,_v:r,data:o,children:i=[]}=e,{class:a,staticClass:s,style:c,staticStyle:u,attrs:l={},...f}=o;return n("svg",{class:["feather feather-twitter",a,s],style:[c,u],attrs:Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},l),...f},i.concat([n("path",{attrs:{d:"M23 3a10.9 10.9 0 01-3.14 1.53 4.48 4.48 0 00-7.86 3v1A10.66 10.66 0 013 4s-4 9 5 13a11.64 11.64 0 01-7 2c9 5 20 0 20-11.5a4.5 4.5 0 00-.08-.83A7.72 7.72 0 0023 3z"}})]))}}},function(t,e){t.exports={functional:!0,render(t,e){const{_c:n,_v:r,data:o,children:i=[]}=e,{class:a,staticClass:s,style:c,staticStyle:u,attrs:l={},...f}=o;return n("svg",{class:["feather feather-github",a,s],style:[c,u],attrs:Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},l),...f},i.concat([n("path",{attrs:{d:"M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 00-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0020 4.77 5.07 5.07 0 0019.91 1S18.73.65 16 2.48a13.38 13.38 0 00-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 005 4.77a5.44 5.44 0 00-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 009 18.13V22"}})]))}}},function(t,e){t.exports={functional:!0,render(t,e){const{_c:n,_v:r,data:o,children:i=[]}=e,{class:a,staticClass:s,style:c,staticStyle:u,attrs:l={},...f}=o;return n("svg",{class:["h-5 mr-2 opacity-50",a,s],style:[c,u],attrs:Object.assign({viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg"},l),...f},i.concat([n("path",{attrs:{d:"M12 24c6.565 0 12-5.435 12-12 0-6.553-5.447-12-12.012-12C5.435 0 0 5.447 0 12c0 6.565 5.447 12 12 12zm0-2a9.952 9.952 0 01-9.988-10c0-5.541 4.423-10 9.976-10 5.553 0 10 4.459 10.012 10a9.954 9.954 0 01-10 10zm-.106-14.188c.859 0 1.53-.683 1.53-1.53 0-.858-.671-1.54-1.53-1.54-.847 0-1.53.682-1.53 1.54 0 .847.683 1.53 1.53 1.53zM9.941 18.47h4.788c.483 0 .86-.342.86-.824 0-.459-.377-.823-.86-.823h-1.458v-5.989c0-.635-.318-1.059-.918-1.059H10.14c-.482 0-.859.365-.859.824 0 .482.377.824.86.824H11.4v5.4H9.941c-.482 0-.859.364-.859.823 0 .482.377.824.86.824z",fill:"currentColor"}})]))}}},function(t,e){t.exports={functional:!0,render(t,e){const{_c:n,_v:r,data:o,children:i=[]}=e,{class:a,staticClass:s,style:c,staticStyle:u,attrs:l={},...f}=o;return n("svg",{class:[a,s],style:[c,u],attrs:Object.assign({viewBox:"0 0 19 26",fill:"none",xmlns:"http://www.w3.org/2000/svg"},l),...f},i.concat([n("path",{attrs:{d:"M17.604 12.212H1.487A.486.486 0 011 11.726V8.694c0-.269.218-.486.487-.486h16.117c.268 0 .486.217.486.486v3.031c0 .27-.218.487-.486.487zm-15.632-.973h15.145V9.181H1.972v2.058z",fill:"currentColor"}}),n("path",{attrs:{d:"M6.452 9.18H4.5a.486.486 0 01-.485-.486V2.463C4.015 1.656 4.67 1 5.477 1c.807 0 1.462.656 1.462 1.463v6.231c0 .27-.218.487-.487.487zm-1.465-.972h.98V2.463a.49.49 0 00-.98 0v5.745zM14.864 9.18h-1.952a.486.486 0 01-.487-.486V2.463a1.464 1.464 0 012.925 0v6.231c0 .27-.218.487-.486.487zm-1.466-.972h.98V2.463a.49.49 0 00-.98 0v5.745zM9.682 23.025c-4.18 0-7.58-3.4-7.58-7.581v-3.719c0-.268.218-.486.486-.486h14.188c.268 0 .486.218.486.486v3.72c0 4.18-3.4 7.58-7.58 7.58zM3.074 12.212v3.232a6.615 6.615 0 006.608 6.608 6.615 6.615 0 006.608-6.608V12.21H3.074z",fill:"currentColor"}}),n("path",{attrs:{d:"M10.944 25H8.42a.486.486 0 01-.487-.487v-2.092a.488.488 0 01.572-.479c.84.15 1.515.15 2.354 0a.488.488 0 01.572.479v2.092c0 .27-.217.487-.487.487zm-2.038-.973h1.552v-1.045c-.532.059-1.02.059-1.552 0v1.045z",fill:"currentColor"}}),n("path",{attrs:{d:"M17.604 12.212H1.487A.486.486 0 011 11.726V8.694c0-.269.218-.486.487-.486h16.117c.268 0 .486.217.486.486v3.031c0 .27-.218.487-.486.487zm-15.632-.973h15.145V9.181H1.972v2.058z",stroke:"currentColor","stroke-width":".2"}}),n("path",{attrs:{d:"M6.452 9.18H4.5a.486.486 0 01-.485-.486V2.463C4.015 1.656 4.67 1 5.477 1c.807 0 1.462.656 1.462 1.463v6.231c0 .27-.218.487-.487.487zm-1.465-.972h.98V2.463a.49.49 0 00-.98 0v5.745zM14.864 9.18h-1.952a.486.486 0 01-.487-.486V2.463a1.464 1.464 0 012.925 0v6.231c0 .27-.218.487-.486.487zm-1.466-.972h.98V2.463a.49.49 0 00-.98 0v5.745zM9.682 23.025c-4.18 0-7.58-3.4-7.58-7.581v-3.719c0-.268.218-.486.486-.486h14.188c.268 0 .486.218.486.486v3.72c0 4.18-3.4 7.58-7.58 7.58zM3.074 12.212v3.232a6.615 6.615 0 006.608 6.608 6.615 6.615 0 006.608-6.608V12.21H3.074z",stroke:"currentColor","stroke-width":".2"}}),n("path",{attrs:{d:"M10.944 25H8.42a.486.486 0 01-.487-.487v-2.092a.488.488 0 01.572-.479c.84.15 1.515.15 2.354 0a.488.488 0 01.572.479v2.092c0 .27-.217.487-.487.487zm-2.038-.973h1.552v-1.045c-.532.059-1.02.059-1.552 0v1.045z",stroke:"currentColor","stroke-width":".2"}})]))}}},function(t,e){t.exports={functional:!0,render(t,e){const{_c:n,_v:r,data:o,children:i=[]}=e,{class:a,staticClass:s,style:c,staticStyle:u,attrs:l={},...f}=o;return n("svg",{class:[a,s],style:[c,u],attrs:Object.assign({viewBox:"0 0 24 22",fill:"none",xmlns:"http://www.w3.org/2000/svg"},l),...f},i.concat([n("path",{attrs:{d:"M23.996 12.38a.527.527 0 00-.304-.53l-5.423-2.515V3.273c0-.012-.004-.024-.005-.036a.526.526 0 00-.304-.531L12.23.049 12.207.04A.517.517 0 0012 0a.577.577 0 00-.207.041L11.77.05 6.04 2.706a.526.526 0 00-.304.531c-.001.012-.005.024-.005.037v6.062L.308 11.849a.526.526 0 00-.303.531c-.001.012-.005.024-.005.037v6.397c0 .205.12.392.308.479L6.04 21.95c.017.008.035.012.054.018l.04.014A.55.55 0 006.27 22c.045 0 .09-.007.134-.018l.04-.014c.019-.006.037-.01.055-.018L12 19.398l5.503 2.552c.017.008.036.012.054.018.014.004.026.01.04.013a.53.53 0 00.134.019c.046 0 .09-.007.135-.019.014-.003.027-.009.04-.013.018-.006.037-.01.054-.018l5.732-2.658a.529.529 0 00.308-.478v-6.397c0-.013-.003-.025-.004-.037zm-6.265 2.11l-4.565-2.118 4.565-2.116 4.566 2.116-4.566 2.117zm-11.462 0l-4.566-2.118 4.566-2.116 4.566 2.116-4.566 2.117zM12 1.111l4.566 2.117L12 5.346 7.434 3.229 12 1.112zm-.537 10.382L6.806 9.335V4.107l4.657 2.16v5.227zm1.075-5.228l4.656-2.159v5.228l-4.656 2.16V6.265zm0 6.984l4.656 2.16v5.227l-4.656-2.159V13.25zm-11.464 0l4.657 2.16v5.227l-4.657-2.159V13.25zm10.389 5.229l-4.657 2.158V15.41l4.657-2.159v5.229zm11.463 0l-4.657 2.158V15.41l4.657-2.159v5.229z",fill:"currentColor"}})]))}}},function(t,e,n){"use strict";var r,o=n(8),i=n(14).f,a=n(17),s=n(135),c=n(25),u=n(136),l=n(15),f="".endsWith,p=Math.min,d=u("endsWith");o({target:"String",proto:!0,forced:!!(l||d||(r=i(String.prototype,"endsWith"),!r||r.writable))&&!d},{endsWith:function(t){var e=String(c(this));s(t);var n=arguments.length>1?arguments[1]:void 0,r=a(e.length),o=void 0===n?r:p(a(n),r),i=String(t);return f?f.call(e,i,o):e.slice(o-i.length,o)===i}})},function(t,e,n){"use strict";var r,o=n(8),i=n(14).f,a=n(17),s=n(135),c=n(25),u=n(136),l=n(15),f="".startsWith,p=Math.min,d=u("startsWith");o({target:"String",proto:!0,forced:!!(l||d||(r=i(String.prototype,"startsWith"),!r||r.writable))&&!d},{startsWith:function(t){var e=String(c(this));s(t);var n=a(p(arguments.length>1?arguments[1]:void 0,e.length)),r=String(t);return f?f.call(e,r,n):e.slice(n,n+r.length)===r}})},function(t,e,n){"use strict";n(161);var r,o=n(8),i=n(6),a=n(137),s=n(0),c=n(76),u=n(11),l=n(69),f=n(3),p=n(162),d=n(121),h=n(108).codeAt,v=n(163),m=n(21),g=n(164),y=n(18),b=s.URL,w=g.URLSearchParams,x=g.getState,A=y.set,_=y.getterFor("URL"),S=Math.floor,C=Math.pow,k=/[A-Za-z]/,O=/[\d+-.A-Za-z]/,j=/\d/,E=/^(0x|0X)/,T=/^[0-7]+$/,L=/^\d+$/,$=/^[\dA-Fa-f]+$/,P=/[\u0000\u0009\u000A\u000D #%/:?@[\\]]/,I=/[\u0000\u0009\u000A\u000D #/:?@[\\]]/,M=/^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g,R=/[\u0009\u000A\u000D]/g,N=function(t,e){var n,r,o;if("["==e.charAt(0)){if("]"!=e.charAt(e.length-1))return"Invalid host";if(!(n=D(e.slice(1,-1))))return"Invalid host";t.host=n}else if(G(t)){if(e=v(e),P.test(e))return"Invalid host";if(null===(n=z(e)))return"Invalid host";t.host=n}else{if(I.test(e))return"Invalid host";for(n="",r=d(e),o=0;o<r.length;o++)n+=q(r[o],F);t.host=n}},z=function(t){var e,n,r,o,i,a,s,c=t.split(".");if(c.length&&""==c[c.length-1]&&c.pop(),(e=c.length)>4)return t;for(n=[],r=0;r<e;r++){if(""==(o=c[r]))return t;if(i=10,o.length>1&&"0"==o.charAt(0)&&(i=E.test(o)?16:8,o=o.slice(8==i?1:2)),""===o)a=0;else{if(!(10==i?L:8==i?T:$).test(o))return t;a=parseInt(o,i)}n.push(a)}for(r=0;r<e;r++)if(a=n[r],r==e-1){if(a>=C(256,5-e))return null}else if(a>255)return null;for(s=n.pop(),r=0;r<n.length;r++)s+=n[r]*C(256,3-r);return s},D=function(t){var e,n,r,o,i,a,s,c=[0,0,0,0,0,0,0,0],u=0,l=null,f=0,p=function(){return t.charAt(f)};if(":"==p()){if(":"!=t.charAt(1))return;f+=2,l=++u}for(;p();){if(8==u)return;if(":"!=p()){for(e=n=0;n<4&&$.test(p());)e=16*e+parseInt(p(),16),f++,n++;if("."==p()){if(0==n)return;if(f-=n,u>6)return;for(r=0;p();){if(o=null,r>0){if(!("."==p()&&r<4))return;f++}if(!j.test(p()))return;for(;j.test(p());){if(i=parseInt(p(),10),null===o)o=i;else{if(0==o)return;o=10*o+i}if(o>255)return;f++}c[u]=256*c[u]+o,2!=++r&&4!=r||u++}if(4!=r)return;break}if(":"==p()){if(f++,!p())return}else if(p())return;c[u++]=e}else{if(null!==l)return;f++,l=++u}}if(null!==l)for(a=u-l,u=7;0!=u&&a>0;)s=c[u],c[u--]=c[l+a-1],c[l+--a]=s;else if(8!=u)return;return c},U=function(t){var e,n,r,o;if("number"==typeof t){for(e=[],n=0;n<4;n++)e.unshift(t%256),t=S(t/256);return e.join(".")}if("object"==typeof t){for(e="",r=function(t){for(var e=null,n=1,r=null,o=0,i=0;i<8;i++)0!==t[i]?(o>n&&(e=r,n=o),r=null,o=0):(null===r&&(r=i),++o);return o>n&&(e=r,n=o),e}(t),n=0;n<8;n++)o&&0===t[n]||(o&&(o=!1),r===n?(e+=n?":":"::",o=!0):(e+=t[n].toString(16),n<7&&(e+=":")));return"["+e+"]"}return t},F={},V=p({},F,{" ":1,'"':1,"<":1,">":1,"`":1}),B=p({},V,{"#":1,"?":1,"{":1,"}":1}),H=p({},B,{"/":1,":":1,";":1,"=":1,"@":1,"[":1,"\\":1,"]":1,"^":1,"|":1}),q=function(t,e){var n=h(t,0);return n>32&&n<127&&!f(e,t)?t:encodeURIComponent(t)},W={ftp:21,file:null,http:80,https:443,ws:80,wss:443},G=function(t){return f(W,t.scheme)},K=function(t){return""!=t.username||""!=t.password},X=function(t){return!t.host||t.cannotBeABaseURL||"file"==t.scheme},Z=function(t,e){var n;return 2==t.length&&k.test(t.charAt(0))&&(":"==(n=t.charAt(1))||!e&&"|"==n)},J=function(t){var e;return t.length>1&&Z(t.slice(0,2))&&(2==t.length||"/"===(e=t.charAt(2))||"\\"===e||"?"===e||"#"===e)},Y=function(t){var e=t.path,n=e.length;!n||"file"==t.scheme&&1==n&&Z(e[0],!0)||e.pop()},Q=function(t){return"."===t||"%2e"===t.toLowerCase()},tt={},et={},nt={},rt={},ot={},it={},at={},st={},ct={},ut={},lt={},ft={},pt={},dt={},ht={},vt={},mt={},gt={},yt={},bt={},wt={},xt=function(t,e,n,o){var i,a,s,c,u,l=n||tt,p=0,h="",v=!1,m=!1,g=!1;for(n||(t.scheme="",t.username="",t.password="",t.host=null,t.port=null,t.path=[],t.query=null,t.fragment=null,t.cannotBeABaseURL=!1,e=e.replace(M,"")),e=e.replace(R,""),i=d(e);p<=i.length;){switch(a=i[p],l){case tt:if(!a||!k.test(a)){if(n)return"Invalid scheme";l=nt;continue}h+=a.toLowerCase(),l=et;break;case et:if(a&&(O.test(a)||"+"==a||"-"==a||"."==a))h+=a.toLowerCase();else{if(":"!=a){if(n)return"Invalid scheme";h="",l=nt,p=0;continue}if(n&&(G(t)!=f(W,h)||"file"==h&&(K(t)||null!==t.port)||"file"==t.scheme&&!t.host))return;if(t.scheme=h,n)return void(G(t)&&W[t.scheme]==t.port&&(t.port=null));h="","file"==t.scheme?l=dt:G(t)&&o&&o.scheme==t.scheme?l=rt:G(t)?l=st:"/"==i[p+1]?(l=ot,p++):(t.cannotBeABaseURL=!0,t.path.push(""),l=yt)}break;case nt:if(!o||o.cannotBeABaseURL&&"#"!=a)return"Invalid scheme";if(o.cannotBeABaseURL&&"#"==a){t.scheme=o.scheme,t.path=o.path.slice(),t.query=o.query,t.fragment="",t.cannotBeABaseURL=!0,l=wt;break}l="file"==o.scheme?dt:it;continue;case rt:if("/"!=a||"/"!=i[p+1]){l=it;continue}l=ct,p++;break;case ot:if("/"==a){l=ut;break}l=gt;continue;case it:if(t.scheme=o.scheme,a==r)t.username=o.username,t.password=o.password,t.host=o.host,t.port=o.port,t.path=o.path.slice(),t.query=o.query;else if("/"==a||"\\"==a&&G(t))l=at;else if("?"==a)t.username=o.username,t.password=o.password,t.host=o.host,t.port=o.port,t.path=o.path.slice(),t.query="",l=bt;else{if("#"!=a){t.username=o.username,t.password=o.password,t.host=o.host,t.port=o.port,t.path=o.path.slice(),t.path.pop(),l=gt;continue}t.username=o.username,t.password=o.password,t.host=o.host,t.port=o.port,t.path=o.path.slice(),t.query=o.query,t.fragment="",l=wt}break;case at:if(!G(t)||"/"!=a&&"\\"!=a){if("/"!=a){t.username=o.username,t.password=o.password,t.host=o.host,t.port=o.port,l=gt;continue}l=ut}else l=ct;break;case st:if(l=ct,"/"!=a||"/"!=h.charAt(p+1))continue;p++;break;case ct:if("/"!=a&&"\\"!=a){l=ut;continue}break;case ut:if("@"==a){v&&(h="%40"+h),v=!0,s=d(h);for(var y=0;y<s.length;y++){var b=s[y];if(":"!=b||g){var w=q(b,H);g?t.password+=w:t.username+=w}else g=!0}h=""}else if(a==r||"/"==a||"?"==a||"#"==a||"\\"==a&&G(t)){if(v&&""==h)return"Invalid authority";p-=d(h).length+1,h="",l=lt}else h+=a;break;case lt:case ft:if(n&&"file"==t.scheme){l=vt;continue}if(":"!=a||m){if(a==r||"/"==a||"?"==a||"#"==a||"\\"==a&&G(t)){if(G(t)&&""==h)return"Invalid host";if(n&&""==h&&(K(t)||null!==t.port))return;if(c=N(t,h))return c;if(h="",l=mt,n)return;continue}"["==a?m=!0:"]"==a&&(m=!1),h+=a}else{if(""==h)return"Invalid host";if(c=N(t,h))return c;if(h="",l=pt,n==ft)return}break;case pt:if(!j.test(a)){if(a==r||"/"==a||"?"==a||"#"==a||"\\"==a&&G(t)||n){if(""!=h){var x=parseInt(h,10);if(x>65535)return"Invalid port";t.port=G(t)&&x===W[t.scheme]?null:x,h=""}if(n)return;l=mt;continue}return"Invalid port"}h+=a;break;case dt:if(t.scheme="file","/"==a||"\\"==a)l=ht;else{if(!o||"file"!=o.scheme){l=gt;continue}if(a==r)t.host=o.host,t.path=o.path.slice(),t.query=o.query;else if("?"==a)t.host=o.host,t.path=o.path.slice(),t.query="",l=bt;else{if("#"!=a){J(i.slice(p).join(""))||(t.host=o.host,t.path=o.path.slice(),Y(t)),l=gt;continue}t.host=o.host,t.path=o.path.slice(),t.query=o.query,t.fragment="",l=wt}}break;case ht:if("/"==a||"\\"==a){l=vt;break}o&&"file"==o.scheme&&!J(i.slice(p).join(""))&&(Z(o.path[0],!0)?t.path.push(o.path[0]):t.host=o.host),l=gt;continue;case vt:if(a==r||"/"==a||"\\"==a||"?"==a||"#"==a){if(!n&&Z(h))l=gt;else if(""==h){if(t.host="",n)return;l=mt}else{if(c=N(t,h))return c;if("localhost"==t.host&&(t.host=""),n)return;h="",l=mt}continue}h+=a;break;case mt:if(G(t)){if(l=gt,"/"!=a&&"\\"!=a)continue}else if(n||"?"!=a)if(n||"#"!=a){if(a!=r&&(l=gt,"/"!=a))continue}else t.fragment="",l=wt;else t.query="",l=bt;break;case gt:if(a==r||"/"==a||"\\"==a&&G(t)||!n&&("?"==a||"#"==a)){if(".."===(u=(u=h).toLowerCase())||"%2e."===u||".%2e"===u||"%2e%2e"===u?(Y(t),"/"==a||"\\"==a&&G(t)||t.path.push("")):Q(h)?"/"==a||"\\"==a&&G(t)||t.path.push(""):("file"==t.scheme&&!t.path.length&&Z(h)&&(t.host&&(t.host=""),h=h.charAt(0)+":"),t.path.push(h)),h="","file"==t.scheme&&(a==r||"?"==a||"#"==a))for(;t.path.length>1&&""===t.path[0];)t.path.shift();"?"==a?(t.query="",l=bt):"#"==a&&(t.fragment="",l=wt)}else h+=q(a,B);break;case yt:"?"==a?(t.query="",l=bt):"#"==a?(t.fragment="",l=wt):a!=r&&(t.path[0]+=q(a,F));break;case bt:n||"#"!=a?a!=r&&("'"==a&&G(t)?t.query+="%27":t.query+="#"==a?"%23":q(a,F)):(t.fragment="",l=wt);break;case wt:a!=r&&(t.fragment+=q(a,V))}p++}},At=function(t){var e,n,r=l(this,At,"URL"),o=arguments.length>1?arguments[1]:void 0,a=String(t),s=A(r,{type:"URL"});if(void 0!==o)if(o instanceof At)e=_(o);else if(n=xt(e={},String(o)))throw TypeError(n);if(n=xt(s,a,null,e))throw TypeError(n);var c=s.searchParams=new w,u=x(c);u.updateSearchParams(s.query),u.updateURL=function(){s.query=String(c)||null},i||(r.href=St.call(r),r.origin=Ct.call(r),r.protocol=kt.call(r),r.username=Ot.call(r),r.password=jt.call(r),r.host=Et.call(r),r.hostname=Tt.call(r),r.port=Lt.call(r),r.pathname=$t.call(r),r.search=Pt.call(r),r.searchParams=It.call(r),r.hash=Mt.call(r))},_t=At.prototype,St=function(){var t=_(this),e=t.scheme,n=t.username,r=t.password,o=t.host,i=t.port,a=t.path,s=t.query,c=t.fragment,u=e+":";return null!==o?(u+="//",K(t)&&(u+=n+(r?":"+r:"")+"@"),u+=U(o),null!==i&&(u+=":"+i)):"file"==e&&(u+="//"),u+=t.cannotBeABaseURL?a[0]:a.length?"/"+a.join("/"):"",null!==s&&(u+="?"+s),null!==c&&(u+="#"+c),u},Ct=function(){var t=_(this),e=t.scheme,n=t.port;if("blob"==e)try{return new URL(e.path[0]).origin}catch(t){return"null"}return"file"!=e&&G(t)?e+"://"+U(t.host)+(null!==n?":"+n:""):"null"},kt=function(){return _(this).scheme+":"},Ot=function(){return _(this).username},jt=function(){return _(this).password},Et=function(){var t=_(this),e=t.host,n=t.port;return null===e?"":null===n?U(e):U(e)+":"+n},Tt=function(){var t=_(this).host;return null===t?"":U(t)},Lt=function(){var t=_(this).port;return null===t?"":String(t)},$t=function(){var t=_(this),e=t.path;return t.cannotBeABaseURL?e[0]:e.length?"/"+e.join("/"):""},Pt=function(){var t=_(this).query;return t?"?"+t:""},It=function(){return _(this).searchParams},Mt=function(){var t=_(this).fragment;return t?"#"+t:""},Rt=function(t,e){return{get:t,set:e,configurable:!0,enumerable:!0}};if(i&&c(_t,{href:Rt(St,(function(t){var e=_(this),n=String(t),r=xt(e,n);if(r)throw TypeError(r);x(e.searchParams).updateSearchParams(e.query)})),origin:Rt(Ct),protocol:Rt(kt,(function(t){var e=_(this);xt(e,String(t)+":",tt)})),username:Rt(Ot,(function(t){var e=_(this),n=d(String(t));if(!X(e)){e.username="";for(var r=0;r<n.length;r++)e.username+=q(n[r],H)}})),password:Rt(jt,(function(t){var e=_(this),n=d(String(t));if(!X(e)){e.password="";for(var r=0;r<n.length;r++)e.password+=q(n[r],H)}})),host:Rt(Et,(function(t){var e=_(this);e.cannotBeABaseURL||xt(e,String(t),lt)})),hostname:Rt(Tt,(function(t){var e=_(this);e.cannotBeABaseURL||xt(e,String(t),ft)})),port:Rt(Lt,(function(t){var e=_(this);X(e)||(""==(t=String(t))?e.port=null:xt(e,t,pt))})),pathname:Rt($t,(function(t){var e=_(this);e.cannotBeABaseURL||(e.path=[],xt(e,t+"",mt))})),search:Rt(Pt,(function(t){var e=_(this);""==(t=String(t))?e.query=null:("?"==t.charAt(0)&&(t=t.slice(1)),e.query="",xt(e,t,bt)),x(e.searchParams).updateSearchParams(e.query)})),searchParams:Rt(It),hash:Rt(Mt,(function(t){var e=_(this);""!=(t=String(t))?("#"==t.charAt(0)&&(t=t.slice(1)),e.fragment="",xt(e,t,wt)):e.fragment=null}))}),u(_t,"toJSON",(function(){return St.call(this)}),{enumerable:!0}),u(_t,"toString",(function(){return St.call(this)}),{enumerable:!0}),b){var Nt=b.createObjectURL,zt=b.revokeObjectURL;Nt&&u(At,"createObjectURL",(function(t){return Nt.apply(b,arguments)})),zt&&u(At,"revokeObjectURL",(function(t){return zt.apply(b,arguments)}))}m(At,"URL"),o({global:!0,forced:!a,sham:!i},{URL:At})},function(t,e,n){"use strict";var r=n(108).charAt,o=n(18),i=n(106),a=o.set,s=o.getterFor("String Iterator");i(String,"String",(function(t){a(this,{type:"String Iterator",string:String(t),index:0})}),(function(){var t,e=s(this),n=e.string,o=e.index;return o>=n.length?{value:void 0,done:!0}:(t=r(n,o),e.index+=t.length,{value:t,done:!1})}))},function(t,e,n){"use strict";var r=n(6),o=n(2),i=n(47),a=n(45),s=n(43),c=n(27),u=n(44),l=Object.assign,f=Object.defineProperty;t.exports=!l||o((function(){if(r&&1!==l({b:1},l(f({},"a",{enumerable:!0,get:function(){f(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var t={},e={},n=Symbol();return t[n]=7,"abcdefghijklmnopqrst".split("").forEach((function(t){e[t]=t})),7!=l({},t)[n]||"abcdefghijklmnopqrst"!=i(l({},e)).join("")}))?function(t,e){for(var n=c(t),o=arguments.length,l=1,f=a.f,p=s.f;o>l;)for(var d,h=u(arguments[l++]),v=f?i(h).concat(f(h)):i(h),m=v.length,g=0;m>g;)d=v[g++],r&&!p.call(h,d)||(n[d]=h[d]);return n}:l},function(t,e,n){"use strict";var r=/[^\0-\u007E]/,o=/[.\u3002\uFF0E\uFF61]/g,i="Overflow: input needs wider integers to process",a=Math.floor,s=String.fromCharCode,c=function(t){return t+22+75*(t<26)},u=function(t,e,n){var r=0;for(t=n?a(t/700):t>>1,t+=a(t/e);t>455;r+=36)t=a(t/35);return a(r+36*t/(t+38))},l=function(t){var e,n,r=[],o=(t=function(t){for(var e=[],n=0,r=t.length;n<r;){var o=t.charCodeAt(n++);if(o>=55296&&o<=56319&&n<r){var i=t.charCodeAt(n++);56320==(64512&i)?e.push(((1023&o)<<10)+(1023&i)+65536):(e.push(o),n--)}else e.push(o)}return e}(t)).length,l=128,f=0,p=72;for(e=0;e<t.length;e++)(n=t[e])<128&&r.push(s(n));var d=r.length,h=d;for(d&&r.push("-");h<o;){var v=2147483647;for(e=0;e<t.length;e++)(n=t[e])>=l&&n<v&&(v=n);var m=h+1;if(v-l>a((2147483647-f)/m))throw RangeError(i);for(f+=(v-l)*m,l=v,e=0;e<t.length;e++){if((n=t[e])<l&&++f>2147483647)throw RangeError(i);if(n==l){for(var g=f,y=36;;y+=36){var b=y<=p?1:y>=p+26?26:y-p;if(g<b)break;var w=g-b,x=36-b;r.push(s(c(b+w%x))),g=a(w/x)}r.push(s(c(g))),p=u(f,m,h==d),f=0,++h}}++f,++l}return r.join("")};t.exports=function(t){var e,n,i=[],a=t.toLowerCase().replace(o,".").split(".");for(e=0;e<a.length;e++)n=a[e],i.push(r.test(n)?"xn--"+l(n):n);return i.join(".")}},function(t,e,n){"use strict";n(77);var r=n(8),o=n(13),i=n(137),a=n(11),s=n(78),c=n(21),u=n(107),l=n(18),f=n(69),p=n(3),d=n(22),h=n(48),v=n(4),m=n(5),g=n(41),y=n(16),b=n(165),w=n(49),x=n(1),A=o("fetch"),_=o("Headers"),S=x("iterator"),C=l.set,k=l.getterFor("URLSearchParams"),O=l.getterFor("URLSearchParamsIterator"),j=/\+/g,E=Array(4),T=function(t){return E[t-1]||(E[t-1]=RegExp("((?:%[\\da-f]{2}){"+t+"})","gi"))},L=function(t){try{return decodeURIComponent(t)}catch(e){return t}},$=function(t){var e=t.replace(j," "),n=4;try{return decodeURIComponent(e)}catch(t){for(;n;)e=e.replace(T(n--),L);return e}},P=/[!'()~]|%20/g,I={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+"},M=function(t){return I[t]},R=function(t){return encodeURIComponent(t).replace(P,M)},N=function(t,e){if(e)for(var n,r,o=e.split("&"),i=0;i<o.length;)(n=o[i++]).length&&(r=n.split("="),t.push({key:$(r.shift()),value:$(r.join("="))}))},z=function(t){this.entries.length=0,N(this.entries,t)},D=function(t,e){if(t<e)throw TypeError("Not enough arguments")},U=u((function(t,e){C(this,{type:"URLSearchParamsIterator",iterator:b(k(t).entries),kind:e})}),"Iterator",(function(){var t=O(this),e=t.kind,n=t.iterator.next(),r=n.value;return n.done||(n.value="keys"===e?r.key:"values"===e?r.value:[r.key,r.value]),n})),F=function(){f(this,F,"URLSearchParams");var t,e,n,r,o,i,a,s,c,u=arguments.length>0?arguments[0]:void 0,l=this,d=[];if(C(l,{type:"URLSearchParams",entries:d,updateURL:function(){},updateSearchParams:z}),void 0!==u)if(m(u))if("function"==typeof(t=w(u)))for(n=(e=t.call(u)).next;!(r=n.call(e)).done;){if((a=(i=(o=b(v(r.value))).next).call(o)).done||(s=i.call(o)).done||!i.call(o).done)throw TypeError("Expected sequence with length 2");d.push({key:a.value+"",value:s.value+""})}else for(c in u)p(u,c)&&d.push({key:c,value:u[c]+""});else N(d,"string"==typeof u?"?"===u.charAt(0)?u.slice(1):u:u+"")},V=F.prototype;s(V,{append:function(t,e){D(arguments.length,2);var n=k(this);n.entries.push({key:t+"",value:e+""}),n.updateURL()},delete:function(t){D(arguments.length,1);for(var e=k(this),n=e.entries,r=t+"",o=0;o<n.length;)n[o].key===r?n.splice(o,1):o++;e.updateURL()},get:function(t){D(arguments.length,1);for(var e=k(this).entries,n=t+"",r=0;r<e.length;r++)if(e[r].key===n)return e[r].value;return null},getAll:function(t){D(arguments.length,1);for(var e=k(this).entries,n=t+"",r=[],o=0;o<e.length;o++)e[o].key===n&&r.push(e[o].value);return r},has:function(t){D(arguments.length,1);for(var e=k(this).entries,n=t+"",r=0;r<e.length;)if(e[r++].key===n)return!0;return!1},set:function(t,e){D(arguments.length,1);for(var n,r=k(this),o=r.entries,i=!1,a=t+"",s=e+"",c=0;c<o.length;c++)(n=o[c]).key===a&&(i?o.splice(c--,1):(i=!0,n.value=s));i||o.push({key:a,value:s}),r.updateURL()},sort:function(){var t,e,n,r=k(this),o=r.entries,i=o.slice();for(o.length=0,n=0;n<i.length;n++){for(t=i[n],e=0;e<n;e++)if(o[e].key>t.key){o.splice(e,0,t);break}e===n&&o.push(t)}r.updateURL()},forEach:function(t){for(var e,n=k(this).entries,r=d(t,arguments.length>1?arguments[1]:void 0,3),o=0;o<n.length;)r((e=n[o++]).value,e.key,this)},keys:function(){return new U(this,"keys")},values:function(){return new U(this,"values")},entries:function(){return new U(this,"entries")}},{enumerable:!0}),a(V,S,V.entries),a(V,"toString",(function(){for(var t,e=k(this).entries,n=[],r=0;r<e.length;)t=e[r++],n.push(R(t.key)+"="+R(t.value));return n.join("&")}),{enumerable:!0}),c(F,"URLSearchParams"),r({global:!0,forced:!i},{URLSearchParams:F}),i||"function"!=typeof A||"function"!=typeof _||r({global:!0,enumerable:!0,forced:!0},{fetch:function(t){var e,n,r,o=[t];return arguments.length>1&&(m(e=arguments[1])&&(n=e.body,"URLSearchParams"===h(n)&&((r=e.headers?new _(e.headers):new _).has("content-type")||r.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"),e=g(e,{body:y(0,String(n)),headers:y(0,r)}))),o.push(e)),A.apply(this,o)}}),t.exports={URLSearchParams:F,getState:k}},function(t,e,n){var r=n(4),o=n(49);t.exports=function(t){var e=o(t);if("function"!=typeof e)throw TypeError(String(t)+" is not iterable");return r(e.call(t))}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,n){"use strict";n.r(e);var r=n(134),o=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"relative bg-white extension"},[n("div",{staticClass:"px-4 pt-4"},[n("div",{staticClass:"flex items-center justify-between mb-8"},[n("a",{attrs:{href:"http://vuetelescope.com/",target:"_blank"}},[n("LogoIcon",{staticClass:"h-8"})],1),t._v(" "),n("div",{staticClass:"flex items-center"},[t.isRootUrl&&t.showcase&&t.showcase.hasVue&&t.showcase.isPublic?n("a",{staticClass:"mr-3",attrs:{href:"https://vuetelescope.com/explore/"+t.showcase.slug,target:"_blank"}},[n("AppButton",{attrs:{size:"small",appearance:"primary",outlined:""}},[t._v("\n            Open\n          ")])],1):t.isRootUrl&&t.showcase&&t.showcase.hasVue&&!t.showcase.isPublic&&!t.savingError?n("AppButton",{staticClass:"mr-3",attrs:{size:"small",appearance:"primary"},nativeOn:{click:function(e){return t.saveShowcase(e)}}},[t._v("\n          "+t._s(t.saving?"Saving...":"Save")+"\n        ")]):t._e(),t._v(" "),n("a",{staticClass:"mr-3",attrs:{href:"https://twitter.com/VueTelescope",target:"_blank"}},[n("TwitterIcon",{staticClass:"w-5 h-5 hover:text-primary-500"})],1),t._v(" "),n("a",{attrs:{href:"https://github.com/nuxtlabs/vue-telescope-analyzer",target:"_blank"}},[n("GithubIcon",{staticClass:"w-5 h-5 hover:text-primary-500"})],1)],1)]),t._v(" "),t.isLoading?n("div",{staticClass:"absolute top-0 left-0 flex items-center justify-center w-full h-full"},[n("div",{staticClass:"font-bold-body-weight text-seven"},[t._v("Loading...")])]):t.showcase&&t.showcase.url?t.showcase?n("div",[t.showcase.hasVue?n("div",[n("div",{staticClass:"mb-8"},[t.savingError?n("div",{staticClass:"mb-4 text-orange"},[t._v("\n            Could not save website to Vue Telescope, please try again later or\n            "),n("a",{staticClass:"underline",attrs:{href:"mailto:vuetelescope@nuxtjs.com?subject=Could not save "+t.showcase.url}},[t._v("contact us")]),t._v(".\n          ")]):t._e(),t._v(" "),n("div",{staticClass:"mb-4"},[n("h3",{staticClass:"flex items-center pl-2 uppercase font-bold-body-weight text-primary-500"},[n("InfoIcon",{staticClass:"h-5 mr-2 opacity-50 text-primary-5700"}),t._v("Info\n            ")],1)]),t._v(" "),n("div",{staticClass:"grid grid-cols-3 gap-4"},[n("ExploreDataItem",{attrs:{label:"Vue Version",tag:"a",href:t.vueDocsURL,target:"_blank",rel:"noreferrer noopener"}},[n("img",{staticClass:"w-6 h-6 mr-2",attrs:{src:t.iconURL("/vue.svg"),alt:""}}),t._v(" "),n("div",{staticClass:"text-base leading-base font-bold-body-weight"},[t._v("\n                "+t._s(t.showcase.vueVersion)+"\n              ")])]),t._v(" "),t.showcase.framework?n("ExploreDataItem",{attrs:{label:"Framework",tag:"a",href:t.showcase.framework.url,target:"_blank",rel:"noreferrer noopener"}},[n("img",{staticClass:"w-6 h-6 mr-2",attrs:{src:t.iconURL(t.showcase.framework.imgPath),alt:""}}),t._v(" "),n("div",{staticClass:"text-base leading-seven font-bold-body-weight"},[t._v("\n                "+t._s(t.showcase.framework.name)+"\n              ")])]):t._e(),t._v(" "),t.showcase.ui?n("ExploreDataItem",{attrs:{label:"UI Framework",tag:"a",href:t.showcase.ui.url,target:"_blank",rel:"noreferrer noopener"}},[n("img",{staticClass:"w-6 h-6 mr-2",attrs:{src:t.iconURL(t.showcase.ui.imgPath),alt:""}}),t._v(" "),n("div",{staticClass:"text-base leading-seven font-bold-body-weight"},[t._v("\n                "+t._s(t.showcase.ui.name)+"\n              ")])]):t._e(),t._v(" "),n("ExploreDataItem",{attrs:{label:"Rendering"}},[n("div",{staticClass:"flex items-center text-base leading-seven font-bold-body-weight"},[t._v("\n                "+t._s(t.showcase.hasSSR?"Universal":"Client-side")+"\n              ")])]),t._v(" "),t.showcase.framework&&"nuxtjs"===t.showcase.framework.slug?n("ExploreDataItem",{attrs:{label:"Deployment"}},[n("div",{staticClass:"flex items-center text-base leading-seven font-bold-body-weight"},[t._v("\n                "+t._s(t.showcase.isStatic?"Static":"Server")+"\n              ")])]):t._e()],1)]),t._v(" "),t.showcase.plugins.length?n("div",{staticClass:"mb-4"},[n("div",{staticClass:"mb-4"},[n("h3",{staticClass:"flex items-center pl-2 uppercase font-bold-body-weight text-primary-500"},[n("PluginsIcon",{staticClass:"h-6 mr-2 opacity-50 text-primary-500"}),t._v("Plugins\n            ")],1)]),t._v(" "),n("div",{staticClass:"flex flex-wrap"},t._l(t.showcase.plugins,(function(e){return n("a",{key:e.id,staticClass:"mb-4 mr-4 border bg-grey-50 hover:bg-grey-100 border-grey-200 rounded-xl",attrs:{href:e.url,target:"_blank"}},[n("span",{staticClass:"block px-4 py-2 text-sm font-bold-body-weight"},[t._v(t._s(e.name))])])})),0)]):t._e(),t._v(" "),t.showcase.modules.length?n("div",[n("div",{staticClass:"mb-4"},[n("h3",{staticClass:"flex items-center pl-2 uppercase font-bold-body-weight text-primary-500"},[n("ModulesIcon",{staticClass:"h-6 mr-2 opacity-50 text-primary-500"}),t._v("Nuxt\n              Modules\n            ")],1)]),t._v(" "),n("div",{staticClass:"flex flex-wrap"},t._l(t.showcase.modules,(function(e){return n("a",{key:e.id,staticClass:"mb-4 mr-4 border bg-grey-50 hover:bg-grey-100 border-grey-200 rounded-xl",attrs:{href:e.url,target:"_blank"}},[n("span",{staticClass:"block px-4 py-2 text-sm font-bold-body-weight"},[t._v(t._s(e.name))])])})),0)]):t._e()]):t.showcase.hasVue?t._e():n("div",{staticClass:"absolute top-0 left-0 flex items-center justify-center w-full h-full pointer-events-none"},[n("div",{staticClass:"font-bold-body-weight text-eight"},[t._v("\n          Vue is not used on this website\n        ")])])]):t._e():n("div",{staticClass:"absolute top-0 left-0 flex items-center justify-center w-full h-full"},[n("div",{staticClass:"font-bold-body-weight text-eight"},[t._v("\n        Please enter an url in the address bar.\n      ")])])])])};o._withStripped=!0;n(82),n(87),n(112),n(77),n(117),n(91),n(93),n(158),n(159),n(119),n(120),n(160),n(101);var i=n(65),a=n.n(i),s=n(152),c=n.n(s),u=n(153),l=n.n(u),f=n(154),p=n.n(f),d=n(155),h=n.n(d),v=n(156),m=n.n(v),g=n(157),y=n.n(g),b=function(){var t=this.$createElement,e=this._self._c||t;return e(this.tag,{tag:"component",staticClass:"w-full sm:w-1/2 md:w-1/3 max-w-sm m-auto sm:m-0"},[e("div",{staticClass:"relative w-full h-full pt-0"},[e("div",{staticClass:"flex flex-col items-center justify-between bg-grey-50 rounded-xl pb-2 pr-2 w-full h-full border-2 border-grey-200",class:["a"===this.tag&&"hover:bg-grey-100"]},[e("div",{staticClass:"self-start bg-grey-200 px-3 rounded-xl rounded-bl-none rounded-tr-none text-xs tracking-4 uppercase leading-sm font-bold-body-weight mb-2",staticStyle:{"border-radius":"0.75rem","border-bottom-left-radius":"0","border-top-right-radius":"0"}},[this._v("\n        "+this._s(this.label)+"\n      ")]),this._v(" "),e("div",{staticClass:"flex items-center"},[this._t("default")],2)])])])};function w(t,e,n,r,o,i,a,s){var c,u="function"==typeof t?t.options:t;if(e&&(u.render=e,u.staticRenderFns=n,u._compiled=!0),r&&(u.functional=!0),i&&(u._scopeId="data-v-"+i),a?(c=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),o&&o.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},u._ssrRegister=c):o&&(c=s?function(){o.call(this,(u.functional?this.parent:this).$root.$options.shadowRoot)}:o),c)if(u.functional){u._injectStyles=c;var l=u.render;u.render=function(t,e){return c.call(e),l(t,e)}}else{var f=u.beforeCreate;u.beforeCreate=f?[].concat(f,c):[c]}return{exports:t,options:u}}b._withStripped=!0;var x=w({props:{label:{type:String,default:""},tag:{type:String,default:"div"}}},b,[],!1,null,null,null);x.options.__file="components/ExploreDataItem.vue";var A=x.exports,_=function(){var t=this,e=t.$createElement;return(t._self._c||e)(t.tag,{tag:"component",staticClass:"inline-flex items-center font-bold-body-weight focus:outline-none border-2 border-transparent",class:[t.sizing.height,t.sizing.fontSize,t.sizing.rounded,t.sizing.padding,t.color.bg,t.color.text,t.color.outline,t.color.hoverState],attrs:{href:t.href}},[t._t("default")],2)};_._withStripped=!0;var S=w({props:{size:{type:String,default:"base"},appearance:{type:String,default:""},tag:{type:String,default:"button"},outlined:{type:Boolean,default:!1},href:{type:String,default:null}},computed:{sizing(){return"small"===this.size?{height:"h-8",fontSize:"text-sm",rounded:"rounded-md",padding:"px-4"}:"large"===this.size?{height:"h-12",fontSize:"text-eight",rounded:"rounded-3lg",padding:"px-6"}:{height:"h-10",fontSize:"text-base",rounded:"rounded-2lg",padding:"px-4"}},color(){return"transparent"===this.appearance?{bg:"",text:"",outline:"",hoverState:"hover:text-primary-500"}:"primary"===this.appearance?this.outlined?{text:"text-primary-500",outline:"border-primary-500",hoverState:"hover:bg-primary-50 hover:border-primary-300"}:{bg:"bg-primary-500",text:"text-white",outline:"focus:border-primary-700",hoverState:"hover:bg-primary-400"}:"danger"===this.appearance?{bg:"bg-red-500",text:"text-white"}:"warning"===this.appearance?{bg:"bg-yellow-500",text:"text-grey-900"}:"success"===this.appearance?{bg:"bg-green-500",text:"text-white"}:"info"===this.appearance?this.outlined?{text:"text-blue-900",outline:"border-blue-900"}:{bg:"bg-blue-500",text:"text-white",outline:"focus:border-blue-900",hoverState:"hover:bg-blue-400"}:{bg:"bg-grey-200",text:"text-grey-900",outline:"focus:border-grey-700"}}}},_,[],!1,null,null,null);S.options.__file="components/AppButton.vue";var C=S.exports;function k(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function O(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?k(Object(n),!0).forEach((function(e){j(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):k(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function j(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function E(t,e,n,r,o,i,a){try{var s=t[i](a),c=s.value}catch(t){return void n(t)}s.done?e(c):Promise.resolve(c).then(r,o)}function T(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(t){E(i,r,o,a,s,"next",t)}function s(t){E(i,r,o,a,s,"throw",t)}a(void 0)}))}}var L=w({components:{LogoIcon:c.a,TwitterIcon:l.a,GithubIcon:p.a,InfoIcon:h.a,PluginsIcon:m.a,ModulesIcon:y.a,ExploreDataItem:A,AppButton:C},data:()=>({isLoading:!0,saving:!1,savingError:!1,showcase:null,currentTab:null}),computed:{isRootUrl(){if(!this.showcase||!this.showcase.url)return!1;var t=new URL(this.showcase.url).hostname;return!(!this.showcase.url.endsWith(t)&&!this.showcase.url.endsWith(t+"/"))},vueDocsURL(){return(this.showcase.vueVersion.startsWith("1")?"https://v1.vuejs.org":this.showcase.vueVersion.startsWith("2")&&"https://v2.vuejs.org")||this.showcase.vueVersion.startsWith("3")&&"https://vuejs.org"}},mounted(){this.detect()},beforeDestroy(){this._timer||(clearTimeout(this._timer),delete this._timer)},methods:{detect(){var t=arguments,e=this;return T(regeneratorRuntime.mark((function n(){var r,o,i;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return r=t.length>0&&void 0!==t[0]?t[0]:0,n.next=3,e.getCurrentTab();case 3:if(e.currentTab=n.sent,e.currentTab){n.next=7;break}return e._timer=setTimeout((function(){return e.detect()}),1e3),n.abrupt("return");case 7:return o=e.currentTab.id,n.next=10,e.sendToBackground({from:"popup",action:"getShowcase",payload:{tabId:o}});case 10:if((i=n.sent).payload||!(r<3)){n.next=14;break}return e._timer=setTimeout((function(){return e.detect(r+1)}),1e3),n.abrupt("return");case 14:e.isLoading=!1,e.showcase=i.payload||null;case 16:case"end":return n.stop()}}),n)})))()},getCurrentTab:()=>T(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,a.a.tabs.query({currentWindow:!0,active:!0}).then((function(t){var e=t[0],n=e.id,r=e.status,o=e.url;return"complete"===r?{id:n,url:o}:null}));case 2:return t.abrupt("return",t.sent);case 3:case"end":return t.stop()}}),t)})))(),sendToBackground:t=>a.a.runtime.sendMessage(t),iconURL:t=>"https://icons.vuetelescope.com".concat(t),saveShowcase(){var t=this;return T(regeneratorRuntime.mark((function e(){var n,r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.saving=!0,t.savingError=!1,e.prev=2,"undefined"!=typeof EventSource){e.next=6;break}return console.log("EventSource is not supported in current borwser!"),e.abrupt("return");case 6:return(n=new EventSource("https://service.vuetelescope.com?url=".concat(t.showcase.url,"&isPublic=true"))).addEventListener("message",(function(e){try{var r=JSON.parse(e.data);if(r.error||r.isAdultContent)throw new Error("API call to VT failed");t.showcase.slug=r.slug,t.showcase.isPublic=r.isPublic,t.saving=!1,n.close()}catch(t){n.close()}})),r=t.currentTab.id,e.next=11,t.sendToBackground({from:"popup",action:"analyze",payload:O({tabId:r},t.showcase)});case 11:e.next=17;break;case 13:e.prev=13,e.t0=e.catch(2),t.saving=!1,t.savingError=!0;case 17:case"end":return e.stop()}}),e,null,[[2,13]])})))()}}},o,[],!1,null,null,null);L.options.__file="popup/App.vue";var $=L.exports;window.browser=n(65),r.a.prototype.$browser=window.browser,new r.a({el:"#app",render:function(t){return t($)}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZhaWxzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGFzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZXhwb3J0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi1yYXcuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXB1cmUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGlkZGVuLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtZ2xvYmFsLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91aWQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtc3ltYm9sLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtdXNlcy10by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGF0aC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtZm9yY2VkLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9odG1sLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90YXNrLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy93ZWJleHRlbnNpb24tcG9seWZpbGwvZGlzdC9icm93c2VyLXBvbHlmaWxsLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS1wcm9taXNlLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LXNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWljcm90YXNrLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGVyZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mcm9tLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy92dWUvZGlzdC92dWUucnVudGltZS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9ub3QtYS1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS11cmwuanMiLCJ3ZWJwYWNrOi8vLy4vaW1hZ2VzL2xvZ28uc3ZnIiwid2VicGFjazovLy8uL2ltYWdlcy90d2l0dGVyLnN2ZyIsIndlYnBhY2s6Ly8vLi9pbWFnZXMvZ2l0aHViLnN2ZyIsIndlYnBhY2s6Ly8vLi9pbWFnZXMvaW5mby5zdmciLCJ3ZWJwYWNrOi8vLy4vaW1hZ2VzL3BsdWdpbnMuc3ZnIiwid2VicGFjazovLy8uL2ltYWdlcy9tb2R1bGVzLnN2ZyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuZW5kcy13aXRoLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudXJsLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctcHVueWNvZGUtdG8tYXNjaWkuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnVybC1zZWFyY2gtcGFyYW1zLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL3BvcHVwL0FwcC52dWU/YzM4YiIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL0V4cGxvcmVEYXRhSXRlbS52dWU/Y2E1ZiIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qcyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL0V4cGxvcmVEYXRhSXRlbS52dWUiLCJ3ZWJwYWNrOi8vL2NvbXBvbmVudHMvRXhwbG9yZURhdGFJdGVtLnZ1ZSIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL0FwcEJ1dHRvbi52dWU/MGY4OCIsIndlYnBhY2s6Ly8vY29tcG9uZW50cy9BcHBCdXR0b24udnVlIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvQXBwQnV0dG9uLnZ1ZSIsIndlYnBhY2s6Ly8vcG9wdXAvQXBwLnZ1ZSIsIndlYnBhY2s6Ly8vLi9wb3B1cC9BcHAudnVlIiwid2VicGFjazovLy8uL3BvcHVwL3BvcHVwLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiY2hlY2siLCJpdCIsIk1hdGgiLCJnbG9iYWxUaGlzIiwid2luZG93Iiwic2VsZiIsIkZ1bmN0aW9uIiwiZ2xvYmFsIiwic2hhcmVkIiwiaGFzIiwidWlkIiwiTkFUSVZFX1NZTUJPTCIsIlVTRV9TWU1CT0xfQVNfVUlEIiwiV2VsbEtub3duU3ltYm9sc1N0b3JlIiwiY3JlYXRlV2VsbEtub3duU3ltYm9sIiwid2l0aG91dFNldHRlciIsImV4ZWMiLCJlcnJvciIsImlzT2JqZWN0IiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiZmFpbHMiLCJERVNDUklQVE9SUyIsIklFOF9ET01fREVGSU5FIiwiYW5PYmplY3QiLCJ0b1ByaW1pdGl2ZSIsIm5hdGl2ZURlZmluZVByb3BlcnR5IiwiZiIsIk8iLCJQIiwiQXR0cmlidXRlcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSIsInJlZGVmaW5lIiwic2V0R2xvYmFsIiwiY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyIsImlzRm9yY2VkIiwib3B0aW9ucyIsInNvdXJjZSIsInRhcmdldCIsInRhcmdldFByb3BlcnR5Iiwic291cmNlUHJvcGVydHkiLCJkZXNjcmlwdG9yIiwiVEFSR0VUIiwiR0xPQkFMIiwiU1RBVElDIiwic3RhdCIsIm5vVGFyZ2V0R2V0IiwiZm9yY2VkIiwidW5kZWZpbmVkIiwic2hhbSIsImRlZmluZVByb3BlcnR5TW9kdWxlIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yIiwidG9TdHJpbmciLCJzbGljZSIsImluc3BlY3RTb3VyY2UiLCJJbnRlcm5hbFN0YXRlTW9kdWxlIiwiZ2V0SW50ZXJuYWxTdGF0ZSIsImVuZm9yY2VJbnRlcm5hbFN0YXRlIiwiZW5mb3JjZSIsIlRFTVBMQVRFIiwic3BsaXQiLCJ1bnNhZmUiLCJzaW1wbGUiLCJqb2luIiwidGhpcyIsIkluZGV4ZWRPYmplY3QiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwicGF0aCIsImFGdW5jdGlvbiIsInZhcmlhYmxlIiwibmFtZXNwYWNlIiwibWV0aG9kIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwicHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUiLCJ0b0luZGV4ZWRPYmplY3QiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJiaXRtYXAiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInRvSW50ZWdlciIsIm1pbiIsImFyZ3VtZW50Iiwic2V0IiwiTkFUSVZFX1dFQUtfTUFQIiwib2JqZWN0SGFzIiwic2hhcmVkS2V5IiwiaGlkZGVuS2V5cyIsIldlYWtNYXAiLCJzdG9yZSIsIndtZ2V0Iiwid21oYXMiLCJ3bXNldCIsIm1ldGFkYXRhIiwiU1RBVEUiLCJnZXR0ZXJGb3IiLCJUWVBFIiwic3RhdGUiLCJ0eXBlIiwiaW5wdXQiLCJQUkVGRVJSRURfU1RSSU5HIiwiZm4iLCJ2YWwiLCJ2YWx1ZU9mIiwiVE9fU1RSSU5HX1RBRyIsIndlbGxLbm93blN5bWJvbCIsIlRBRyIsInRoYXQiLCJhIiwiYiIsImFwcGx5Iiwia2V5cyIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJwcm9jZXNzIiwiZGVmYXVsdFNldFRpbW91dCIsIkVycm9yIiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJzZXRUaW1lb3V0IiwiZSIsImNsZWFyVGltZW91dCIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiY29uY2F0IiwiZHJhaW5RdWV1ZSIsInRpbWVvdXQiLCJsZW4iLCJydW4iLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwiYXJyYXkiLCJub29wIiwibmV4dFRpY2siLCJhcmdzIiwiQXJyYXkiLCJwdXNoIiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiZG9jdW1lbnQiLCJFWElTVFMiLCJjcmVhdGVFbGVtZW50IiwiZnVuY3Rpb25Ub1N0cmluZyIsIklTX1BVUkUiLCJjb3B5cmlnaHQiLCJpZCIsInBvc3RmaXgiLCJyYW5kb20iLCJpbnRlcm5hbE9iamVjdEtleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwidG9PYmplY3QiLCJ0b0xlbmd0aCIsImFycmF5U3BlY2llc0NyZWF0ZSIsImNyZWF0ZU1ldGhvZCIsIklTX01BUCIsIklTX0ZJTFRFUiIsIklTX1NPTUUiLCJJU19FVkVSWSIsIklTX0ZJTkRfSU5ERVgiLCJOT19IT0xFUyIsIiR0aGlzIiwiY2FsbGJhY2tmbiIsInNwZWNpZmljQ3JlYXRlIiwicmVzdWx0IiwiYm91bmRGdW5jdGlvbiIsImluZGV4IiwiZm9yRWFjaCIsIm1hcCIsImZpbHRlciIsInNvbWUiLCJldmVyeSIsImZpbmQiLCJmaW5kSW5kZXgiLCJ0ZXN0IiwiY2VpbCIsImZsb29yIiwiaXNOYU4iLCJhY3RpdmVYRG9jdW1lbnQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZW51bUJ1Z0tleXMiLCJodG1sIiwiZG9jdW1lbnRDcmVhdGVFbGVtZW50IiwiSUVfUFJPVE8iLCJFbXB0eUNvbnN0cnVjdG9yIiwic2NyaXB0VGFnIiwiY29udGVudCIsIkxUIiwiTnVsbFByb3RvT2JqZWN0IiwiZG9tYWluIiwiQWN0aXZlWE9iamVjdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwid3JpdGUiLCJjbG9zZSIsInRlbXAiLCJwYXJlbnRXaW5kb3ciLCJOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYIiwic3R5bGUiLCJkaXNwbGF5IiwiYXBwZW5kQ2hpbGQiLCJzcmMiLCJjb250ZW50V2luZG93Iiwib3BlbiIsIkYiLCJQcm9wZXJ0aWVzIiwiY2FjaGUiLCJ0aHJvd2VyIiwiTUVUSE9EX05BTUUiLCJBQ0NFU1NPUlMiLCJhcmd1bWVudDAiLCJhcmd1bWVudDEiLCJuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiTkFTSE9STl9CVUciLCIxIiwiViIsImNsYXNzb2YiLCJpc0FycmF5IiwiYXJnIiwiVE9fU1RSSU5HX1RBR19TVVBQT1JUIiwiY2xhc3NvZlJhdyIsIkNPUlJFQ1RfQVJHVU1FTlRTIiwidGFnIiwidHJ5R2V0IiwiY2FsbGVlIiwiSXRlcmF0b3JzIiwiSVRFUkFUT1IiLCJpbmRleE9mIiwibmFtZXMiLCJyZXBsYWNlbWVudCIsImZlYXR1cmUiLCJkZXRlY3Rpb24iLCJkYXRhIiwibm9ybWFsaXplIiwiUE9MWUZJTEwiLCJOQVRJVkUiLCJzdHJpbmciLCJyZXBsYWNlIiwidG9Mb3dlckNhc2UiLCJpdGVyYXRvciIsImdldEJ1aWx0SW4iLCJtYXRjaCIsInVzZXJBZ2VudCIsInY4IiwiZGVmZXIiLCJjaGFubmVsIiwicG9ydCIsIklTX0lPUyIsImxvY2F0aW9uIiwic2V0SW1tZWRpYXRlIiwiY2xlYXIiLCJjbGVhckltbWVkaWF0ZSIsIk1lc3NhZ2VDaGFubmVsIiwiRGlzcGF0Y2giLCJjb3VudGVyIiwicnVubmVyIiwibGlzdGVuZXIiLCJldmVudCIsInBvc3QiLCJwb3N0TWVzc2FnZSIsInByb3RvY29sIiwiaG9zdCIsIm5vdyIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiaW1wb3J0U2NyaXB0cyIsInJlbW92ZUNoaWxkIiwiUHJvbWlzZUNhcGFiaWxpdHkiLCJDIiwicmVzb2x2ZSIsInJlamVjdCIsInByb21pc2UiLCIkJHJlc29sdmUiLCIkJHJlamVjdCIsImdldFByb3RvdHlwZU9mIiwiQ0hST01FX1NFTkRfTUVTU0FHRV9DQUxMQkFDS19OT19SRVNQT05TRV9NRVNTQUdFIiwiU0VORF9SRVNQT05TRV9ERVBSRUNBVElPTl9XQVJOSU5HIiwid3JhcEFQSXMiLCJhcGlNZXRhZGF0YSIsIkRlZmF1bHRXZWFrTWFwIiwiY3JlYXRlSXRlbSIsIml0ZW1zIiwic3VwZXIiLCJtYWtlQ2FsbGJhY2siLCJjYWxsYmFja0FyZ3MiLCJjaHJvbWUiLCJydW50aW1lIiwibGFzdEVycm9yIiwic2luZ2xlQ2FsbGJhY2tBcmciLCJwbHVyYWxpemVBcmd1bWVudHMiLCJudW1BcmdzIiwid3JhcE1ldGhvZCIsIndyYXBwZXIiLCJQcm94eSIsInRhcmdldE1ldGhvZCIsInRoaXNPYmoiLCJ3cmFwT2JqZWN0Iiwid3JhcHBlcnMiLCJoYW5kbGVycyIsInByb3h5VGFyZ2V0IiwicHJvcCIsInJlY2VpdmVyIiwibWluQXJncyIsIm1heEFyZ3MiLCJQcm9taXNlIiwiZmFsbGJhY2tUb05vQ2FsbGJhY2siLCJjYkVycm9yIiwiY29uc29sZSIsIndhcm4iLCJub0NhbGxiYWNrIiwid3JhcEFzeW5jRnVuY3Rpb24iLCJkZXNjIiwiUmVmbGVjdCIsImRlbGV0ZVByb3BlcnR5Iiwid3JhcEV2ZW50Iiwid3JhcHBlck1hcCIsImhhc0xpc3RlbmVyIiwibG9nZ2VkU2VuZFJlc3BvbnNlRGVwcmVjYXRpb25XYXJuaW5nIiwib25NZXNzYWdlV3JhcHBlcnMiLCJtZXNzYWdlIiwic2VuZGVyIiwic2VuZFJlc3BvbnNlIiwid3JhcHBlZFNlbmRSZXNwb25zZSIsImRpZENhbGxTZW5kUmVzcG9uc2UiLCJzZW5kUmVzcG9uc2VQcm9taXNlIiwicmVzcG9uc2UiLCJzdGFjayIsImVyciIsImlzUmVzdWx0VGhlbmFibGUiLCJ0aGVuIiwic2VuZFByb21pc2VkUmVzdWx0IiwibXNnIiwiX19tb3pXZWJFeHRlbnNpb25Qb2x5ZmlsbFJlamVjdF9fIiwiY2F0Y2giLCJ3cmFwcGVkU2VuZE1lc3NhZ2VDYWxsYmFjayIsInJlcGx5Iiwid3JhcHBlZFNlbmRNZXNzYWdlIiwiYXBpTmFtZXNwYWNlT2JqIiwid3JhcHBlZENiIiwic2VuZE1lc3NhZ2UiLCJzdGF0aWNXcmFwcGVycyIsIm9uTWVzc2FnZSIsIm9uTWVzc2FnZUV4dGVybmFsIiwidGFicyIsInNldHRpbmdNZXRhZGF0YSIsInByaXZhY3kiLCJuZXR3b3JrIiwibmV0d29ya1ByZWRpY3Rpb25FbmFibGVkIiwid2ViUlRDSVBIYW5kbGluZ1BvbGljeSIsInNlcnZpY2VzIiwicGFzc3dvcmRTYXZpbmdFbmFibGVkIiwid2Vic2l0ZXMiLCJoeXBlcmxpbmtBdWRpdGluZ0VuYWJsZWQiLCJyZWZlcnJlcnNFbmFibGVkIiwiZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSIsImdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSIsIlY4X1ZFUlNJT04iLCJTUEVDSUVTIiwiY29uc3RydWN0b3IiLCJmb28iLCJCb29sZWFuIiwicHJvcGVydHlLZXkiLCJDb25zdHJ1Y3RvciIsIkFycmF5UHJvdG90eXBlIiwiRU5UUklFUyIsInJldHVybk1ldGhvZCIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUiLCJ0b0Fic29sdXRlSW5kZXgiLCJJU19JTkNMVURFUyIsImVsIiwiZnJvbUluZGV4IiwiaW5jbHVkZXMiLCJtYXgiLCJpbnRlZ2VyIiwib2JqZWN0S2V5cyIsImFkZFRvVW5zY29wYWJsZXMiLCJkZWZpbmVJdGVyYXRvciIsInNldEludGVybmFsU3RhdGUiLCJpdGVyYXRlZCIsImtpbmQiLCJkb25lIiwiQXJndW1lbnRzIiwiU0FGRV9DTE9TSU5HIiwiY2FsbGVkIiwiaXRlcmF0b3JXaXRoUmV0dXJuIiwibmV4dCIsImZyb20iLCJTS0lQX0NMT1NJTkciLCJJVEVSQVRJT05fU1VQUE9SVCIsImRlZmF1bHRDb25zdHJ1Y3RvciIsIlMiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsIiQiLCJuYXRpdmVPYmplY3RDcmVhdGUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwiLCJ3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlIiwiZGVmaW5lV2VsbEtub3duU3ltYm9sIiwic2V0VG9TdHJpbmdUYWciLCIkZm9yRWFjaCIsIkhJRERFTiIsIlRPX1BSSU1JVElWRSIsIk9iamVjdFByb3RvdHlwZSIsIiRTeW1ib2wiLCIkc3RyaW5naWZ5IiwibmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyIsIkFsbFN5bWJvbHMiLCJPYmplY3RQcm90b3R5cGVTeW1ib2xzIiwiU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSIsIlN5bWJvbFRvU3RyaW5nUmVnaXN0cnkiLCJRT2JqZWN0IiwiVVNFX1NFVFRFUiIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2NyaXB0b3IiLCJPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yIiwid3JhcCIsImRlc2NyaXB0aW9uIiwic3ltYm9sIiwiaXNTeW1ib2wiLCIkZGVmaW5lUHJvcGVydHkiLCIkZGVmaW5lUHJvcGVydGllcyIsInByb3BlcnRpZXMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiSVNfT0JKRUNUX1BST1RPVFlQRSIsInNldHRlciIsImtleUZvciIsInN5bSIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsInN0cmluZ2lmeSIsInJlcGxhY2VyIiwic3BhY2UiLCIkcmVwbGFjZXIiLCJ3aW5kb3dOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiTkFNRSIsIm9yaWdpbmFsQXJyYXkiLCIkZmlsdGVyIiwiYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCIsImFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoIiwiSEFTX1NQRUNJRVNfU1VQUE9SVCIsIlVTRVNfVE9fTEVOR1RIIiwicHJvdG8iLCJhcnJheU1ldGhvZElzU3RyaWN0IiwiU1RSSUNUX01FVEhPRCIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlIiwiYXJyYXlJdGVyYXRvciIsIkJVR0dZX1NBRkFSSV9JVEVSQVRPUlMiLCJDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIiLCJJbnRlcm5hbCIsIk93blByb21pc2VDYXBhYmlsaXR5IiwiUHJvbWlzZVdyYXBwZXIiLCJuYXRpdmVUaGVuIiwiTmF0aXZlUHJvbWlzZSIsInJlZGVmaW5lQWxsIiwic2V0U3BlY2llcyIsImFuSW5zdGFuY2UiLCJpdGVyYXRlIiwiY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uIiwic3BlY2llc0NvbnN0cnVjdG9yIiwidGFzayIsIm1pY3JvdGFzayIsInByb21pc2VSZXNvbHZlIiwiaG9zdFJlcG9ydEVycm9ycyIsIm5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlIiwicGVyZm9ybSIsIlBST01JU0UiLCJnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSIsIlByb21pc2VDb25zdHJ1Y3RvciIsIiRmZXRjaCIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiSVNfTk9ERSIsIkRJU1BBVENIX0VWRU5UIiwiY3JlYXRlRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiRk9SQ0VEIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwiRmFrZVByb21pc2UiLCJJTkNPUlJFQ1RfSVRFUkFUSU9OIiwiaXRlcmFibGUiLCJhbGwiLCJpc1RoZW5hYmxlIiwibm90aWZ5IiwiaXNSZWplY3QiLCJub3RpZmllZCIsImNoYWluIiwicmVhY3Rpb25zIiwib2siLCJleGl0ZWQiLCJyZWFjdGlvbiIsImhhbmRsZXIiLCJmYWlsIiwicmVqZWN0aW9uIiwib25IYW5kbGVVbmhhbmRsZWQiLCJlbnRlciIsImV4aXQiLCJvblVuaGFuZGxlZCIsInJlYXNvbiIsImluaXRFdmVudCIsImlzVW5oYW5kbGVkIiwicGFyZW50IiwidW53cmFwIiwiaW50ZXJuYWxSZWplY3QiLCJpbnRlcm5hbFJlc29sdmUiLCJleGVjdXRvciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImZldGNoIiwiY2FwYWJpbGl0eSIsIngiLCIkcHJvbWlzZVJlc29sdmUiLCJ2YWx1ZXMiLCJyZW1haW5pbmciLCJhbHJlYWR5Q2FsbGVkIiwicmFjZSIsIkNPTlNUUlVDVE9SX05BTUUiLCJpc0FycmF5SXRlcmF0b3JNZXRob2QiLCJnZXRJdGVyYXRvck1ldGhvZCIsImNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmciLCJSZXN1bHQiLCJzdG9wcGVkIiwiQVNfRU5UUklFUyIsIklTX0lURVJBVE9SIiwiaXRlckZuIiwic3RlcCIsInN0b3AiLCJmbHVzaCIsImhlYWQiLCJsYXN0IiwidG9nZ2xlIiwibm9kZSIsIm1hY3JvdGFzayIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwicXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yIiwicXVldWVNaWNyb3Rhc2siLCJjcmVhdGVUZXh0Tm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwicHJvbWlzZUNhcGFiaWxpdHkiLCJPcCIsImhhc093biIsIml0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsImRlZmluZSIsIm9iaiIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsImNvbnRleHQiLCJDb250ZXh0IiwiX2ludm9rZSIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsIkNvbnRpbnVlU2VudGluZWwiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJlY29yZCIsInRyeUNhdGNoIiwibWFrZUludm9rZU1ldGhvZCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJnZXRQcm90byIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsImludm9rZSIsIl9fYXdhaXQiLCJ1bndyYXBwZWQiLCJpbmZvIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiZW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXRlcmF0b3JNZXRob2QiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIml0ZXIiLCJyZXZlcnNlIiwicG9wIiwic2tpcFRlbXBSZXNldCIsInByZXYiLCJjaGFyQXQiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwiVU5TQ09QQUJMRVMiLCJjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yIiwiSXRlcmF0b3JzQ29yZSIsInJldHVyblRoaXMiLCJJdGVyYWJsZSIsIkl0ZXJhdG9yQ29uc3RydWN0b3IiLCJERUZBVUxUIiwiSVNfU0VUIiwiQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlIiwibWV0aG9kcyIsIktFWSIsImdldEl0ZXJhdGlvbk1ldGhvZCIsIktJTkQiLCJkZWZhdWx0SXRlcmF0b3IiLCJJdGVyYWJsZVByb3RvdHlwZSIsIklOQ09SUkVDVF9WQUxVRVNfTkFNRSIsIm5hdGl2ZUl0ZXJhdG9yIiwiYW55TmF0aXZlSXRlcmF0b3IiLCJlbnRyaWVzIiwiQ09OVkVSVF9UT19TVFJJTkciLCJwb3MiLCJmaXJzdCIsInNlY29uZCIsInBvc2l0aW9uIiwic2l6ZSIsImNoYXJDb2RlQXQiLCJjb2RlQXQiLCJhUG9zc2libGVQcm90b3R5cGUiLCJDT1JSRUNUX1NFVFRFUiIsImNyZWF0ZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsIk1BVENIIiwiaXNSZWdFeHAiLCJET01JdGVyYWJsZXMiLCJDT0xMRUNUSU9OX05BTUUiLCJDb2xsZWN0aW9uIiwiQ29sbGVjdGlvblByb3RvdHlwZSIsIkFycmF5SXRlcmF0b3JNZXRob2RzIiwiQXJyYXlWYWx1ZXMiLCJhcnJheUxpa2UiLCJhcmd1bWVudHNMZW5ndGgiLCJtYXBmbiIsIm1hcHBpbmciLCJzY29wZSIsIlRpbWVvdXQiLCJjbGVhckZuIiwiX2lkIiwiX2NsZWFyRm4iLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJ1bnJlZiIsInJlZiIsImVucm9sbCIsIml0ZW0iLCJtc2VjcyIsIl9pZGxlVGltZW91dElkIiwiX2lkbGVUaW1lb3V0IiwidW5lbnJvbGwiLCJfdW5yZWZBY3RpdmUiLCJhY3RpdmUiLCJfb25UaW1lb3V0IiwicmVnaXN0ZXJJbW1lZGlhdGUiLCJtZXNzYWdlUHJlZml4Iiwib25HbG9iYWxNZXNzYWdlIiwibmV4dEhhbmRsZSIsInRhc2tzQnlIYW5kbGUiLCJjdXJyZW50bHlSdW5uaW5nQVRhc2siLCJkb2MiLCJhdHRhY2hUbyIsInJ1bklmUHJlc2VudCIsInBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMiLCJvbGRPbk1lc3NhZ2UiLCJjYW5Vc2VQb3N0TWVzc2FnZSIsImRvY3VtZW50RWxlbWVudCIsInNjcmlwdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsImF0dGFjaEV2ZW50IiwiY2FsbGJhY2siLCJlbXB0eU9iamVjdCIsImZyZWV6ZSIsImlzVW5kZWYiLCJ2IiwiaXNEZWYiLCJpc1RydWUiLCJpc1ByaW1pdGl2ZSIsIl90b1N0cmluZyIsImlzUGxhaW5PYmplY3QiLCJpc1ZhbGlkQXJyYXlJbmRleCIsInBhcnNlRmxvYXQiLCJpc0Zpbml0ZSIsImlzUHJvbWlzZSIsIkpTT04iLCJ0b051bWJlciIsIm1ha2VNYXAiLCJzdHIiLCJleHBlY3RzTG93ZXJDYXNlIiwibGlzdCIsImlzUmVzZXJ2ZWRBdHRyaWJ1dGUiLCJyZW1vdmUiLCJhcnIiLCJzcGxpY2UiLCJjYWNoZWQiLCJjYW1lbGl6ZVJFIiwiY2FtZWxpemUiLCJfIiwidG9VcHBlckNhc2UiLCJjYXBpdGFsaXplIiwiaHlwaGVuYXRlUkUiLCJoeXBoZW5hdGUiLCJjdHgiLCJib3VuZEZuIiwiX2xlbmd0aCIsInRvQXJyYXkiLCJzdGFydCIsInJldCIsImV4dGVuZCIsInRvIiwiX2Zyb20iLCJyZXMiLCJubyIsImlkZW50aXR5IiwibG9vc2VFcXVhbCIsImlzT2JqZWN0QSIsImlzT2JqZWN0QiIsImlzQXJyYXlBIiwiaXNBcnJheUIiLCJEYXRlIiwiZ2V0VGltZSIsImtleXNBIiwia2V5c0IiLCJsb29zZUluZGV4T2YiLCJBU1NFVF9UWVBFUyIsIkxJRkVDWUNMRV9IT09LUyIsImNvbmZpZyIsIm9wdGlvbk1lcmdlU3RyYXRlZ2llcyIsInNpbGVudCIsInByb2R1Y3Rpb25UaXAiLCJkZXZ0b29scyIsInBlcmZvcm1hbmNlIiwiZXJyb3JIYW5kbGVyIiwid2FybkhhbmRsZXIiLCJpZ25vcmVkRWxlbWVudHMiLCJrZXlDb2RlcyIsImlzUmVzZXJ2ZWRUYWciLCJpc1Jlc2VydmVkQXR0ciIsImlzVW5rbm93bkVsZW1lbnQiLCJnZXRUYWdOYW1lc3BhY2UiLCJwYXJzZVBsYXRmb3JtVGFnTmFtZSIsIm11c3RVc2VQcm9wIiwiX2xpZmVjeWNsZUhvb2tzIiwidW5pY29kZVJlZ0V4cCIsImRlZiIsImJhaWxSRSIsIlJlZ0V4cCIsIl9pc1NlcnZlciIsImhhc1Byb3RvIiwiaW5Ccm93c2VyIiwiaW5XZWV4IiwiV1hFbnZpcm9ubWVudCIsInBsYXRmb3JtIiwid2VleFBsYXRmb3JtIiwiVUEiLCJuYXZpZ2F0b3IiLCJpc0lFIiwiaXNJRTkiLCJpc0VkZ2UiLCJpc0lPUyIsImlzRkYiLCJuYXRpdmVXYXRjaCIsIndhdGNoIiwic3VwcG9ydHNQYXNzaXZlIiwib3B0cyIsImlzU2VydmVyUmVuZGVyaW5nIiwiVlVFX0VOViIsIl9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJpc05hdGl2ZSIsIkN0b3IiLCJfU2V0IiwiaGFzU3ltYm9sIiwiU2V0IiwiYWRkIiwiRGVwIiwic3VicyIsImFkZFN1YiIsInN1YiIsInJlbW92ZVN1YiIsImRlcGVuZCIsImFkZERlcCIsInVwZGF0ZSIsInRhcmdldFN0YWNrIiwicHVzaFRhcmdldCIsInBvcFRhcmdldCIsIlZOb2RlIiwiY2hpbGRyZW4iLCJ0ZXh0IiwiZWxtIiwiY29tcG9uZW50T3B0aW9ucyIsImFzeW5jRmFjdG9yeSIsImZuQ29udGV4dCIsImZuT3B0aW9ucyIsImZuU2NvcGVJZCIsImNvbXBvbmVudEluc3RhbmNlIiwicmF3IiwiaXNTdGF0aWMiLCJpc1Jvb3RJbnNlcnQiLCJpc0NvbW1lbnQiLCJpc0Nsb25lZCIsImlzT25jZSIsImFzeW5jTWV0YSIsImlzQXN5bmNQbGFjZWhvbGRlciIsInByb3RvdHlwZUFjY2Vzc29ycyIsImNoaWxkIiwiY3JlYXRlRW1wdHlWTm9kZSIsImNyZWF0ZVRleHRWTm9kZSIsImNsb25lVk5vZGUiLCJ2bm9kZSIsImNsb25lZCIsImFycmF5UHJvdG8iLCJhcnJheU1ldGhvZHMiLCJvcmlnaW5hbCIsImluc2VydGVkIiwib2IiLCJfX29iX18iLCJvYnNlcnZlQXJyYXkiLCJkZXAiLCJhcnJheUtleXMiLCJzaG91bGRPYnNlcnZlIiwidG9nZ2xlT2JzZXJ2aW5nIiwiT2JzZXJ2ZXIiLCJ2bUNvdW50IiwicHJvdG9BdWdtZW50IiwiY29weUF1Z21lbnQiLCJ3YWxrIiwiYXNSb290RGF0YSIsImlzRXh0ZW5zaWJsZSIsIl9pc1Z1ZSIsImRlZmluZVJlYWN0aXZlJCQxIiwiY3VzdG9tU2V0dGVyIiwic2hhbGxvdyIsImNoaWxkT2IiLCJkZXBlbmRBcnJheSIsIm5ld1ZhbCIsImRlbCIsInN0cmF0cyIsIm1lcmdlRGF0YSIsInRvVmFsIiwiZnJvbVZhbCIsIm1lcmdlRGF0YU9yRm4iLCJwYXJlbnRWYWwiLCJjaGlsZFZhbCIsInZtIiwiaW5zdGFuY2VEYXRhIiwiZGVmYXVsdERhdGEiLCJtZXJnZUhvb2siLCJob29rcyIsImRlZHVwZUhvb2tzIiwibWVyZ2VBc3NldHMiLCJob29rIiwia2V5JDEiLCJwcm9wcyIsImluamVjdCIsImNvbXB1dGVkIiwicHJvdmlkZSIsImRlZmF1bHRTdHJhdCIsIm1lcmdlT3B0aW9ucyIsIm5vcm1hbGl6ZVByb3BzIiwibm9ybWFsaXplZCIsIm5vcm1hbGl6ZUluamVjdCIsImRpcnMiLCJkaXJlY3RpdmVzIiwiZGVmJCQxIiwibm9ybWFsaXplRGlyZWN0aXZlcyIsIl9iYXNlIiwiZXh0ZW5kcyIsIm1peGlucyIsIm1lcmdlRmllbGQiLCJzdHJhdCIsInJlc29sdmVBc3NldCIsIndhcm5NaXNzaW5nIiwiYXNzZXRzIiwiY2FtZWxpemVkSWQiLCJQYXNjYWxDYXNlSWQiLCJ2YWxpZGF0ZVByb3AiLCJwcm9wT3B0aW9ucyIsInByb3BzRGF0YSIsImFic2VudCIsImJvb2xlYW5JbmRleCIsImdldFR5cGVJbmRleCIsInN0cmluZ0luZGV4IiwiZGVmYXVsdCIsIiRvcHRpb25zIiwiX3Byb3BzIiwiZ2V0VHlwZSIsImdldFByb3BEZWZhdWx0VmFsdWUiLCJwcmV2U2hvdWxkT2JzZXJ2ZSIsImlzU2FtZVR5cGUiLCJleHBlY3RlZFR5cGVzIiwiaGFuZGxlRXJyb3IiLCJjdXIiLCIkcGFyZW50IiwiZXJyb3JDYXB0dXJlZCIsImdsb2JhbEhhbmRsZUVycm9yIiwiaW52b2tlV2l0aEVycm9ySGFuZGxpbmciLCJfaGFuZGxlZCIsImxvZ0Vycm9yIiwidGltZXJGdW5jIiwiaXNVc2luZ01pY3JvVGFzayIsImNhbGxiYWNrcyIsInBlbmRpbmciLCJmbHVzaENhbGxiYWNrcyIsImNvcGllcyIsIm9ic2VydmVyIiwidGV4dE5vZGUiLCJjYiIsIl9yZXNvbHZlIiwic2Vlbk9iamVjdHMiLCJ0cmF2ZXJzZSIsIl90cmF2ZXJzZSIsInNlZW4iLCJpc0EiLCJpc0Zyb3plbiIsImRlcElkIiwibm9ybWFsaXplRXZlbnQiLCJwYXNzaXZlIiwib25jZSQkMSIsImNhcHR1cmUiLCJjcmVhdGVGbkludm9rZXIiLCJmbnMiLCJpbnZva2VyIiwiYXJndW1lbnRzJDEiLCJ1cGRhdGVMaXN0ZW5lcnMiLCJvbGRPbiIsInJlbW92ZSQkMSIsImNyZWF0ZU9uY2VIYW5kbGVyIiwib2xkIiwicGFyYW1zIiwibWVyZ2VWTm9kZUhvb2siLCJob29rS2V5Iiwib2xkSG9vayIsIndyYXBwZWRIb29rIiwibWVyZ2VkIiwiY2hlY2tQcm9wIiwiaGFzaCIsImFsdEtleSIsInByZXNlcnZlIiwibm9ybWFsaXplQ2hpbGRyZW4iLCJub3JtYWxpemVBcnJheUNoaWxkcmVuIiwibmVzdGVkSW5kZXgiLCJsYXN0SW5kZXgiLCJpc1RleHROb2RlIiwic2hpZnQiLCJfaXNWTGlzdCIsInJlc29sdmVJbmplY3QiLCJwcm92aWRlS2V5IiwiX3Byb3ZpZGVkIiwicHJvdmlkZURlZmF1bHQiLCJyZXNvbHZlU2xvdHMiLCJzbG90cyIsImF0dHJzIiwic2xvdCIsIm5hbWUkMSIsImlzV2hpdGVzcGFjZSIsIm5vcm1hbGl6ZVNjb3BlZFNsb3RzIiwibm9ybWFsU2xvdHMiLCJwcmV2U2xvdHMiLCJoYXNOb3JtYWxTbG90cyIsImlzU3RhYmxlIiwiJHN0YWJsZSIsIiRrZXkiLCJfbm9ybWFsaXplZCIsIiRoYXNOb3JtYWwiLCJub3JtYWxpemVTY29wZWRTbG90Iiwia2V5JDIiLCJwcm94eU5vcm1hbFNsb3QiLCJwcm94eSIsInJlbmRlckxpc3QiLCJyZW5kZXIiLCJyZW5kZXJTbG90IiwiZmFsbGJhY2siLCJiaW5kT2JqZWN0Iiwibm9kZXMiLCJzY29wZWRTbG90Rm4iLCIkc2NvcGVkU2xvdHMiLCIkc2xvdHMiLCIkY3JlYXRlRWxlbWVudCIsInJlc29sdmVGaWx0ZXIiLCJpc0tleU5vdE1hdGNoIiwiZXhwZWN0IiwiYWN0dWFsIiwiY2hlY2tLZXlDb2RlcyIsImV2ZW50S2V5Q29kZSIsImJ1aWx0SW5LZXlDb2RlIiwiZXZlbnRLZXlOYW1lIiwiYnVpbHRJbktleU5hbWUiLCJtYXBwZWRLZXlDb2RlIiwiYmluZE9iamVjdFByb3BzIiwiYXNQcm9wIiwiaXNTeW5jIiwibG9vcCIsImRvbVByb3BzIiwiY2FtZWxpemVkS2V5IiwiaHlwaGVuYXRlZEtleSIsIiRldmVudCIsInJlbmRlclN0YXRpYyIsImlzSW5Gb3IiLCJfc3RhdGljVHJlZXMiLCJ0cmVlIiwibWFya1N0YXRpYyIsInN0YXRpY1JlbmRlckZucyIsIl9yZW5kZXJQcm94eSIsIm1hcmtPbmNlIiwibWFya1N0YXRpY05vZGUiLCJiaW5kT2JqZWN0TGlzdGVuZXJzIiwiZXhpc3RpbmciLCJvdXJzIiwicmVzb2x2ZVNjb3BlZFNsb3RzIiwiaGFzRHluYW1pY0tleXMiLCJjb250ZW50SGFzaEtleSIsImJpbmREeW5hbWljS2V5cyIsImJhc2VPYmoiLCJwcmVwZW5kTW9kaWZpZXIiLCJpbnN0YWxsUmVuZGVySGVscGVycyIsIl9vIiwiX24iLCJfcyIsIl9sIiwiX3QiLCJfcSIsIl9pIiwiX20iLCJfZiIsIl9rIiwiX2IiLCJfdiIsIl9lIiwiX3UiLCJfZyIsIl9kIiwiX3AiLCJGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCIsImNvbnRleHRWbSIsInRoaXMkMSIsIl9vcmlnaW5hbCIsImlzQ29tcGlsZWQiLCJfY29tcGlsZWQiLCJuZWVkTm9ybWFsaXphdGlvbiIsImluamVjdGlvbnMiLCJzY29wZWRTbG90cyIsIl9zY29wZUlkIiwiX2MiLCJjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0IiwicmVuZGVyQ29udGV4dCIsImNsb25lIiwibWVyZ2VQcm9wcyIsImNvbXBvbmVudFZOb2RlSG9va3MiLCJpbml0IiwiaHlkcmF0aW5nIiwiX2lzRGVzdHJveWVkIiwia2VlcEFsaXZlIiwibW91bnRlZE5vZGUiLCJwcmVwYXRjaCIsIl9pc0NvbXBvbmVudCIsIl9wYXJlbnRWbm9kZSIsImlubGluZVRlbXBsYXRlIiwiY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSIsImFjdGl2ZUluc3RhbmNlIiwiJG1vdW50Iiwib2xkVm5vZGUiLCJwYXJlbnRWbm9kZSIsInJlbmRlckNoaWxkcmVuIiwibmV3U2NvcGVkU2xvdHMiLCJvbGRTY29wZWRTbG90cyIsImhhc0R5bmFtaWNTY29wZWRTbG90IiwibmVlZHNGb3JjZVVwZGF0ZSIsIl9yZW5kZXJDaGlsZHJlbiIsIiR2bm9kZSIsIl92bm9kZSIsIiRhdHRycyIsIiRsaXN0ZW5lcnMiLCJwcm9wS2V5cyIsIl9wcm9wS2V5cyIsIm9sZExpc3RlbmVycyIsIl9wYXJlbnRMaXN0ZW5lcnMiLCJ1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMiLCIkZm9yY2VVcGRhdGUiLCJ1cGRhdGVDaGlsZENvbXBvbmVudCIsImluc2VydCIsIl9pc01vdW50ZWQiLCJjYWxsSG9vayIsIl9pbmFjdGl2ZSIsImFjdGl2YXRlZENoaWxkcmVuIiwiYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsImRlc3Ryb3kiLCJkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQiLCJkaXJlY3QiLCJfZGlyZWN0SW5hY3RpdmUiLCJpc0luSW5hY3RpdmVUcmVlIiwiJGNoaWxkcmVuIiwiJGRlc3Ryb3kiLCJob29rc1RvTWVyZ2UiLCJjcmVhdGVDb21wb25lbnQiLCJiYXNlQ3RvciIsImNpZCIsImZhY3RvcnkiLCJlcnJvckNvbXAiLCJyZXNvbHZlZCIsIm93bmVyIiwiY3VycmVudFJlbmRlcmluZ0luc3RhbmNlIiwib3duZXJzIiwibG9hZGluZyIsImxvYWRpbmdDb21wIiwic3luYyIsInRpbWVyTG9hZGluZyIsInRpbWVyVGltZW91dCIsIiRvbiIsImZvcmNlUmVuZGVyIiwicmVuZGVyQ29tcGxldGVkIiwiZW5zdXJlQ3RvciIsImNvbXBvbmVudCIsImRlbGF5IiwicmVzb2x2ZUFzeW5jQ29tcG9uZW50IiwiY3JlYXRlQXN5bmNQbGFjZWhvbGRlciIsInJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMiLCJtb2RlbCIsInRyYW5zZm9ybU1vZGVsIiwiZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YSIsImZ1bmN0aW9uYWwiLCJ2bm9kZXMiLCJjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IiwibmF0aXZlT24iLCJhYnN0cmFjdCIsInRvTWVyZ2UiLCJfbWVyZ2VkIiwibWVyZ2VIb29rJDEiLCJpbnN0YWxsQ29tcG9uZW50SG9va3MiLCJmMSIsImYyIiwibm9ybWFsaXphdGlvblR5cGUiLCJhbHdheXNOb3JtYWxpemUiLCJpcyIsInNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuIiwicHJlIiwiYXBwbHlOUyIsImZvcmNlIiwiY2xhc3MiLCJyZWdpc3RlckRlZXBCaW5kaW5ncyIsIl9jcmVhdGVFbGVtZW50IiwiY29tcCIsImJhc2UiLCJnZXRGaXJzdENvbXBvbmVudENoaWxkIiwicmVtb3ZlJDEiLCIkb2ZmIiwiX3RhcmdldCIsIm9uY2VIYW5kbGVyIiwic2V0QWN0aXZlSW5zdGFuY2UiLCJwcmV2QWN0aXZlSW5zdGFuY2UiLCJqIiwiX2hhc0hvb2tFdmVudCIsIiRlbWl0Iiwid2FpdGluZyIsImZsdXNoaW5nIiwiY3VycmVudEZsdXNoVGltZXN0YW1wIiwiZ2V0Tm93IiwidGltZVN0YW1wIiwiZmx1c2hTY2hlZHVsZXJRdWV1ZSIsIndhdGNoZXIiLCJzb3J0IiwiYmVmb3JlIiwiYWN0aXZhdGVkUXVldWUiLCJ1cGRhdGVkUXVldWUiLCJjYWxsQWN0aXZhdGVkSG9va3MiLCJfd2F0Y2hlciIsImNhbGxVcGRhdGVkSG9va3MiLCJ1aWQkMiIsIldhdGNoZXIiLCJleHBPckZuIiwiaXNSZW5kZXJXYXRjaGVyIiwiX3dhdGNoZXJzIiwiZGVlcCIsInVzZXIiLCJsYXp5IiwiZGlydHkiLCJkZXBzIiwibmV3RGVwcyIsImRlcElkcyIsIm5ld0RlcElkcyIsImV4cHJlc3Npb24iLCJzZWdtZW50cyIsInBhcnNlUGF0aCIsImNsZWFudXBEZXBzIiwidG1wIiwicXVldWVXYXRjaGVyIiwib2xkVmFsdWUiLCJldmFsdWF0ZSIsInRlYXJkb3duIiwiX2lzQmVpbmdEZXN0cm95ZWQiLCJzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24iLCJzb3VyY2VLZXkiLCJpbml0U3RhdGUiLCJwcm9wc09wdGlvbnMiLCJpbml0UHJvcHMiLCJpbml0TWV0aG9kcyIsIl9kYXRhIiwiZ2V0RGF0YSIsImluaXREYXRhIiwid2F0Y2hlcnMiLCJfY29tcHV0ZWRXYXRjaGVycyIsImlzU1NSIiwidXNlckRlZiIsImNvbXB1dGVkV2F0Y2hlck9wdGlvbnMiLCJkZWZpbmVDb21wdXRlZCIsImluaXRDb21wdXRlZCIsImNyZWF0ZVdhdGNoZXIiLCJpbml0V2F0Y2giLCJzaG91bGRDYWNoZSIsImNyZWF0ZUNvbXB1dGVkR2V0dGVyIiwiY3JlYXRlR2V0dGVySW52b2tlciIsIiR3YXRjaCIsInVpZCQzIiwic3VwZXJPcHRpb25zIiwibW9kaWZpZWRPcHRpb25zIiwibW9kaWZpZWQiLCJsYXRlc3QiLCJzZWFsZWQiLCJzZWFsZWRPcHRpb25zIiwicmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyIsImV4dGVuZE9wdGlvbnMiLCJjb21wb25lbnRzIiwiVnVlIiwiX2luaXQiLCJpbml0RXh0ZW5kIiwiU3VwZXIiLCJTdXBlcklkIiwiY2FjaGVkQ3RvcnMiLCJfQ3RvciIsIlN1YiIsIkNvbXAiLCJpbml0UHJvcHMkMSIsImluaXRDb21wdXRlZCQxIiwibWl4aW4iLCJ1c2UiLCJnZXRDb21wb25lbnROYW1lIiwibWF0Y2hlcyIsInBhdHRlcm4iLCJwcnVuZUNhY2hlIiwia2VlcEFsaXZlSW5zdGFuY2UiLCJjYWNoZWROb2RlIiwicHJ1bmVDYWNoZUVudHJ5IiwiY3VycmVudCIsImNhY2hlZCQkMSIsIl91aWQiLCJ2bm9kZUNvbXBvbmVudE9wdGlvbnMiLCJfY29tcG9uZW50VGFnIiwiaW5pdEludGVybmFsQ29tcG9uZW50IiwiX3NlbGYiLCIkcm9vdCIsIiRyZWZzIiwiaW5pdExpZmVjeWNsZSIsIl9ldmVudHMiLCJpbml0RXZlbnRzIiwicGFyZW50RGF0YSIsImluaXRSZW5kZXIiLCJpbml0SW5qZWN0aW9ucyIsImluaXRQcm92aWRlIiwiaW5pdE1peGluIiwiZGF0YURlZiIsInByb3BzRGVmIiwiJHNldCIsIiRkZWxldGUiLCJpbW1lZGlhdGUiLCJzdGF0ZU1peGluIiwiaG9va1JFIiwiJG9uY2UiLCJpJDEiLCJjYnMiLCJldmVudHNNaXhpbiIsIl91cGRhdGUiLCJwcmV2RWwiLCIkZWwiLCJwcmV2Vm5vZGUiLCJyZXN0b3JlQWN0aXZlSW5zdGFuY2UiLCJfX3BhdGNoX18iLCJfX3Z1ZV9fIiwibGlmZWN5Y2xlTWl4aW4iLCIkbmV4dFRpY2siLCJfcmVuZGVyIiwicmVuZGVyTWl4aW4iLCJwYXR0ZXJuVHlwZXMiLCJidWlsdEluQ29tcG9uZW50cyIsIktlZXBBbGl2ZSIsImluY2x1ZGUiLCJleGNsdWRlIiwiTnVtYmVyIiwiY3JlYXRlZCIsImRlc3Ryb3llZCIsIm1vdW50ZWQiLCJwYXJzZUludCIsImNvbmZpZ0RlZiIsInV0aWwiLCJkZWZpbmVSZWFjdGl2ZSIsImRlbGV0ZSIsIm9ic2VydmFibGUiLCJwbHVnaW4iLCJpbnN0YWxsZWRQbHVnaW5zIiwiX2luc3RhbGxlZFBsdWdpbnMiLCJ1bnNoaWZ0IiwiaW5zdGFsbCIsImluaXRVc2UiLCJpbml0TWl4aW4kMSIsImRlZmluaXRpb24iLCJpbml0QXNzZXRSZWdpc3RlcnMiLCJpbml0R2xvYmFsQVBJIiwic3NyQ29udGV4dCIsImFjY2VwdFZhbHVlIiwiaXNFbnVtZXJhdGVkQXR0ciIsImlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSIsImlzQm9vbGVhbkF0dHIiLCJ4bGlua05TIiwiaXNYbGluayIsImdldFhsaW5rUHJvcCIsImlzRmFsc3lBdHRyVmFsdWUiLCJnZW5DbGFzc0ZvclZub2RlIiwicGFyZW50Tm9kZSIsImNoaWxkTm9kZSIsIm1lcmdlQ2xhc3NEYXRhIiwic3RhdGljQ2xhc3MiLCJkeW5hbWljQ2xhc3MiLCJzdHJpbmdpZnlDbGFzcyIsInJlbmRlckNsYXNzIiwic3RyaW5naWZpZWQiLCJzdHJpbmdpZnlBcnJheSIsInN0cmluZ2lmeU9iamVjdCIsIm5hbWVzcGFjZU1hcCIsInN2ZyIsIm1hdGgiLCJpc0hUTUxUYWciLCJpc1NWRyIsInVua25vd25FbGVtZW50Q2FjaGUiLCJpc1RleHRJbnB1dFR5cGUiLCJub2RlT3BzIiwidGFnTmFtZSIsIm11bHRpcGxlIiwic2V0QXR0cmlidXRlIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlQ29tbWVudCIsImluc2VydEJlZm9yZSIsIm5ld05vZGUiLCJyZWZlcmVuY2VOb2RlIiwibmV4dFNpYmxpbmciLCJzZXRUZXh0Q29udGVudCIsInRleHRDb250ZW50Iiwic2V0U3R5bGVTY29wZSIsInNjb3BlSWQiLCJyZWdpc3RlclJlZiIsImlzUmVtb3ZhbCIsInJlZnMiLCJyZWZJbkZvciIsImVtcHR5Tm9kZSIsInNhbWVWbm9kZSIsInR5cGVBIiwidHlwZUIiLCJzYW1lSW5wdXRUeXBlIiwiY3JlYXRlS2V5VG9PbGRJZHgiLCJiZWdpbklkeCIsImVuZElkeCIsInVwZGF0ZURpcmVjdGl2ZXMiLCJvbGREaXIiLCJpc0NyZWF0ZSIsImlzRGVzdHJveSIsIm9sZERpcnMiLCJub3JtYWxpemVEaXJlY3RpdmVzJDEiLCJuZXdEaXJzIiwiZGlyc1dpdGhJbnNlcnQiLCJkaXJzV2l0aFBvc3RwYXRjaCIsIm9sZEFyZyIsImNhbGxIb29rJDEiLCJjb21wb25lbnRVcGRhdGVkIiwiY2FsbEluc2VydCIsImVtcHR5TW9kaWZpZXJzIiwibW9kaWZpZXJzIiwiZ2V0UmF3RGlyTmFtZSIsInJhd05hbWUiLCJiYXNlTW9kdWxlcyIsInVwZGF0ZUF0dHJzIiwiaW5oZXJpdEF0dHJzIiwib2xkQXR0cnMiLCJzZXRBdHRyIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJiYXNlU2V0QXR0ciIsImNvbnZlcnRFbnVtZXJhdGVkVmFsdWUiLCJzZXRBdHRyaWJ1dGVOUyIsIl9faWVwaCIsImJsb2NrZXIiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidXBkYXRlQ2xhc3MiLCJvbGREYXRhIiwiY2xzIiwidHJhbnNpdGlvbkNsYXNzIiwiX3RyYW5zaXRpb25DbGFzc2VzIiwiX3ByZXZDbGFzcyIsInRhcmdldCQxIiwia2xhc3MiLCJjcmVhdGVPbmNlSGFuZGxlciQxIiwicmVtb3ZlJDIiLCJ1c2VNaWNyb3Rhc2tGaXgiLCJhZGQkMSIsImF0dGFjaGVkVGltZXN0YW1wIiwiX3dyYXBwZXIiLCJjdXJyZW50VGFyZ2V0Iiwib3duZXJEb2N1bWVudCIsInVwZGF0ZURPTUxpc3RlbmVycyIsImNoYW5nZSIsIm5vcm1hbGl6ZUV2ZW50cyIsInN2Z0NvbnRhaW5lciIsImV2ZW50cyIsInVwZGF0ZURPTVByb3BzIiwib2xkUHJvcHMiLCJjaGlsZE5vZGVzIiwiX3ZhbHVlIiwic3RyQ3VyIiwic2hvdWxkVXBkYXRlVmFsdWUiLCJpbm5lckhUTUwiLCJmaXJzdENoaWxkIiwiY2hlY2tWYWwiLCJjb21wb3NpbmciLCJub3RJbkZvY3VzIiwiYWN0aXZlRWxlbWVudCIsImlzTm90SW5Gb2N1c0FuZERpcnR5IiwiX3ZNb2RpZmllcnMiLCJudW1iZXIiLCJ0cmltIiwiaXNEaXJ0eVdpdGhNb2RpZmllcnMiLCJwYXJzZVN0eWxlVGV4dCIsImNzc1RleHQiLCJwcm9wZXJ0eURlbGltaXRlciIsIm5vcm1hbGl6ZVN0eWxlRGF0YSIsIm5vcm1hbGl6ZVN0eWxlQmluZGluZyIsInN0YXRpY1N0eWxlIiwiYmluZGluZ1N0eWxlIiwiZW1wdHlTdHlsZSIsImNzc1ZhclJFIiwiaW1wb3J0YW50UkUiLCJzZXRQcm9wIiwic2V0UHJvcGVydHkiLCJub3JtYWxpemVkTmFtZSIsInZlbmRvck5hbWVzIiwiY2FwTmFtZSIsInVwZGF0ZVN0eWxlIiwib2xkU3RhdGljU3R5bGUiLCJvbGRTdHlsZUJpbmRpbmciLCJub3JtYWxpemVkU3R5bGUiLCJvbGRTdHlsZSIsIm5ld1N0eWxlIiwiY2hlY2tDaGlsZCIsInN0eWxlRGF0YSIsImdldFN0eWxlIiwid2hpdGVzcGFjZVJFIiwiYWRkQ2xhc3MiLCJjbGFzc0xpc3QiLCJnZXRBdHRyaWJ1dGUiLCJyZW1vdmVDbGFzcyIsInRhciIsInJlc29sdmVUcmFuc2l0aW9uIiwiY3NzIiwiYXV0b0Nzc1RyYW5zaXRpb24iLCJlbnRlckNsYXNzIiwiZW50ZXJUb0NsYXNzIiwiZW50ZXJBY3RpdmVDbGFzcyIsImxlYXZlQ2xhc3MiLCJsZWF2ZVRvQ2xhc3MiLCJsZWF2ZUFjdGl2ZUNsYXNzIiwiaGFzVHJhbnNpdGlvbiIsInRyYW5zaXRpb25Qcm9wIiwidHJhbnNpdGlvbkVuZEV2ZW50IiwiYW5pbWF0aW9uUHJvcCIsImFuaW1hdGlvbkVuZEV2ZW50Iiwib250cmFuc2l0aW9uZW5kIiwib253ZWJraXR0cmFuc2l0aW9uZW5kIiwib25hbmltYXRpb25lbmQiLCJvbndlYmtpdGFuaW1hdGlvbmVuZCIsInJhZiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm5leHRGcmFtZSIsImFkZFRyYW5zaXRpb25DbGFzcyIsInRyYW5zaXRpb25DbGFzc2VzIiwicmVtb3ZlVHJhbnNpdGlvbkNsYXNzIiwid2hlblRyYW5zaXRpb25FbmRzIiwiZXhwZWN0ZWRUeXBlIiwiZ2V0VHJhbnNpdGlvbkluZm8iLCJwcm9wQ291bnQiLCJlbmRlZCIsImVuZCIsIm9uRW5kIiwidHJhbnNmb3JtUkUiLCJzdHlsZXMiLCJnZXRDb21wdXRlZFN0eWxlIiwidHJhbnNpdGlvbkRlbGF5cyIsInRyYW5zaXRpb25EdXJhdGlvbnMiLCJ0cmFuc2l0aW9uVGltZW91dCIsImdldFRpbWVvdXQiLCJhbmltYXRpb25EZWxheXMiLCJhbmltYXRpb25EdXJhdGlvbnMiLCJhbmltYXRpb25UaW1lb3V0IiwiaGFzVHJhbnNmb3JtIiwiZGVsYXlzIiwiZHVyYXRpb25zIiwidG9NcyIsInRvZ2dsZURpc3BsYXkiLCJfbGVhdmVDYiIsImNhbmNlbGxlZCIsInRyYW5zaXRpb24iLCJfZW50ZXJDYiIsIm5vZGVUeXBlIiwiYXBwZWFyQ2xhc3MiLCJhcHBlYXJUb0NsYXNzIiwiYXBwZWFyQWN0aXZlQ2xhc3MiLCJiZWZvcmVFbnRlciIsImFmdGVyRW50ZXIiLCJlbnRlckNhbmNlbGxlZCIsImJlZm9yZUFwcGVhciIsImFwcGVhciIsImFmdGVyQXBwZWFyIiwiYXBwZWFyQ2FuY2VsbGVkIiwiZHVyYXRpb24iLCJ0cmFuc2l0aW9uTm9kZSIsImlzQXBwZWFyIiwic3RhcnRDbGFzcyIsImFjdGl2ZUNsYXNzIiwidG9DbGFzcyIsImJlZm9yZUVudGVySG9vayIsImVudGVySG9vayIsImFmdGVyRW50ZXJIb29rIiwiZW50ZXJDYW5jZWxsZWRIb29rIiwiZXhwbGljaXRFbnRlckR1cmF0aW9uIiwiZXhwZWN0c0NTUyIsInVzZXJXYW50c0NvbnRyb2wiLCJnZXRIb29rQXJndW1lbnRzTGVuZ3RoIiwic2hvdyIsInBlbmRpbmdOb2RlIiwiX3BlbmRpbmciLCJpc1ZhbGlkRHVyYXRpb24iLCJsZWF2ZSIsInJtIiwiYmVmb3JlTGVhdmUiLCJhZnRlckxlYXZlIiwibGVhdmVDYW5jZWxsZWQiLCJkZWxheUxlYXZlIiwiZXhwbGljaXRMZWF2ZUR1cmF0aW9uIiwicGVyZm9ybUxlYXZlIiwiaW52b2tlckZucyIsIl9lbnRlciIsInBhdGNoIiwiYmFja2VuZCIsInJlbW92ZU5vZGUiLCJjcmVhdGVFbG0iLCJpbnNlcnRlZFZub2RlUXVldWUiLCJwYXJlbnRFbG0iLCJyZWZFbG0iLCJuZXN0ZWQiLCJvd25lckFycmF5IiwiaXNSZWFjdGl2YXRlZCIsImluaXRDb21wb25lbnQiLCJpbm5lck5vZGUiLCJhY3RpdmF0ZSIsInJlYWN0aXZhdGVDb21wb25lbnQiLCJzZXRTY29wZSIsImNyZWF0ZUNoaWxkcmVuIiwiaW52b2tlQ3JlYXRlSG9va3MiLCJwZW5kaW5nSW5zZXJ0IiwiaXNQYXRjaGFibGUiLCJyZWYkJDEiLCJhbmNlc3RvciIsImFkZFZub2RlcyIsInN0YXJ0SWR4IiwiaW52b2tlRGVzdHJveUhvb2siLCJyZW1vdmVWbm9kZXMiLCJjaCIsInJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2siLCJjaGlsZEVsbSIsImNyZWF0ZVJtQ2IiLCJmaW5kSWR4SW5PbGQiLCJvbGRDaCIsInBhdGNoVm5vZGUiLCJyZW1vdmVPbmx5IiwiaHlkcmF0ZSIsIm5ld0NoIiwib2xkS2V5VG9JZHgiLCJpZHhJbk9sZCIsInZub2RlVG9Nb3ZlIiwib2xkU3RhcnRJZHgiLCJuZXdTdGFydElkeCIsIm9sZEVuZElkeCIsIm9sZFN0YXJ0Vm5vZGUiLCJvbGRFbmRWbm9kZSIsIm5ld0VuZElkeCIsIm5ld1N0YXJ0Vm5vZGUiLCJuZXdFbmRWbm9kZSIsImNhbk1vdmUiLCJ1cGRhdGVDaGlsZHJlbiIsInBvc3RwYXRjaCIsImludm9rZUluc2VydEhvb2siLCJpbml0aWFsIiwiaXNSZW5kZXJlZE1vZHVsZSIsImluVlByZSIsImhhc0NoaWxkTm9kZXMiLCJjaGlsZHJlbk1hdGNoIiwiZnVsbEludm9rZSIsImlzSW5pdGlhbFBhdGNoIiwiaXNSZWFsRWxlbWVudCIsImhhc0F0dHJpYnV0ZSIsIm9sZEVsbSIsInBhdGNoYWJsZSIsImkkMiIsImNyZWF0ZVBhdGNoRnVuY3Rpb24iLCJ2bW9kZWwiLCJ0cmlnZ2VyIiwiZGlyZWN0aXZlIiwiX3ZPcHRpb25zIiwic2V0U2VsZWN0ZWQiLCJnZXRWYWx1ZSIsIm9uQ29tcG9zaXRpb25TdGFydCIsIm9uQ29tcG9zaXRpb25FbmQiLCJwcmV2T3B0aW9ucyIsImN1ck9wdGlvbnMiLCJoYXNOb01hdGNoaW5nT3B0aW9uIiwiYWN0dWFsbHlTZXRTZWxlY3RlZCIsImlzTXVsdGlwbGUiLCJzZWxlY3RlZCIsIm9wdGlvbiIsInNlbGVjdGVkSW5kZXgiLCJsb2NhdGVOb2RlIiwicGxhdGZvcm1EaXJlY3RpdmVzIiwidHJhbnNpdGlvbiQkMSIsIm9yaWdpbmFsRGlzcGxheSIsIl9fdk9yaWdpbmFsRGlzcGxheSIsInVuYmluZCIsInRyYW5zaXRpb25Qcm9wcyIsImdldFJlYWxDaGlsZCIsImNvbXBPcHRpb25zIiwiZXh0cmFjdFRyYW5zaXRpb25EYXRhIiwicGxhY2Vob2xkZXIiLCJoIiwicmF3Q2hpbGQiLCJpc05vdFRleHROb2RlIiwiaXNWU2hvd0RpcmVjdGl2ZSIsIlRyYW5zaXRpb24iLCJoYXNQYXJlbnRUcmFuc2l0aW9uIiwiX2xlYXZpbmciLCJvbGRSYXdDaGlsZCIsIm9sZENoaWxkIiwiaXNTYW1lQ2hpbGQiLCJkZWxheWVkTGVhdmUiLCJtb3ZlQ2xhc3MiLCJjYWxsUGVuZGluZ0NicyIsIl9tb3ZlQ2IiLCJyZWNvcmRQb3NpdGlvbiIsIm5ld1BvcyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImFwcGx5VHJhbnNsYXRpb24iLCJvbGRQb3MiLCJkeCIsImxlZnQiLCJkeSIsInRvcCIsIm1vdmVkIiwidHJhbnNmb3JtIiwiV2Via2l0VHJhbnNmb3JtIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwicGxhdGZvcm1Db21wb25lbnRzIiwiVHJhbnNpdGlvbkdyb3VwIiwiYmVmb3JlTW91bnQiLCJrZXB0IiwicHJldkNoaWxkcmVuIiwicmF3Q2hpbGRyZW4iLCJ0cmFuc2l0aW9uRGF0YSIsInJlbW92ZWQiLCJjJDEiLCJ1cGRhdGVkIiwiaGFzTW92ZSIsIl9yZWZsb3ciLCJib2R5Iiwib2Zmc2V0SGVpZ2h0IiwicHJvcGVydHlOYW1lIiwiX2hhc01vdmUiLCJjbG9uZU5vZGUiLCJhdHRyIiwiSFRNTFVua25vd25FbGVtZW50IiwiSFRNTEVsZW1lbnQiLCJ1cGRhdGVDb21wb25lbnQiLCJtb3VudENvbXBvbmVudCIsInF1ZXJ5U2VsZWN0b3IiLCJxdWVyeSIsInJlZ2V4cCIsInVybCIsIlVSTCIsInNlYXJjaFBhcmFtcyIsInBhdGhuYW1lIiwidG9KU09OIiwiaHJlZiIsIlVSTFNlYXJjaFBhcmFtcyIsInVzZXJuYW1lIiwiX2giLCJfdm0iLCJjbGFzc05hbWVzIiwicmVzdCIsImFzc2lnbiIsIm5vdEFSZWdFeHAiLCJjb3JyZWN0SXNSZWdFeHBMb2dpYyIsIm5hdGl2ZUVuZHNXaXRoIiwiZW5kc1dpdGgiLCJDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyIsInNlYXJjaFN0cmluZyIsImVuZFBvc2l0aW9uIiwic2VhcmNoIiwibmF0aXZlU3RhcnRzV2l0aCIsInN0YXJ0c1dpdGgiLCJFT0YiLCJVU0VfTkFUSVZFX1VSTCIsImFycmF5RnJvbSIsInRvQVNDSUkiLCJVUkxTZWFyY2hQYXJhbXNNb2R1bGUiLCJOYXRpdmVVUkwiLCJnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlIiwiZ2V0U3RhdGUiLCJnZXRJbnRlcm5hbFVSTFN0YXRlIiwicG93IiwiQUxQSEEiLCJBTFBIQU5VTUVSSUMiLCJESUdJVCIsIkhFWF9TVEFSVCIsIk9DVCIsIkRFQyIsIkhFWCIsIkZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlQiLCJGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UX0VYQ0xVRElOR19QRVJDRU5UIiwiTEVBRElOR19BTkRfVFJBSUxJTkdfQzBfQ09OVFJPTF9PUl9TUEFDRSIsIlRBQl9BTkRfTkVXX0xJTkUiLCJwYXJzZUhvc3QiLCJjb2RlUG9pbnRzIiwicGFyc2VJUHY2IiwiaXNTcGVjaWFsIiwicGFyc2VJUHY0IiwicGVyY2VudEVuY29kZSIsIkMwQ29udHJvbFBlcmNlbnRFbmNvZGVTZXQiLCJwYXJ0c0xlbmd0aCIsIm51bWJlcnMiLCJwYXJ0IiwicmFkaXgiLCJpcHY0IiwicGFydHMiLCJudW1iZXJzU2VlbiIsImlwdjRQaWVjZSIsInN3YXBzIiwic3dhcCIsImFkZHJlc3MiLCJwaWVjZUluZGV4IiwiY29tcHJlc3MiLCJwb2ludGVyIiwiY2hhciIsInNlcmlhbGl6ZUhvc3QiLCJpZ25vcmUwIiwiaXB2NiIsIm1heEluZGV4IiwibWF4TGVuZ3RoIiwiY3VyclN0YXJ0IiwiY3Vyckxlbmd0aCIsImZpbmRMb25nZXN0WmVyb1NlcXVlbmNlIiwiZnJhZ21lbnRQZXJjZW50RW5jb2RlU2V0IiwicGF0aFBlcmNlbnRFbmNvZGVTZXQiLCJ1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQiLCJjb2RlIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic3BlY2lhbFNjaGVtZXMiLCJmdHAiLCJmaWxlIiwiaHR0cCIsImh0dHBzIiwid3MiLCJ3c3MiLCJzY2hlbWUiLCJpbmNsdWRlc0NyZWRlbnRpYWxzIiwicGFzc3dvcmQiLCJjYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQiLCJjYW5ub3RCZUFCYXNlVVJMIiwiaXNXaW5kb3dzRHJpdmVMZXR0ZXIiLCJzdGFydHNXaXRoV2luZG93c0RyaXZlTGV0dGVyIiwidGhpcmQiLCJzaG9ydGVuVVJMc1BhdGgiLCJwYXRoU2l6ZSIsImlzU2luZ2xlRG90Iiwic2VnbWVudCIsIlNDSEVNRV9TVEFSVCIsIlNDSEVNRSIsIk5PX1NDSEVNRSIsIlNQRUNJQUxfUkVMQVRJVkVfT1JfQVVUSE9SSVRZIiwiUEFUSF9PUl9BVVRIT1JJVFkiLCJSRUxBVElWRSIsIlJFTEFUSVZFX1NMQVNIIiwiU1BFQ0lBTF9BVVRIT1JJVFlfU0xBU0hFUyIsIlNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTIiwiQVVUSE9SSVRZIiwiSE9TVCIsIkhPU1ROQU1FIiwiUE9SVCIsIkZJTEUiLCJGSUxFX1NMQVNIIiwiRklMRV9IT1NUIiwiUEFUSF9TVEFSVCIsIlBBVEgiLCJDQU5OT1RfQkVfQV9CQVNFX1VSTF9QQVRIIiwiUVVFUlkiLCJGUkFHTUVOVCIsInBhcnNlVVJMIiwic3RhdGVPdmVycmlkZSIsImJ1ZmZlckNvZGVQb2ludHMiLCJmYWlsdXJlIiwiYnVmZmVyIiwic2VlbkF0Iiwic2VlbkJyYWNrZXQiLCJzZWVuUGFzc3dvcmRUb2tlbiIsImZyYWdtZW50IiwiY29kZVBvaW50IiwiZW5jb2RlZENvZGVQb2ludHMiLCJVUkxDb25zdHJ1Y3RvciIsImJhc2VTdGF0ZSIsInVybFN0cmluZyIsInNlYXJjaFBhcmFtc1N0YXRlIiwidXBkYXRlU2VhcmNoUGFyYW1zIiwidXBkYXRlVVJMIiwic2VyaWFsaXplVVJMIiwib3JpZ2luIiwiZ2V0T3JpZ2luIiwiZ2V0UHJvdG9jb2wiLCJnZXRVc2VybmFtZSIsImdldFBhc3N3b3JkIiwiZ2V0SG9zdCIsImhvc3RuYW1lIiwiZ2V0SG9zdG5hbWUiLCJnZXRQb3J0IiwiZ2V0UGF0aG5hbWUiLCJnZXRTZWFyY2giLCJnZXRTZWFyY2hQYXJhbXMiLCJnZXRIYXNoIiwiVVJMUHJvdG90eXBlIiwib3V0cHV0IiwiYWNjZXNzb3JEZXNjcmlwdG9yIiwibmF0aXZlQ3JlYXRlT2JqZWN0VVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwibmF0aXZlUmV2b2tlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiYmxvYiIsInBvaW50IiwibmF0aXZlQXNzaWduIiwiQSIsIkIiLCJjaHIiLCJUIiwicmVnZXhOb25BU0NJSSIsInJlZ2V4U2VwYXJhdG9ycyIsIk9WRVJGTE9XX0VSUk9SIiwic3RyaW5nRnJvbUNoYXJDb2RlIiwiZnJvbUNoYXJDb2RlIiwiZGlnaXRUb0Jhc2ljIiwiZGlnaXQiLCJhZGFwdCIsImRlbHRhIiwibnVtUG9pbnRzIiwiZmlyc3RUaW1lIiwiayIsImJhc2VNaW51c1RNaW4iLCJlbmNvZGUiLCJjdXJyZW50VmFsdWUiLCJpbnB1dExlbmd0aCIsImV4dHJhIiwidWNzMmRlY29kZSIsImJpYXMiLCJiYXNpY0xlbmd0aCIsImhhbmRsZWRDUENvdW50IiwiaGFuZGxlZENQQ291bnRQbHVzT25lIiwiUmFuZ2VFcnJvciIsInEiLCJxTWludXNUIiwiYmFzZU1pbnVzVCIsImxhYmVsIiwiZW5jb2RlZCIsImxhYmVscyIsImdldEl0ZXJhdG9yIiwiSGVhZGVycyIsImdldEludGVybmFsUGFyYW1zU3RhdGUiLCJnZXRJbnRlcm5hbEl0ZXJhdG9yU3RhdGUiLCJVUkxfU0VBUkNIX1BBUkFNUyIsInBsdXMiLCJzZXF1ZW5jZXMiLCJwZXJjZW50U2VxdWVuY2UiLCJieXRlcyIsInBlcmNlbnREZWNvZGUiLCJzZXF1ZW5jZSIsImRlY29kZVVSSUNvbXBvbmVudCIsImRlc2VyaWFsaXplIiwic2VyaWFsaXplIiwicGFyc2VTZWFyY2hQYXJhbXMiLCJhdHRyaWJ1dGUiLCJhdHRyaWJ1dGVzIiwidmFsaWRhdGVBcmd1bWVudHNMZW5ndGgiLCJwYXNzZWQiLCJyZXF1aXJlZCIsIlVSTFNlYXJjaFBhcmFtc0l0ZXJhdG9yIiwiVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IiLCJlbnRyeUl0ZXJhdG9yIiwiZW50cnlOZXh0IiwiVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlIiwiYXBwZW5kIiwiZ2V0QWxsIiwiZm91bmQiLCJlbnRyaWVzSW5kZXgiLCJzbGljZUluZGV4IiwiaGVhZGVycyIsImlzUm9vdFVybCIsInNob3djYXNlIiwiaGFzVnVlIiwiaXNQdWJsaWMiLCJzbHVnIiwiYXBwZWFyYW5jZSIsIm91dGxpbmVkIiwic2F2aW5nRXJyb3IiLCJjbGljayIsInNhdmVTaG93Y2FzZSIsInNhdmluZyIsImlzTG9hZGluZyIsInZ1ZURvY3NVUkwiLCJyZWwiLCJpY29uVVJMIiwiYWx0IiwidnVlVmVyc2lvbiIsImZyYW1ld29yayIsImltZ1BhdGgiLCJ1aSIsImhhc1NTUiIsInBsdWdpbnMiLCJfd2l0aFN0cmlwcGVkIiwibm9ybWFsaXplQ29tcG9uZW50Iiwic2NyaXB0RXhwb3J0cyIsImZ1bmN0aW9uYWxUZW1wbGF0ZSIsImluamVjdFN0eWxlcyIsIm1vZHVsZUlkZW50aWZpZXIiLCJzaGFkb3dNb2RlIiwiX19WVUVfU1NSX0NPTlRFWFRfXyIsIl9yZWdpc3RlcmVkQ29tcG9uZW50cyIsIl9zc3JSZWdpc3RlciIsInNoYWRvd1Jvb3QiLCJfaW5qZWN0U3R5bGVzIiwib3JpZ2luYWxSZW5kZXIiLCJiZWZvcmVDcmVhdGUiLCJfX2ZpbGUiLCJzaXppbmciLCJoZWlnaHQiLCJmb250U2l6ZSIsInJvdW5kZWQiLCJwYWRkaW5nIiwiY29sb3IiLCJiZyIsIm91dGxpbmUiLCJob3ZlclN0YXRlIiwiTG9nb0ljb24iLCJUd2l0dGVySWNvbiIsIkdpdGh1Ykljb24iLCJJbmZvSWNvbiIsIlBsdWdpbnNJY29uIiwiTW9kdWxlc0ljb24iLCJFeHBsb3JlRGF0YUl0ZW0iLCJBcHBCdXR0b24iLCJjdXJyZW50VGFiIiwiZGV0ZWN0IiwiX3RpbWVyIiwic2VuZFRvQmFja2dyb3VuZCIsInJlcXVpcmUiLCIkYnJvd3NlciIsIkFwcCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGlCQUFWRixHQUFzQkEsR0FBU0EsRUFBTUcsV0FBWSxPQUFPSCxFQUNoRixJQUFJSSxFQUFLWCxPQUFPWSxPQUFPLE1BR3ZCLEdBRkExQixFQUFvQmtCLEVBQUVPLEdBQ3RCWCxPQUFPQyxlQUFlVSxFQUFJLFVBQVcsQ0FBRVQsWUFBWSxFQUFNSyxNQUFPQSxJQUN0RCxFQUFQRSxHQUE0Qixp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LGlDQVFBLGlFQUNBLGVBREEsb0JBR0Esd0NBQ0EsSUFDQSx5QkFDQSw2QkFNQSx5Q0FMQSx1QkFDQSwrQkFDQSxZQUNBLFVBSUEsU0FDQSxjQUlBLGtCQTNCQSxVQTRCQSxvQkFDQSxhQUNBLGlCQUNBLFdBQ0EsU0FDQSxjQWpDQSwwREFxQ0EsWUFDQSxpQkF0Q0EsK0RDclZFLEVUd2RvQixJU3RkcEIsRUFDQSxLQUNBLEtBQ0EsTUF1QkYsRUFBVWw4RCxRQUFRdzlELE9BQVMsZ0JBQ1osUSxRQ25DZnQvRCxPQUFPeUksUUFBVW00RCxFQUFRLElBQ3pCN3VCLElBQUkxeUMsVUFBVXdoRSxTQUFXN2dFLE9BQU95SSxRQUdoQyxJQUFJc3BDLElBQUksQ0FDTng1QixHQUFJLE9BQ0o0cEIsT0FBUSxTQUFBMnBCLEdBQUMsT0FBSUEsRUFBRWdWIiwiZmlsZSI6InBvcHVwL3BvcHVwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDI1MCk7XG4iLCJ2YXIgY2hlY2sgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICYmIGl0Lk1hdGggPT0gTWF0aCAmJiBpdDtcbn07XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG5tb2R1bGUuZXhwb3J0cyA9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBjaGVjayh0eXBlb2YgZ2xvYmFsVGhpcyA9PSAnb2JqZWN0JyAmJiBnbG9iYWxUaGlzKSB8fFxuICBjaGVjayh0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdykgfHxcbiAgY2hlY2sodHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZikgfHxcbiAgY2hlY2sodHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcbnZhciBVU0VfU1lNQk9MX0FTX1VJRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZCcpO1xuXG52YXIgV2VsbEtub3duU3ltYm9sc1N0b3JlID0gc2hhcmVkKCd3a3MnKTtcbnZhciBTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIGNyZWF0ZVdlbGxLbm93blN5bWJvbCA9IFVTRV9TWU1CT0xfQVNfVUlEID8gU3ltYm9sIDogU3ltYm9sICYmIFN5bWJvbC53aXRob3V0U2V0dGVyIHx8IHVpZDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICBpZiAoIWhhcyhXZWxsS25vd25TeW1ib2xzU3RvcmUsIG5hbWUpKSB7XG4gICAgaWYgKE5BVElWRV9TWU1CT0wgJiYgaGFzKFN5bWJvbCwgbmFtZSkpIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IFN5bWJvbFtuYW1lXTtcbiAgICBlbHNlIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IGNyZWF0ZVdlbGxLbm93blN5bWJvbCgnU3ltYm9sLicgKyBuYW1lKTtcbiAgfSByZXR1cm4gV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBhbiBvYmplY3QnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAxLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KVsxXSAhPSA3O1xufSk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xuXG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IG5hdGl2ZURlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG5cbi8qXG4gIG9wdGlvbnMudGFyZ2V0ICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XG4gIG9wdGlvbnMuZ2xvYmFsICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgb3B0aW9ucy5zdGF0ICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5wcm90byAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5yZWFsICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMuZm9yY2VkICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gIG9wdGlvbnMuYmluZCAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLndyYXAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMudW5zYWZlICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcbiAgb3B0aW9ucy5zaGFtICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgb3B0aW9ucy5lbnVtZXJhYmxlICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gIG9wdGlvbnMubm9UYXJnZXRHZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7XG4gIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDtcbiAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsO1xuICB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0O1xuICB2YXIgRk9SQ0VELCB0YXJnZXQsIGtleSwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZVByb3BlcnR5LCBkZXNjcmlwdG9yO1xuICBpZiAoR0xPQkFMKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsO1xuICB9IGVsc2UgaWYgKFNUQVRJQykge1xuICAgIHRhcmdldCA9IGdsb2JhbFtUQVJHRVRdIHx8IHNldEdsb2JhbChUQVJHRVQsIHt9KTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQgPSAoZ2xvYmFsW1RBUkdFVF0gfHwge30pLnByb3RvdHlwZTtcbiAgfVxuICBpZiAodGFyZ2V0KSBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICBzb3VyY2VQcm9wZXJ0eSA9IHNvdXJjZVtrZXldO1xuICAgIGlmIChvcHRpb25zLm5vVGFyZ2V0R2V0KSB7XG4gICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcbiAgICAgIHRhcmdldFByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIH0gZWxzZSB0YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFtrZXldO1xuICAgIEZPUkNFRCA9IGlzRm9yY2VkKEdMT0JBTCA/IGtleSA6IFRBUkdFVCArIChTVEFUSUMgPyAnLicgOiAnIycpICsga2V5LCBvcHRpb25zLmZvcmNlZCk7XG4gICAgLy8gY29udGFpbmVkIGluIHRhcmdldFxuICAgIGlmICghRk9SQ0VEICYmIHRhcmdldFByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc291cmNlUHJvcGVydHkgPT09IHR5cGVvZiB0YXJnZXRQcm9wZXJ0eSkgY29udGludWU7XG4gICAgICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgICBpZiAob3B0aW9ucy5zaGFtIHx8ICh0YXJnZXRQcm9wZXJ0eSAmJiB0YXJnZXRQcm9wZXJ0eS5zaGFtKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuICAgIH1cbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNvdXJjZVByb3BlcnR5LCBvcHRpb25zKTtcbiAgfVxufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBrZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5lbmZvcmNlO1xudmFyIFRFTVBMQVRFID0gU3RyaW5nKFN0cmluZykuc3BsaXQoJ1N0cmluZycpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICB2YXIgdW5zYWZlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy51bnNhZmUgOiBmYWxzZTtcbiAgdmFyIHNpbXBsZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMuZW51bWVyYWJsZSA6IGZhbHNlO1xuICB2YXIgbm9UYXJnZXRHZXQgPSBvcHRpb25zID8gISFvcHRpb25zLm5vVGFyZ2V0R2V0IDogZmFsc2U7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICh0eXBlb2Yga2V5ID09ICdzdHJpbmcnICYmICFoYXModmFsdWUsICduYW1lJykpIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSh2YWx1ZSwgJ25hbWUnLCBrZXkpO1xuICAgIGVuZm9yY2VJbnRlcm5hbFN0YXRlKHZhbHVlKS5zb3VyY2UgPSBURU1QTEFURS5qb2luKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyBrZXkgOiAnJyk7XG4gIH1cbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICAgIGVsc2Ugc2V0R2xvYmFsKGtleSwgdmFsdWUpO1xuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmICghdW5zYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgfSBlbHNlIGlmICghbm9UYXJnZXRHZXQgJiYgT1trZXldKSB7XG4gICAgc2ltcGxlID0gdHJ1ZTtcbiAgfVxuICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgZWxzZSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoTywga2V5LCB2YWx1ZSk7XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIGdldEludGVybmFsU3RhdGUodGhpcykuc291cmNlIHx8IGluc3BlY3RTb3VyY2UodGhpcyk7XG59KTtcbiIsIi8vIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJbmRleGVkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoaXQpKTtcbn07XG4iLCJ2YXIgcGF0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXRoJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG52YXIgYUZ1bmN0aW9uID0gZnVuY3Rpb24gKHZhcmlhYmxlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFyaWFibGUgPT0gJ2Z1bmN0aW9uJyA/IHZhcmlhYmxlIDogdW5kZWZpbmVkO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtZXRob2QpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gYUZ1bmN0aW9uKHBhdGhbbmFtZXNwYWNlXSkgfHwgYUZ1bmN0aW9uKGdsb2JhbFtuYW1lc3BhY2VdKVxuICAgIDogcGF0aFtuYW1lc3BhY2VdICYmIHBhdGhbbmFtZXNwYWNlXVttZXRob2RdIHx8IGdsb2JhbFtuYW1lc3BhY2VdICYmIGdsb2JhbFtuYW1lc3BhY2VdW21ldGhvZF07XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcblxudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKCFwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYFRvTGVuZ3RoYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluKHRvSW50ZWdlcihhcmd1bWVudCksIDB4MUZGRkZGRkZGRkZGRkYpIDogMDsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsInZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBvYmplY3RIYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG52YXIgc2V0LCBnZXQsIGhhcztcblxudmFyIGVuZm9yY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGhhcyhpdCkgPyBnZXQoaXQpIDogc2V0KGl0LCB7fSk7XG59O1xuXG52YXIgZ2V0dGVyRm9yID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBzdGF0ZTtcbiAgICBpZiAoIWlzT2JqZWN0KGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkJyk7XG4gICAgfSByZXR1cm4gc3RhdGU7XG4gIH07XG59O1xuXG5pZiAoTkFUSVZFX1dFQUtfTUFQKSB7XG4gIHZhciBzdG9yZSA9IG5ldyBXZWFrTWFwKCk7XG4gIHZhciB3bWdldCA9IHN0b3JlLmdldDtcbiAgdmFyIHdtaGFzID0gc3RvcmUuaGFzO1xuICB2YXIgd21zZXQgPSBzdG9yZS5zZXQ7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICB3bXNldC5jYWxsKHN0b3JlLCBpdCwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtZ2V0LmNhbGwoc3RvcmUsIGl0KSB8fCB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtaGFzLmNhbGwoc3RvcmUsIGl0KTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcbiAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG4vLyBgVG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9wcmltaXRpdmVcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIFBSRUZFUlJFRF9TVFJJTkcpIHtcbiAgaWYgKCFpc09iamVjdChpbnB1dCkpIHJldHVybiBpbnB1dDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChQUkVGRVJSRURfU1RSSU5HICYmIHR5cGVvZiAoZm4gPSBpbnB1dC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGlucHV0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFQUkVGRVJSRURfU1RSSU5HICYmIHR5cGVvZiAoZm4gPSBpbnB1dC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVEFHLCBTVEFUSUMpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBTVEFUSUMgPyBpdCA6IGl0LnByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRykpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShpdCwgVE9fU1RSSU5HX1RBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiBUQUcgfSk7XG4gIH1cbn07XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcblxuLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0KTtcbiAgICB9O1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IFR5cGVFcnJvcihTdHJpbmcoaXQpICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwiLy8gYFJlcXVpcmVPYmplY3RDb2VyY2libGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVxdWlyZW9iamVjdGNvZXJjaWJsZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcblxudmFyIGtleXMgPSBzaGFyZWQoJ2tleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBrZXlzW2tleV0gfHwgKGtleXNba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJ2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFRvT2JqZWN0YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpKTtcbn07XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgRVhJU1RTID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gRVhJU1RTID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICB0cnkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShnbG9iYWwsIGtleSwgdmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGdsb2JhbFtrZXldID0gdmFsdWU7XG4gIH0gcmV0dXJuIHZhbHVlO1xufTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxudmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSBGdW5jdGlvbi50b1N0cmluZztcblxuLy8gdGhpcyBoZWxwZXIgYnJva2VuIGluIGAzLjQuMS0zLjQuNGAsIHNvIHdlIGNhbid0IHVzZSBgc2hhcmVkYCBoZWxwZXJcbmlmICh0eXBlb2Ygc3RvcmUuaW5zcGVjdFNvdXJjZSAhPSAnZnVuY3Rpb24nKSB7XG4gIHN0b3JlLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb25Ub1N0cmluZy5jYWxsKGl0KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZS5pbnNwZWN0U291cmNlO1xuIiwidmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogJzMuNi41JyxcbiAgbW9kZTogSVNfUFVSRSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDIwIERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCJ2YXIgaWQgPSAwO1xudmFyIHBvc3RmaXggPSBNYXRoLnJhbmRvbSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJyArIFN0cmluZyhrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5KSArICcpXycgKyAoKytpZCArIHBvc3RmaXgpLnRvU3RyaW5nKDM2KTtcbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG52YXIgaGlkZGVuS2V5cyA9IGVudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsIi8vIElFOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSBbXG4gICdjb25zdHJ1Y3RvcicsXG4gICdoYXNPd25Qcm9wZXJ0eScsXG4gICdpc1Byb3RvdHlwZU9mJyxcbiAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgJ3RvU3RyaW5nJyxcbiAgJ3ZhbHVlT2YnXG5dO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gISFPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIENocm9tZSAzOCBTeW1ib2wgaGFzIGluY29ycmVjdCB0b1N0cmluZyBjb252ZXJzaW9uXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICByZXR1cm4gIVN0cmluZyhTeW1ib2woKSk7XG59KTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxudmFyIHB1c2ggPSBbXS5wdXNoO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgZm9yRWFjaCwgbWFwLCBmaWx0ZXIsIHNvbWUsIGV2ZXJ5LCBmaW5kLCBmaW5kSW5kZXggfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCwgc3BlY2lmaWNDcmVhdGUpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgY3JlYXRlID0gc3BlY2lmaWNDcmVhdGUgfHwgYXJyYXlTcGVjaWVzQ3JlYXRlO1xuICAgIHZhciB0YXJnZXQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWx1ZSwgcmVzdWx0O1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsdWUgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlc3VsdCA9IGJvdW5kRnVuY3Rpb24odmFsdWUsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHRhcmdldFtpbmRleF0gPSByZXN1bHQ7IC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXN1bHQpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsdWU7ICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiBwdXNoLmNhbGwodGFyZ2V0LCB2YWx1ZSk7IC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7ICAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogdGFyZ2V0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4gIGZvckVhY2g6IGNyZWF0ZU1ldGhvZCgwKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4gIG1hcDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgZmlsdGVyOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lXG4gIHNvbWU6IGNyZWF0ZU1ldGhvZCgzKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5ldmVyeVxuICBldmVyeTogY3JlYXRlTWV0aG9kKDQpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuICBmaW5kOiBjcmVhdGVNZXRob2QoNSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRJbmRleFxuICBmaW5kSW5kZXg6IGNyZWF0ZU1ldGhvZCg2KVxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgdGVzdCA9IHt9O1xuXG50ZXN0W1RPX1NUUklOR19UQUddID0gJ3onO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmluZyh0ZXN0KSA9PT0gJ1tvYmplY3Qgel0nO1xuIiwidmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgVG9JbnRlZ2VyYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW50ZWdlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGlzTmFOKGFyZ3VtZW50ID0gK2FyZ3VtZW50KSA/IDAgOiAoYXJndW1lbnQgPiAwID8gZmxvb3IgOiBjZWlsKShhcmd1bWVudCk7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xuXG52YXIgR1QgPSAnPic7XG52YXIgTFQgPSAnPCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgU0NSSVBUID0gJ3NjcmlwdCc7XG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG5cbnZhciBFbXB0eUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuXG52YXIgc2NyaXB0VGFnID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIExUICsgU0NSSVBUICsgR1QgKyBjb250ZW50ICsgTFQgKyAnLycgKyBTQ1JJUFQgKyBHVDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBBY3RpdmVYIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCA9IGZ1bmN0aW9uIChhY3RpdmVYRG9jdW1lbnQpIHtcbiAgYWN0aXZlWERvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnJykpO1xuICBhY3RpdmVYRG9jdW1lbnQuY2xvc2UoKTtcbiAgdmFyIHRlbXAgPSBhY3RpdmVYRG9jdW1lbnQucGFyZW50V2luZG93Lk9iamVjdDtcbiAgYWN0aXZlWERvY3VtZW50ID0gbnVsbDsgLy8gYXZvaWQgbWVtb3J5IGxlYWtcbiAgcmV0dXJuIHRlbXA7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgdmFyIEpTID0gJ2phdmEnICsgU0NSSVBUICsgJzonO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBodG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy80NzVcbiAgaWZyYW1lLnNyYyA9IFN0cmluZyhKUyk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCdkb2N1bWVudC5GPU9iamVjdCcpKTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgcmV0dXJuIGlmcmFtZURvY3VtZW50LkY7XG59O1xuXG4vLyBDaGVjayBmb3IgZG9jdW1lbnQuZG9tYWluIGFuZCBhY3RpdmUgeCBzdXBwb3J0XG4vLyBObyBuZWVkIHRvIHVzZSBhY3RpdmUgeCBhcHByb2FjaCB3aGVuIGRvY3VtZW50LmRvbWFpbiBpcyBub3Qgc2V0XG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTBcbi8vIHZhcmlhdGlvbiBvZiBodHRwczovL2dpdGh1Yi5jb20va2l0Y2FtYnJpZGdlL2VzNS1zaGltL2NvbW1pdC80ZjczOGFjMDY2MzQ2XG4vLyBhdm9pZCBJRSBHQyBidWdcbnZhciBhY3RpdmVYRG9jdW1lbnQ7XG52YXIgTnVsbFByb3RvT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIC8qIGdsb2JhbCBBY3RpdmVYT2JqZWN0ICovXG4gICAgYWN0aXZlWERvY3VtZW50ID0gZG9jdW1lbnQuZG9tYWluICYmIG5ldyBBY3RpdmVYT2JqZWN0KCdodG1sZmlsZScpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBpZ25vcmUgKi8gfVxuICBOdWxsUHJvdG9PYmplY3QgPSBhY3RpdmVYRG9jdW1lbnQgPyBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYKGFjdGl2ZVhEb2N1bWVudCkgOiBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUoKTtcbiAgdmFyIGxlbmd0aCA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSBkZWxldGUgTnVsbFByb3RvT2JqZWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbbGVuZ3RoXV07XG4gIHJldHVybiBOdWxsUHJvdG9PYmplY3QoKTtcbn07XG5cbmhpZGRlbktleXNbSUVfUFJPVE9dID0gdHJ1ZTtcblxuLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5Q29uc3RydWN0b3IoKTtcbiAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IE51bGxQcm90b09iamVjdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZGVmaW5lUHJvcGVydGllcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgY2FjaGUgPSB7fTtcblxudmFyIHRocm93ZXIgPSBmdW5jdGlvbiAoaXQpIHsgdGhyb3cgaXQ7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FLCBvcHRpb25zKSB7XG4gIGlmIChoYXMoY2FjaGUsIE1FVEhPRF9OQU1FKSkgcmV0dXJuIGNhY2hlW01FVEhPRF9OQU1FXTtcbiAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge307XG4gIHZhciBtZXRob2QgPSBbXVtNRVRIT0RfTkFNRV07XG4gIHZhciBBQ0NFU1NPUlMgPSBoYXMob3B0aW9ucywgJ0FDQ0VTU09SUycpID8gb3B0aW9ucy5BQ0NFU1NPUlMgOiBmYWxzZTtcbiAgdmFyIGFyZ3VtZW50MCA9IGhhcyhvcHRpb25zLCAwKSA/IG9wdGlvbnNbMF0gOiB0aHJvd2VyO1xuICB2YXIgYXJndW1lbnQxID0gaGFzKG9wdGlvbnMsIDEpID8gb3B0aW9uc1sxXSA6IHVuZGVmaW5lZDtcblxuICByZXR1cm4gY2FjaGVbTUVUSE9EX05BTUVdID0gISFtZXRob2QgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoQUNDRVNTT1JTICYmICFERVNDUklQVE9SUykgcmV0dXJuIHRydWU7XG4gICAgdmFyIE8gPSB7IGxlbmd0aDogLTEgfTtcblxuICAgIGlmIChBQ0NFU1NPUlMpIGRlZmluZVByb3BlcnR5KE8sIDEsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiB0aHJvd2VyIH0pO1xuICAgIGVsc2UgT1sxXSA9IDE7XG5cbiAgICBtZXRob2QuY2FsbChPLCBhcmd1bWVudDAsIGFyZ3VtZW50MSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIE5hc2hvcm4gfiBKREs4IGJ1Z1xudmFyIE5BU0hPUk5fQlVHID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmICFuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgMTogMiB9LCAxKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGVgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eWlzZW51bWVyYWJsZVxuZXhwb3J0cy5mID0gTkFTSE9STl9CVUcgPyBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMsIFYpO1xuICByZXR1cm4gISFkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IuZW51bWVyYWJsZTtcbn0gOiBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxudmFyIHNwbGl0ID0gJycuc3BsaXQ7XG5cbi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gdGhyb3dzIGFuIGVycm9yIGluIHJoaW5vLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcmhpbm8vaXNzdWVzLzM0NlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIHJldHVybiAhT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCk7XG59KSA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY2xhc3NvZihpdCkgPT0gJ1N0cmluZycgPyBzcGxpdC5jYWxsKGl0LCAnJykgOiBPYmplY3QoaXQpO1xufSA6IE9iamVjdDtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG4vLyBgSXNBcnJheWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1pc2FycmF5XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNsYXNzb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwidmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciBjbGFzc29mUmF3ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBDT1JSRUNUX0FSR1VNRU5UUyA9IGNsYXNzb2ZSYXcoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbi8vIGdldHRpbmcgdGFnIGZyb20gRVM2KyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2Bcbm1vZHVsZS5leHBvcnRzID0gVE9fU1RSSU5HX1RBR19TVVBQT1JUID8gY2xhc3NvZlJhdyA6IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgdGFnLCByZXN1bHQ7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mICh0YWcgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRPX1NUUklOR19UQUcpKSA9PSAnc3RyaW5nJyA/IHRhZ1xuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQ09SUkVDVF9BUkdVTUVOVFMgPyBjbGFzc29mUmF3KE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKHJlc3VsdCA9IGNsYXNzb2ZSYXcoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiByZXN1bHQ7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIURFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3JlYXRlRWxlbWVudCgnZGl2JyksICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfVxuICB9KS5hICE9IDc7XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcblxudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgc2V0R2xvYmFsKFNIQVJFRCwge30pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWw7XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgIWhhcyhoaWRkZW5LZXlzLCBrZXkpICYmIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+aW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgcmVwbGFjZW1lbnQgPSAvI3xcXC5wcm90b3R5cGVcXC4vO1xuXG52YXIgaXNGb3JjZWQgPSBmdW5jdGlvbiAoZmVhdHVyZSwgZGV0ZWN0aW9uKSB7XG4gIHZhciB2YWx1ZSA9IGRhdGFbbm9ybWFsaXplKGZlYXR1cmUpXTtcbiAgcmV0dXJuIHZhbHVlID09IFBPTFlGSUxMID8gdHJ1ZVxuICAgIDogdmFsdWUgPT0gTkFUSVZFID8gZmFsc2VcbiAgICA6IHR5cGVvZiBkZXRlY3Rpb24gPT0gJ2Z1bmN0aW9uJyA/IGZhaWxzKGRldGVjdGlvbilcbiAgICA6ICEhZGV0ZWN0aW9uO1xufTtcblxudmFyIG5vcm1hbGl6ZSA9IGlzRm9yY2VkLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgcmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVwbGFjZW1lbnQsICcuJykudG9Mb3dlckNhc2UoKTtcbn07XG5cbnZhciBkYXRhID0gaXNGb3JjZWQuZGF0YSA9IHt9O1xudmFyIE5BVElWRSA9IGlzRm9yY2VkLk5BVElWRSA9ICdOJztcbnZhciBQT0xZRklMTCA9IGlzRm9yY2VkLlBPTFlGSUxMID0gJ1AnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRm9yY2VkO1xuIiwidmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9TWU1CT0xcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICYmICFTeW1ib2wuc2hhbVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJztcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ2RvY3VtZW50JywgJ2RvY3VtZW50RWxlbWVudCcpO1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG5leHBvcnRzLmYgPSB3ZWxsS25vd25TeW1ib2w7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjg7XG52YXIgbWF0Y2gsIHZlcnNpb247XG5cbmlmICh2OCkge1xuICBtYXRjaCA9IHY4LnNwbGl0KCcuJyk7XG4gIHZlcnNpb24gPSBtYXRjaFswXSArIG1hdGNoWzFdO1xufSBlbHNlIGlmICh1c2VyQWdlbnQpIHtcbiAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0VkZ2VcXC8oXFxkKykvKTtcbiAgaWYgKCFtYXRjaCB8fCBtYXRjaFsxXSA+PSA3NCkge1xuICAgIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9DaHJvbWVcXC8oXFxkKykvKTtcbiAgICBpZiAobWF0Y2gpIHZlcnNpb24gPSBtYXRjaFsxXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZlcnNpb24gJiYgK3ZlcnNpb247XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCduYXZpZ2F0b3InLCAndXNlckFnZW50JykgfHwgJyc7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9odG1sJyk7XG52YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xudmFyIElTX0lPUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtaW9zJyk7XG5cbnZhciBsb2NhdGlvbiA9IGdsb2JhbC5sb2NhdGlvbjtcbnZhciBzZXQgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xuXG52YXIgcnVuID0gZnVuY3Rpb24gKGlkKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgaWYgKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG5cbnZhciBydW5uZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBydW4oaWQpO1xuICB9O1xufTtcblxudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHJ1bihldmVudC5kYXRhKTtcbn07XG5cbnZhciBwb3N0ID0gZnVuY3Rpb24gKGlkKSB7XG4gIC8vIG9sZCBlbmdpbmVzIGhhdmUgbm90IGxvY2F0aW9uLm9yaWdpblxuICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgbG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgbG9jYXRpb24uaG9zdCk7XG59O1xuXG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldCB8fCAhY2xlYXIpIHtcbiAgc2V0ID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pKS5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2socnVubmVyKGlkKSk7XG4gICAgfTtcbiAgLy8gU3BoZXJlIChKUyBnYW1lIGVuZ2luZSkgRGlzcGF0Y2ggQVBJXG4gIH0gZWxzZSBpZiAoRGlzcGF0Y2ggJiYgRGlzcGF0Y2gubm93KSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIERpc3BhdGNoLm5vdyhydW5uZXIoaWQpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIC8vIGV4Y2VwdCBpT1MgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjI0XG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwgJiYgIUlTX0lPUykge1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gYmluZChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoXG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiZcbiAgICB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJlxuICAgICFnbG9iYWwuaW1wb3J0U2NyaXB0cyAmJlxuICAgICFmYWlscyhwb3N0KSAmJlxuICAgIGxvY2F0aW9uLnByb3RvY29sICE9PSAnZmlsZTonXG4gICkge1xuICAgIGRlZmVyID0gcG9zdDtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjcmVhdGVFbGVtZW50KCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChydW5uZXIoaWQpLCAwKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgY2xlYXI6IGNsZWFyXG59O1xuIiwidmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC8oaXBob25lfGlwb2R8aXBhZCkuKmFwcGxld2Via2l0L2kudGVzdCh1c2VyQWdlbnQpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG5cbnZhciBQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59O1xuXG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFwid2ViZXh0ZW5zaW9uLXBvbHlmaWxsXCIsIFtcIm1vZHVsZVwiXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KG1vZHVsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZCk7XG4gICAgZ2xvYmFsLmJyb3dzZXIgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKG1vZHVsZSkge1xuICAvKiB3ZWJleHRlbnNpb24tcG9seWZpbGwgLSB2MC4zLjEgLSBUdWUgQXVnIDIxIDIwMTggMTA6MDk6MzQgKi9cbiAgLyogLSotIE1vZGU6IGluZGVudC10YWJzLW1vZGU6IG5pbDsganMtaW5kZW50LWxldmVsOiAyIC0qLSAqL1xuICAvKiB2aW06IHNldCBzdHM9MiBzdz0yIGV0IHR3PTgwOiAqL1xuICAvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gICAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXNcbiAgICogZmlsZSwgWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgaWYgKHR5cGVvZiBicm93c2VyID09PSBcInVuZGVmaW5lZFwiIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihicm93c2VyKSAhPT0gT2JqZWN0LnByb3RvdHlwZSkge1xuICAgIGNvbnN0IENIUk9NRV9TRU5EX01FU1NBR0VfQ0FMTEJBQ0tfTk9fUkVTUE9OU0VfTUVTU0FHRSA9IFwiVGhlIG1lc3NhZ2UgcG9ydCBjbG9zZWQgYmVmb3JlIGEgcmVzcG9uc2Ugd2FzIHJlY2VpdmVkLlwiO1xuICAgIGNvbnN0IFNFTkRfUkVTUE9OU0VfREVQUkVDQVRJT05fV0FSTklORyA9IFwiUmV0dXJuaW5nIGEgUHJvbWlzZSBpcyB0aGUgcHJlZmVycmVkIHdheSB0byBzZW5kIGEgcmVwbHkgZnJvbSBhbiBvbk1lc3NhZ2Uvb25NZXNzYWdlRXh0ZXJuYWwgbGlzdGVuZXIsIGFzIHRoZSBzZW5kUmVzcG9uc2Ugd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIHNwZWNzIChTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9Nb3ppbGxhL0FkZC1vbnMvV2ViRXh0ZW5zaW9ucy9BUEkvcnVudGltZS9vbk1lc3NhZ2UpXCI7XG5cbiAgICAvLyBXcmFwcGluZyB0aGUgYnVsayBvZiB0aGlzIHBvbHlmaWxsIGluIGEgb25lLXRpbWUtdXNlIGZ1bmN0aW9uIGlzIGEgbWlub3JcbiAgICAvLyBvcHRpbWl6YXRpb24gZm9yIEZpcmVmb3guIFNpbmNlIFNwaWRlcm1vbmtleSBkb2VzIG5vdCBmdWxseSBwYXJzZSB0aGVcbiAgICAvLyBjb250ZW50cyBvZiBhIGZ1bmN0aW9uIHVudGlsIHRoZSBmaXJzdCB0aW1lIGl0J3MgY2FsbGVkLCBhbmQgc2luY2UgaXQgd2lsbFxuICAgIC8vIG5ldmVyIGFjdHVhbGx5IG5lZWQgdG8gYmUgY2FsbGVkLCB0aGlzIGFsbG93cyB0aGUgcG9seWZpbGwgdG8gYmUgaW5jbHVkZWRcbiAgICAvLyBpbiBGaXJlZm94IG5lYXJseSBmb3IgZnJlZS5cbiAgICBjb25zdCB3cmFwQVBJcyA9ICgpID0+IHtcbiAgICAgIC8vIE5PVEU6IGFwaU1ldGFkYXRhIGlzIGFzc29jaWF0ZWQgdG8gdGhlIGNvbnRlbnQgb2YgdGhlIGFwaS1tZXRhZGF0YS5qc29uIGZpbGVcbiAgICAgIC8vIGF0IGJ1aWxkIHRpbWUgYnkgcmVwbGFjaW5nIHRoZSBmb2xsb3dpbmcgXCJpbmNsdWRlXCIgd2l0aCB0aGUgY29udGVudCBvZiB0aGVcbiAgICAgIC8vIEpTT04gZmlsZS5cbiAgICAgIGNvbnN0IGFwaU1ldGFkYXRhID0ge1xuICAgICAgICBcImFsYXJtc1wiOiB7XG4gICAgICAgICAgXCJjbGVhclwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImNsZWFyQWxsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0QWxsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiYm9va21hcmtzXCI6IHtcbiAgICAgICAgICBcImNyZWF0ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldENoaWxkcmVuXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0UmVjZW50XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0U3ViVHJlZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFRyZWVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJtb3ZlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlVHJlZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNlYXJjaFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInVwZGF0ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMixcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImJyb3dzZXJBY3Rpb25cIjoge1xuICAgICAgICAgIFwiZGlzYWJsZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImVuYWJsZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEJhZGdlQmFja2dyb3VuZENvbG9yXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0QmFkZ2VUZXh0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0UG9wdXBcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRUaXRsZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm9wZW5Qb3B1cFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldEJhZGdlQmFja2dyb3VuZENvbG9yXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0QmFkZ2VUZXh0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0SWNvblwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldFBvcHVwXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0VGl0bGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJicm93c2luZ0RhdGFcIjoge1xuICAgICAgICAgIFwicmVtb3ZlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlQ2FjaGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVDb29raWVzXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlRG93bmxvYWRzXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlRm9ybURhdGFcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVIaXN0b3J5XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlTG9jYWxTdG9yYWdlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlUGFzc3dvcmRzXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlUGx1Z2luRGF0YVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldHRpbmdzXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiY29tbWFuZHNcIjoge1xuICAgICAgICAgIFwiZ2V0QWxsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiY29udGV4dE1lbnVzXCI6IHtcbiAgICAgICAgICBcInJlbW92ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZUFsbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInVwZGF0ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMixcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImNvb2tpZXNcIjoge1xuICAgICAgICAgIFwiZ2V0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0QWxsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0QWxsQ29va2llU3RvcmVzXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiZGV2dG9vbHNcIjoge1xuICAgICAgICAgIFwiaW5zcGVjdGVkV2luZG93XCI6IHtcbiAgICAgICAgICAgIFwiZXZhbFwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwYW5lbHNcIjoge1xuICAgICAgICAgICAgXCJjcmVhdGVcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMyxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDMsXG4gICAgICAgICAgICAgIFwic2luZ2xlQ2FsbGJhY2tBcmdcIjogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJkb3dubG9hZHNcIjoge1xuICAgICAgICAgIFwiY2FuY2VsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZG93bmxvYWRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJlcmFzZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEZpbGVJY29uXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwib3BlblwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhdXNlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlRmlsZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlc3VtZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNlYXJjaFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNob3dcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJleHRlbnNpb25cIjoge1xuICAgICAgICAgIFwiaXNBbGxvd2VkRmlsZVNjaGVtZUFjY2Vzc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImlzQWxsb3dlZEluY29nbml0b0FjY2Vzc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImhpc3RvcnlcIjoge1xuICAgICAgICAgIFwiYWRkVXJsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZGVsZXRlQWxsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZGVsZXRlUmFuZ2VcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJkZWxldGVVcmxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRWaXNpdHNcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZWFyY2hcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJpMThuXCI6IHtcbiAgICAgICAgICBcImRldGVjdExhbmd1YWdlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0QWNjZXB0TGFuZ3VhZ2VzXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiaWRlbnRpdHlcIjoge1xuICAgICAgICAgIFwibGF1bmNoV2ViQXV0aEZsb3dcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJpZGxlXCI6IHtcbiAgICAgICAgICBcInF1ZXJ5U3RhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJtYW5hZ2VtZW50XCI6IHtcbiAgICAgICAgICBcImdldFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEFsbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFNlbGZcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRFbmFibGVkXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidW5pbnN0YWxsU2VsZlwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIm5vdGlmaWNhdGlvbnNcIjoge1xuICAgICAgICAgIFwiY2xlYXJcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJjcmVhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRBbGxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRQZXJtaXNzaW9uTGV2ZWxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1cGRhdGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJwYWdlQWN0aW9uXCI6IHtcbiAgICAgICAgICBcImdldFBvcHVwXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0VGl0bGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJoaWRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0SWNvblwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldFBvcHVwXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0VGl0bGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzaG93XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwicGVybWlzc2lvbnNcIjoge1xuICAgICAgICAgIFwiY29udGFpbnNcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRBbGxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXF1ZXN0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwicnVudGltZVwiOiB7XG4gICAgICAgICAgXCJnZXRCYWNrZ3JvdW5kUGFnZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEJyb3dzZXJJbmZvXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0UGxhdGZvcm1JbmZvXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwib3Blbk9wdGlvbnNQYWdlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVxdWVzdFVwZGF0ZUNoZWNrXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2VuZE1lc3NhZ2VcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogM1xuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZW5kTmF0aXZlTWVzc2FnZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMixcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldFVuaW5zdGFsbFVSTFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInNlc3Npb25zXCI6IHtcbiAgICAgICAgICBcImdldERldmljZXNcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRSZWNlbnRseUNsb3NlZFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlc3RvcmVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJzdG9yYWdlXCI6IHtcbiAgICAgICAgICBcImxvY2FsXCI6IHtcbiAgICAgICAgICAgIFwiY2xlYXJcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImdldFwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZ2V0Qnl0ZXNJblVzZVwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwicmVtb3ZlXCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJzZXRcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibWFuYWdlZFwiOiB7XG4gICAgICAgICAgICBcImdldFwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZ2V0Qnl0ZXNJblVzZVwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzeW5jXCI6IHtcbiAgICAgICAgICAgIFwiY2xlYXJcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImdldFwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZ2V0Qnl0ZXNJblVzZVwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwicmVtb3ZlXCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJzZXRcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidGFic1wiOiB7XG4gICAgICAgICAgXCJjYXB0dXJlVmlzaWJsZVRhYlwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImNyZWF0ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImRldGVjdExhbmd1YWdlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZGlzY2FyZFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImR1cGxpY2F0ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImV4ZWN1dGVTY3JpcHRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRDdXJyZW50XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0Wm9vbVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFpvb21TZXR0aW5nc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImhpZ2hsaWdodFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImluc2VydENTU1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm1vdmVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJxdWVyeVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbG9hZFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZUNTU1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNlbmRNZXNzYWdlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDNcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0Wm9vbVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldFpvb21TZXR0aW5nc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInVwZGF0ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInRvcFNpdGVzXCI6IHtcbiAgICAgICAgICBcImdldFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIndlYk5hdmlnYXRpb25cIjoge1xuICAgICAgICAgIFwiZ2V0QWxsRnJhbWVzXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0RnJhbWVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ3ZWJSZXF1ZXN0XCI6IHtcbiAgICAgICAgICBcImhhbmRsZXJCZWhhdmlvckNoYW5nZWRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ3aW5kb3dzXCI6IHtcbiAgICAgICAgICBcImNyZWF0ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEFsbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEN1cnJlbnRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRMYXN0Rm9jdXNlZFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInVwZGF0ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMixcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBpZiAoT2JqZWN0LmtleXMoYXBpTWV0YWRhdGEpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhcGktbWV0YWRhdGEuanNvbiBoYXMgbm90IGJlZW4gaW5jbHVkZWQgaW4gYnJvd3Nlci1wb2x5ZmlsbFwiKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBBIFdlYWtNYXAgc3ViY2xhc3Mgd2hpY2ggY3JlYXRlcyBhbmQgc3RvcmVzIGEgdmFsdWUgZm9yIGFueSBrZXkgd2hpY2ggZG9lc1xuICAgICAgICogbm90IGV4aXN0IHdoZW4gYWNjZXNzZWQsIGJ1dCBiZWhhdmVzIGV4YWN0bHkgYXMgYW4gb3JkaW5hcnkgV2Vha01hcFxuICAgICAgICogb3RoZXJ3aXNlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNyZWF0ZUl0ZW1cbiAgICAgICAqICAgICAgICBBIGZ1bmN0aW9uIHdoaWNoIHdpbGwgYmUgY2FsbGVkIGluIG9yZGVyIHRvIGNyZWF0ZSB0aGUgdmFsdWUgZm9yIGFueVxuICAgICAgICogICAgICAgIGtleSB3aGljaCBkb2VzIG5vdCBleGlzdCwgdGhlIGZpcnN0IHRpbWUgaXQgaXMgYWNjZXNzZWQuIFRoZVxuICAgICAgICogICAgICAgIGZ1bmN0aW9uIHJlY2VpdmVzLCBhcyBpdHMgb25seSBhcmd1bWVudCwgdGhlIGtleSBiZWluZyBjcmVhdGVkLlxuICAgICAgICovXG4gICAgICBjbGFzcyBEZWZhdWx0V2Vha01hcCBleHRlbmRzIFdlYWtNYXAge1xuICAgICAgICBjb25zdHJ1Y3RvcihjcmVhdGVJdGVtLCBpdGVtcyA9IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHN1cGVyKGl0ZW1zKTtcbiAgICAgICAgICB0aGlzLmNyZWF0ZUl0ZW0gPSBjcmVhdGVJdGVtO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0KGtleSkge1xuICAgICAgICAgIGlmICghdGhpcy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgdGhpcy5zZXQoa2V5LCB0aGlzLmNyZWF0ZUl0ZW0oa2V5KSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHN1cGVyLmdldChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBvYmplY3QgaXMgYW4gb2JqZWN0IHdpdGggYSBgdGhlbmAgbWV0aG9kLCBhbmQgY2FuXG4gICAgICAgKiB0aGVyZWZvcmUgYmUgYXNzdW1lZCB0byBiZWhhdmUgYXMgYSBQcm9taXNlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHRlc3QuXG4gICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdGhlbmFibGUuXG4gICAgICAgKi9cbiAgICAgIGNvbnN0IGlzVGhlbmFibGUgPSB2YWx1ZSA9PiB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09IFwiZnVuY3Rpb25cIjtcbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogQ3JlYXRlcyBhbmQgcmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoLCB3aGVuIGNhbGxlZCwgd2lsbCByZXNvbHZlIG9yIHJlamVjdFxuICAgICAgICogdGhlIGdpdmVuIHByb21pc2UgYmFzZWQgb24gaG93IGl0IGlzIGNhbGxlZDpcbiAgICAgICAqXG4gICAgICAgKiAtIElmLCB3aGVuIGNhbGxlZCwgYGNocm9tZS5ydW50aW1lLmxhc3RFcnJvcmAgY29udGFpbnMgYSBub24tbnVsbCBvYmplY3QsXG4gICAgICAgKiAgIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkIHdpdGggdGhhdCB2YWx1ZS5cbiAgICAgICAqIC0gSWYgdGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIGV4YWN0bHkgb25lIGFyZ3VtZW50LCB0aGUgcHJvbWlzZSBpc1xuICAgICAgICogICByZXNvbHZlZCB0byB0aGF0IHZhbHVlLlxuICAgICAgICogLSBPdGhlcndpc2UsIHRoZSBwcm9taXNlIGlzIHJlc29sdmVkIHRvIGFuIGFycmF5IGNvbnRhaW5pbmcgYWxsIG9mIHRoZVxuICAgICAgICogICBmdW5jdGlvbidzIGFyZ3VtZW50cy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gcHJvbWlzZVxuICAgICAgICogICAgICAgIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSByZXNvbHV0aW9uIGFuZCByZWplY3Rpb24gZnVuY3Rpb25zIG9mIGFcbiAgICAgICAqICAgICAgICBwcm9taXNlLlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gcHJvbWlzZS5yZXNvbHZlXG4gICAgICAgKiAgICAgICAgVGhlIHByb21pc2UncyByZXNvbHV0aW9uIGZ1bmN0aW9uLlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gcHJvbWlzZS5yZWplY3Rpb25cbiAgICAgICAqICAgICAgICBUaGUgcHJvbWlzZSdzIHJlamVjdGlvbiBmdW5jdGlvbi5cbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBtZXRhZGF0YVxuICAgICAgICogICAgICAgIE1ldGFkYXRhIGFib3V0IHRoZSB3cmFwcGVkIG1ldGhvZCB3aGljaCBoYXMgY3JlYXRlZCB0aGUgY2FsbGJhY2suXG4gICAgICAgKiBAcGFyYW0ge2ludGVnZXJ9IG1ldGFkYXRhLm1heFJlc29sdmVkQXJnc1xuICAgICAgICogICAgICAgIFRoZSBtYXhpbXVtIG51bWJlciBvZiBhcmd1bWVudHMgd2hpY2ggbWF5IGJlIHBhc3NlZCB0byB0aGVcbiAgICAgICAqICAgICAgICBjYWxsYmFjayBjcmVhdGVkIGJ5IHRoZSB3cmFwcGVkIGFzeW5jIGZ1bmN0aW9uLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAgICAgICAqICAgICAgICBUaGUgZ2VuZXJhdGVkIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICAgICAgICovXG4gICAgICBjb25zdCBtYWtlQ2FsbGJhY2sgPSAocHJvbWlzZSwgbWV0YWRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuICguLi5jYWxsYmFja0FyZ3MpID0+IHtcbiAgICAgICAgICBpZiAoY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yKSB7XG4gICAgICAgICAgICBwcm9taXNlLnJlamVjdChjaHJvbWUucnVudGltZS5sYXN0RXJyb3IpO1xuICAgICAgICAgIH0gZWxzZSBpZiAobWV0YWRhdGEuc2luZ2xlQ2FsbGJhY2tBcmcgfHwgY2FsbGJhY2tBcmdzLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgICAgICBwcm9taXNlLnJlc29sdmUoY2FsbGJhY2tBcmdzWzBdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvbWlzZS5yZXNvbHZlKGNhbGxiYWNrQXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfTtcblxuICAgICAgY29uc3QgcGx1cmFsaXplQXJndW1lbnRzID0gbnVtQXJncyA9PiBudW1BcmdzID09IDEgPyBcImFyZ3VtZW50XCIgOiBcImFyZ3VtZW50c1wiO1xuXG4gICAgICAvKipcbiAgICAgICAqIENyZWF0ZXMgYSB3cmFwcGVyIGZ1bmN0aW9uIGZvciBhIG1ldGhvZCB3aXRoIHRoZSBnaXZlbiBuYW1lIGFuZCBtZXRhZGF0YS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgICAgICogICAgICAgIFRoZSBuYW1lIG9mIHRoZSBtZXRob2Qgd2hpY2ggaXMgYmVpbmcgd3JhcHBlZC5cbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBtZXRhZGF0YVxuICAgICAgICogICAgICAgIE1ldGFkYXRhIGFib3V0IHRoZSBtZXRob2QgYmVpbmcgd3JhcHBlZC5cbiAgICAgICAqIEBwYXJhbSB7aW50ZWdlcn0gbWV0YWRhdGEubWluQXJnc1xuICAgICAgICogICAgICAgIFRoZSBtaW5pbXVtIG51bWJlciBvZiBhcmd1bWVudHMgd2hpY2ggbXVzdCBiZSBwYXNzZWQgdG8gdGhlXG4gICAgICAgKiAgICAgICAgZnVuY3Rpb24uIElmIGNhbGxlZCB3aXRoIGZld2VyIHRoYW4gdGhpcyBudW1iZXIgb2YgYXJndW1lbnRzLCB0aGVcbiAgICAgICAqICAgICAgICB3cmFwcGVyIHdpbGwgcmFpc2UgYW4gZXhjZXB0aW9uLlxuICAgICAgICogQHBhcmFtIHtpbnRlZ2VyfSBtZXRhZGF0YS5tYXhBcmdzXG4gICAgICAgKiAgICAgICAgVGhlIG1heGltdW0gbnVtYmVyIG9mIGFyZ3VtZW50cyB3aGljaCBtYXkgYmUgcGFzc2VkIHRvIHRoZVxuICAgICAgICogICAgICAgIGZ1bmN0aW9uLiBJZiBjYWxsZWQgd2l0aCBtb3JlIHRoYW4gdGhpcyBudW1iZXIgb2YgYXJndW1lbnRzLCB0aGVcbiAgICAgICAqICAgICAgICB3cmFwcGVyIHdpbGwgcmFpc2UgYW4gZXhjZXB0aW9uLlxuICAgICAgICogQHBhcmFtIHtpbnRlZ2VyfSBtZXRhZGF0YS5tYXhSZXNvbHZlZEFyZ3NcbiAgICAgICAqICAgICAgICBUaGUgbWF4aW11bSBudW1iZXIgb2YgYXJndW1lbnRzIHdoaWNoIG1heSBiZSBwYXNzZWQgdG8gdGhlXG4gICAgICAgKiAgICAgICAgY2FsbGJhY2sgY3JlYXRlZCBieSB0aGUgd3JhcHBlZCBhc3luYyBmdW5jdGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24ob2JqZWN0LCAuLi4qKX1cbiAgICAgICAqICAgICAgIFRoZSBnZW5lcmF0ZWQgd3JhcHBlciBmdW5jdGlvbi5cbiAgICAgICAqL1xuICAgICAgY29uc3Qgd3JhcEFzeW5jRnVuY3Rpb24gPSAobmFtZSwgbWV0YWRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGFzeW5jRnVuY3Rpb25XcmFwcGVyKHRhcmdldCwgLi4uYXJncykge1xuICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA8IG1ldGFkYXRhLm1pbkFyZ3MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgYXQgbGVhc3QgJHttZXRhZGF0YS5taW5BcmdzfSAke3BsdXJhbGl6ZUFyZ3VtZW50cyhtZXRhZGF0YS5taW5BcmdzKX0gZm9yICR7bmFtZX0oKSwgZ290ICR7YXJncy5sZW5ndGh9YCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gbWV0YWRhdGEubWF4QXJncykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBhdCBtb3N0ICR7bWV0YWRhdGEubWF4QXJnc30gJHtwbHVyYWxpemVBcmd1bWVudHMobWV0YWRhdGEubWF4QXJncyl9IGZvciAke25hbWV9KCksIGdvdCAke2FyZ3MubGVuZ3RofWApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBpZiAobWV0YWRhdGEuZmFsbGJhY2tUb05vQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgLy8gVGhpcyBBUEkgbWV0aG9kIGhhcyBjdXJyZW50bHkgbm8gY2FsbGJhY2sgb24gQ2hyb21lLCBidXQgaXQgcmV0dXJuIGEgcHJvbWlzZSBvbiBGaXJlZm94LFxuICAgICAgICAgICAgICAvLyBhbmQgc28gdGhlIHBvbHlmaWxsIHdpbGwgdHJ5IHRvIGNhbGwgaXQgd2l0aCBhIGNhbGxiYWNrIGZpcnN0LCBhbmQgaXQgd2lsbCBmYWxsYmFja1xuICAgICAgICAgICAgICAvLyB0byBub3QgcGFzc2luZyB0aGUgY2FsbGJhY2sgaWYgdGhlIGZpcnN0IGNhbGwgZmFpbHMuXG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W25hbWVdKC4uLmFyZ3MsIG1ha2VDYWxsYmFjayh7IHJlc29sdmUsIHJlamVjdCB9LCBtZXRhZGF0YSkpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChjYkVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGAke25hbWV9IEFQSSBtZXRob2QgZG9lc24ndCBzZWVtIHRvIHN1cHBvcnQgdGhlIGNhbGxiYWNrIHBhcmFtZXRlciwgYCArIFwiZmFsbGluZyBiYWNrIHRvIGNhbGwgaXQgd2l0aG91dCBhIGNhbGxiYWNrOiBcIiwgY2JFcnJvcik7XG5cbiAgICAgICAgICAgICAgICB0YXJnZXRbbmFtZV0oLi4uYXJncyk7XG5cbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdGhlIEFQSSBtZXRob2QgbWV0YWRhdGEsIHNvIHRoYXQgdGhlIG5leHQgQVBJIGNhbGxzIHdpbGwgbm90IHRyeSB0b1xuICAgICAgICAgICAgICAgIC8vIHVzZSB0aGUgdW5zdXBwb3J0ZWQgY2FsbGJhY2sgYW55bW9yZS5cbiAgICAgICAgICAgICAgICBtZXRhZGF0YS5mYWxsYmFja1RvTm9DYWxsYmFjayA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIG1ldGFkYXRhLm5vQ2FsbGJhY2sgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1ldGFkYXRhLm5vQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgdGFyZ2V0W25hbWVdKC4uLmFyZ3MpO1xuICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0YXJnZXRbbmFtZV0oLi4uYXJncywgbWFrZUNhbGxiYWNrKHsgcmVzb2x2ZSwgcmVqZWN0IH0sIG1ldGFkYXRhKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9O1xuXG4gICAgICAvKipcbiAgICAgICAqIFdyYXBzIGFuIGV4aXN0aW5nIG1ldGhvZCBvZiB0aGUgdGFyZ2V0IG9iamVjdCwgc28gdGhhdCBjYWxscyB0byBpdCBhcmVcbiAgICAgICAqIGludGVyY2VwdGVkIGJ5IHRoZSBnaXZlbiB3cmFwcGVyIGZ1bmN0aW9uLiBUaGUgd3JhcHBlciBmdW5jdGlvbiByZWNlaXZlcyxcbiAgICAgICAqIGFzIGl0cyBmaXJzdCBhcmd1bWVudCwgdGhlIG9yaWdpbmFsIGB0YXJnZXRgIG9iamVjdCwgZm9sbG93ZWQgYnkgZWFjaCBvZlxuICAgICAgICogdGhlIGFyZ3VtZW50cyBwYXNzZWQgdG8gdGhlIG9yaWdpbmFsIG1ldGhvZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFyZ2V0XG4gICAgICAgKiAgICAgICAgVGhlIG9yaWdpbmFsIHRhcmdldCBvYmplY3QgdGhhdCB0aGUgd3JhcHBlZCBtZXRob2QgYmVsb25ncyB0by5cbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IG1ldGhvZFxuICAgICAgICogICAgICAgIFRoZSBtZXRob2QgYmVpbmcgd3JhcHBlZC4gVGhpcyBpcyB1c2VkIGFzIHRoZSB0YXJnZXQgb2YgdGhlIFByb3h5XG4gICAgICAgKiAgICAgICAgb2JqZWN0IHdoaWNoIGlzIGNyZWF0ZWQgdG8gd3JhcCB0aGUgbWV0aG9kLlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gd3JhcHBlclxuICAgICAgICogICAgICAgIFRoZSB3cmFwcGVyIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBpbiBwbGFjZSBvZiBhIGRpcmVjdCBpbnZvY2F0aW9uXG4gICAgICAgKiAgICAgICAgb2YgdGhlIHdyYXBwZWQgbWV0aG9kLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtQcm94eTxmdW5jdGlvbj59XG4gICAgICAgKiAgICAgICAgQSBQcm94eSBvYmplY3QgZm9yIHRoZSBnaXZlbiBtZXRob2QsIHdoaWNoIGludm9rZXMgdGhlIGdpdmVuIHdyYXBwZXJcbiAgICAgICAqICAgICAgICBtZXRob2QgaW4gaXRzIHBsYWNlLlxuICAgICAgICovXG4gICAgICBjb25zdCB3cmFwTWV0aG9kID0gKHRhcmdldCwgbWV0aG9kLCB3cmFwcGVyKSA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJveHkobWV0aG9kLCB7XG4gICAgICAgICAgYXBwbHkodGFyZ2V0TWV0aG9kLCB0aGlzT2JqLCBhcmdzKSB7XG4gICAgICAgICAgICByZXR1cm4gd3JhcHBlci5jYWxsKHRoaXNPYmosIHRhcmdldCwgLi4uYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIGxldCBoYXNPd25Qcm9wZXJ0eSA9IEZ1bmN0aW9uLmNhbGwuYmluZChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcblxuICAgICAgLyoqXG4gICAgICAgKiBXcmFwcyBhbiBvYmplY3QgaW4gYSBQcm94eSB3aGljaCBpbnRlcmNlcHRzIGFuZCB3cmFwcyBjZXJ0YWluIG1ldGhvZHNcbiAgICAgICAqIGJhc2VkIG9uIHRoZSBnaXZlbiBgd3JhcHBlcnNgIGFuZCBgbWV0YWRhdGFgIG9iamVjdHMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IHRhcmdldFxuICAgICAgICogICAgICAgIFRoZSB0YXJnZXQgb2JqZWN0IHRvIHdyYXAuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IFt3cmFwcGVycyA9IHt9XVxuICAgICAgICogICAgICAgIEFuIG9iamVjdCB0cmVlIGNvbnRhaW5pbmcgd3JhcHBlciBmdW5jdGlvbnMgZm9yIHNwZWNpYWwgY2FzZXMuIEFueVxuICAgICAgICogICAgICAgIGZ1bmN0aW9uIHByZXNlbnQgaW4gdGhpcyBvYmplY3QgdHJlZSBpcyBjYWxsZWQgaW4gcGxhY2Ugb2YgdGhlXG4gICAgICAgKiAgICAgICAgbWV0aG9kIGluIHRoZSBzYW1lIGxvY2F0aW9uIGluIHRoZSBgdGFyZ2V0YCBvYmplY3QgdHJlZS4gVGhlc2VcbiAgICAgICAqICAgICAgICB3cmFwcGVyIG1ldGhvZHMgYXJlIGludm9rZWQgYXMgZGVzY3JpYmVkIGluIHtAc2VlIHdyYXBNZXRob2R9LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbbWV0YWRhdGEgPSB7fV1cbiAgICAgICAqICAgICAgICBBbiBvYmplY3QgdHJlZSBjb250YWluaW5nIG1ldGFkYXRhIHVzZWQgdG8gYXV0b21hdGljYWxseSBnZW5lcmF0ZVxuICAgICAgICogICAgICAgIFByb21pc2UtYmFzZWQgd3JhcHBlciBmdW5jdGlvbnMgZm9yIGFzeW5jaHJvbm91cy4gQW55IGZ1bmN0aW9uIGluXG4gICAgICAgKiAgICAgICAgdGhlIGB0YXJnZXRgIG9iamVjdCB0cmVlIHdoaWNoIGhhcyBhIGNvcnJlc3BvbmRpbmcgbWV0YWRhdGEgb2JqZWN0XG4gICAgICAgKiAgICAgICAgaW4gdGhlIHNhbWUgbG9jYXRpb24gaW4gdGhlIGBtZXRhZGF0YWAgdHJlZSBpcyByZXBsYWNlZCB3aXRoIGFuXG4gICAgICAgKiAgICAgICAgYXV0b21hdGljYWxseS1nZW5lcmF0ZWQgd3JhcHBlciBmdW5jdGlvbiwgYXMgZGVzY3JpYmVkIGluXG4gICAgICAgKiAgICAgICAge0BzZWUgd3JhcEFzeW5jRnVuY3Rpb259XG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge1Byb3h5PG9iamVjdD59XG4gICAgICAgKi9cbiAgICAgIGNvbnN0IHdyYXBPYmplY3QgPSAodGFyZ2V0LCB3cmFwcGVycyA9IHt9LCBtZXRhZGF0YSA9IHt9KSA9PiB7XG4gICAgICAgIGxldCBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGxldCBoYW5kbGVycyA9IHtcbiAgICAgICAgICBoYXMocHJveHlUYXJnZXQsIHByb3ApIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9wIGluIHRhcmdldCB8fCBwcm9wIGluIGNhY2hlO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBnZXQocHJveHlUYXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG4gICAgICAgICAgICBpZiAocHJvcCBpbiBjYWNoZSkge1xuICAgICAgICAgICAgICByZXR1cm4gY2FjaGVbcHJvcF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghKHByb3AgaW4gdGFyZ2V0KSkge1xuICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgdmFsdWUgPSB0YXJnZXRbcHJvcF07XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgbWV0aG9kIG9uIHRoZSB1bmRlcmx5aW5nIG9iamVjdC4gQ2hlY2sgaWYgd2UgbmVlZCB0byBkb1xuICAgICAgICAgICAgICAvLyBhbnkgd3JhcHBpbmcuXG5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiB3cmFwcGVyc1twcm9wXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSBhIHNwZWNpYWwtY2FzZSB3cmFwcGVyIGZvciB0aGlzIG1ldGhvZC5cbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHdyYXBNZXRob2QodGFyZ2V0LCB0YXJnZXRbcHJvcF0sIHdyYXBwZXJzW3Byb3BdKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChoYXNPd25Qcm9wZXJ0eShtZXRhZGF0YSwgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGFuIGFzeW5jIG1ldGhvZCB0aGF0IHdlIGhhdmUgbWV0YWRhdGEgZm9yLiBDcmVhdGUgYVxuICAgICAgICAgICAgICAgIC8vIFByb21pc2Ugd3JhcHBlciBmb3IgaXQuXG4gICAgICAgICAgICAgICAgbGV0IHdyYXBwZXIgPSB3cmFwQXN5bmNGdW5jdGlvbihwcm9wLCBtZXRhZGF0YVtwcm9wXSk7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB3cmFwTWV0aG9kKHRhcmdldCwgdGFyZ2V0W3Byb3BdLCB3cmFwcGVyKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgbWV0aG9kIHRoYXQgd2UgZG9uJ3Qga25vdyBvciBjYXJlIGFib3V0LiBSZXR1cm4gdGhlXG4gICAgICAgICAgICAgICAgLy8gb3JpZ2luYWwgbWV0aG9kLCBib3VuZCB0byB0aGUgdW5kZXJseWluZyBvYmplY3QuXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5iaW5kKHRhcmdldCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlICE9PSBudWxsICYmIChoYXNPd25Qcm9wZXJ0eSh3cmFwcGVycywgcHJvcCkgfHwgaGFzT3duUHJvcGVydHkobWV0YWRhdGEsIHByb3ApKSkge1xuICAgICAgICAgICAgICAvLyBUaGlzIGlzIGFuIG9iamVjdCB0aGF0IHdlIG5lZWQgdG8gZG8gc29tZSB3cmFwcGluZyBmb3IgdGhlIGNoaWxkcmVuXG4gICAgICAgICAgICAgIC8vIG9mLiBDcmVhdGUgYSBzdWItb2JqZWN0IHdyYXBwZXIgZm9yIGl0IHdpdGggdGhlIGFwcHJvcHJpYXRlIGNoaWxkXG4gICAgICAgICAgICAgIC8vIG1ldGFkYXRhLlxuICAgICAgICAgICAgICB2YWx1ZSA9IHdyYXBPYmplY3QodmFsdWUsIHdyYXBwZXJzW3Byb3BdLCBtZXRhZGF0YVtwcm9wXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBXZSBkb24ndCBuZWVkIHRvIGRvIGFueSB3cmFwcGluZyBmb3IgdGhpcyBwcm9wZXJ0eSxcbiAgICAgICAgICAgICAgLy8gc28ganVzdCBmb3J3YXJkIGFsbCBhY2Nlc3MgdG8gdGhlIHVuZGVybHlpbmcgb2JqZWN0LlxuICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2FjaGUsIHByb3AsIHtcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0W3Byb3BdO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FjaGVbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgc2V0KHByb3h5VGFyZ2V0LCBwcm9wLCB2YWx1ZSwgcmVjZWl2ZXIpIHtcbiAgICAgICAgICAgIGlmIChwcm9wIGluIGNhY2hlKSB7XG4gICAgICAgICAgICAgIGNhY2hlW3Byb3BdID0gdmFsdWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eShwcm94eVRhcmdldCwgcHJvcCwgZGVzYykge1xuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoY2FjaGUsIHByb3AsIGRlc2MpO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBkZWxldGVQcm9wZXJ0eShwcm94eVRhcmdldCwgcHJvcCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZGVsZXRlUHJvcGVydHkoY2FjaGUsIHByb3ApO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBQZXIgY29udHJhY3Qgb2YgdGhlIFByb3h5IEFQSSwgdGhlIFwiZ2V0XCIgcHJveHkgaGFuZGxlciBtdXN0IHJldHVybiB0aGVcbiAgICAgICAgLy8gb3JpZ2luYWwgdmFsdWUgb2YgdGhlIHRhcmdldCBpZiB0aGF0IHZhbHVlIGlzIGRlY2xhcmVkIHJlYWQtb25seSBhbmRcbiAgICAgICAgLy8gbm9uLWNvbmZpZ3VyYWJsZS4gRm9yIHRoaXMgcmVhc29uLCB3ZSBjcmVhdGUgYW4gb2JqZWN0IHdpdGggdGhlXG4gICAgICAgIC8vIHByb3RvdHlwZSBzZXQgdG8gYHRhcmdldGAgaW5zdGVhZCBvZiB1c2luZyBgdGFyZ2V0YCBkaXJlY3RseS5cbiAgICAgICAgLy8gT3RoZXJ3aXNlIHdlIGNhbm5vdCByZXR1cm4gYSBjdXN0b20gb2JqZWN0IGZvciBBUElzIHRoYXRcbiAgICAgICAgLy8gYXJlIGRlY2xhcmVkIHJlYWQtb25seSBhbmQgbm9uLWNvbmZpZ3VyYWJsZSwgc3VjaCBhcyBgY2hyb21lLmRldnRvb2xzYC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gVGhlIHByb3h5IGhhbmRsZXJzIHRoZW1zZWx2ZXMgd2lsbCBzdGlsbCB1c2UgdGhlIG9yaWdpbmFsIGB0YXJnZXRgXG4gICAgICAgIC8vIGluc3RlYWQgb2YgdGhlIGBwcm94eVRhcmdldGAsIHNvIHRoYXQgdGhlIG1ldGhvZHMgYW5kIHByb3BlcnRpZXMgYXJlXG4gICAgICAgIC8vIGRlcmVmZXJlbmNlZCB2aWEgdGhlIG9yaWdpbmFsIHRhcmdldHMuXG4gICAgICAgIGxldCBwcm94eVRhcmdldCA9IE9iamVjdC5jcmVhdGUodGFyZ2V0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm94eShwcm94eVRhcmdldCwgaGFuZGxlcnMpO1xuICAgICAgfTtcblxuICAgICAgLyoqXG4gICAgICAgKiBDcmVhdGVzIGEgc2V0IG9mIHdyYXBwZXIgZnVuY3Rpb25zIGZvciBhbiBldmVudCBvYmplY3QsIHdoaWNoIGhhbmRsZXNcbiAgICAgICAqIHdyYXBwaW5nIG9mIGxpc3RlbmVyIGZ1bmN0aW9ucyB0aGF0IHRob3NlIG1lc3NhZ2VzIGFyZSBwYXNzZWQuXG4gICAgICAgKlxuICAgICAgICogQSBzaW5nbGUgd3JhcHBlciBpcyBjcmVhdGVkIGZvciBlYWNoIGxpc3RlbmVyIGZ1bmN0aW9uLCBhbmQgc3RvcmVkIGluIGFcbiAgICAgICAqIG1hcC4gU3Vic2VxdWVudCBjYWxscyB0byBgYWRkTGlzdGVuZXJgLCBgaGFzTGlzdGVuZXJgLCBvciBgcmVtb3ZlTGlzdGVuZXJgXG4gICAgICAgKiByZXRyaWV2ZSB0aGUgb3JpZ2luYWwgd3JhcHBlciwgc28gdGhhdCAgYXR0ZW1wdHMgdG8gcmVtb3ZlIGFcbiAgICAgICAqIHByZXZpb3VzbHktYWRkZWQgbGlzdGVuZXIgd29yayBhcyBleHBlY3RlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0RlZmF1bHRXZWFrTWFwPGZ1bmN0aW9uLCBmdW5jdGlvbj59IHdyYXBwZXJNYXBcbiAgICAgICAqICAgICAgICBBIERlZmF1bHRXZWFrTWFwIG9iamVjdCB3aGljaCB3aWxsIGNyZWF0ZSB0aGUgYXBwcm9wcmlhdGUgd3JhcHBlclxuICAgICAgICogICAgICAgIGZvciBhIGdpdmVuIGxpc3RlbmVyIGZ1bmN0aW9uIHdoZW4gb25lIGRvZXMgbm90IGV4aXN0LCBhbmQgcmV0cmlldmVcbiAgICAgICAqICAgICAgICBhbiBleGlzdGluZyBvbmUgd2hlbiBpdCBkb2VzLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAgICAgKi9cbiAgICAgIGNvbnN0IHdyYXBFdmVudCA9IHdyYXBwZXJNYXAgPT4gKHtcbiAgICAgICAgYWRkTGlzdGVuZXIodGFyZ2V0LCBsaXN0ZW5lciwgLi4uYXJncykge1xuICAgICAgICAgIHRhcmdldC5hZGRMaXN0ZW5lcih3cmFwcGVyTWFwLmdldChsaXN0ZW5lciksIC4uLmFyZ3MpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGhhc0xpc3RlbmVyKHRhcmdldCwgbGlzdGVuZXIpIHtcbiAgICAgICAgICByZXR1cm4gdGFyZ2V0Lmhhc0xpc3RlbmVyKHdyYXBwZXJNYXAuZ2V0KGxpc3RlbmVyKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlTGlzdGVuZXIodGFyZ2V0LCBsaXN0ZW5lcikge1xuICAgICAgICAgIHRhcmdldC5yZW1vdmVMaXN0ZW5lcih3cmFwcGVyTWFwLmdldChsaXN0ZW5lcikpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gS2VlcCB0cmFjayBpZiB0aGUgZGVwcmVjYXRpb24gd2FybmluZyBoYXMgYmVlbiBsb2dnZWQgYXQgbGVhc3Qgb25jZS5cbiAgICAgIGxldCBsb2dnZWRTZW5kUmVzcG9uc2VEZXByZWNhdGlvbldhcm5pbmcgPSBmYWxzZTtcblxuICAgICAgY29uc3Qgb25NZXNzYWdlV3JhcHBlcnMgPSBuZXcgRGVmYXVsdFdlYWtNYXAobGlzdGVuZXIgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICByZXR1cm4gbGlzdGVuZXI7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogV3JhcHMgYSBtZXNzYWdlIGxpc3RlbmVyIGZ1bmN0aW9uIHNvIHRoYXQgaXQgbWF5IHNlbmQgcmVzcG9uc2VzIGJhc2VkIG9uXG4gICAgICAgICAqIGl0cyByZXR1cm4gdmFsdWUsIHJhdGhlciB0aGFuIGJ5IHJldHVybmluZyBhIHNlbnRpbmVsIHZhbHVlIGFuZCBjYWxsaW5nIGFcbiAgICAgICAgICogY2FsbGJhY2suIElmIHRoZSBsaXN0ZW5lciBmdW5jdGlvbiByZXR1cm5zIGEgUHJvbWlzZSwgdGhlIHJlc3BvbnNlIGlzXG4gICAgICAgICAqIHNlbnQgd2hlbiB0aGUgcHJvbWlzZSBlaXRoZXIgcmVzb2x2ZXMgb3IgcmVqZWN0cy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHsqfSBtZXNzYWdlXG4gICAgICAgICAqICAgICAgICBUaGUgbWVzc2FnZSBzZW50IGJ5IHRoZSBvdGhlciBlbmQgb2YgdGhlIGNoYW5uZWwuXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBzZW5kZXJcbiAgICAgICAgICogICAgICAgIERldGFpbHMgYWJvdXQgdGhlIHNlbmRlciBvZiB0aGUgbWVzc2FnZS5cbiAgICAgICAgICogQHBhcmFtIHtmdW5jdGlvbigqKX0gc2VuZFJlc3BvbnNlXG4gICAgICAgICAqICAgICAgICBBIGNhbGxiYWNrIHdoaWNoLCB3aGVuIGNhbGxlZCB3aXRoIGFuIGFyYml0cmFyeSBhcmd1bWVudCwgc2VuZHNcbiAgICAgICAgICogICAgICAgIHRoYXQgdmFsdWUgYXMgYSByZXNwb25zZS5cbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICAgICAqICAgICAgICBUcnVlIGlmIHRoZSB3cmFwcGVkIGxpc3RlbmVyIHJldHVybmVkIGEgUHJvbWlzZSwgd2hpY2ggd2lsbCBsYXRlclxuICAgICAgICAgKiAgICAgICAgeWllbGQgYSByZXNwb25zZS4gRmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAgICAgKi9cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG9uTWVzc2FnZShtZXNzYWdlLCBzZW5kZXIsIHNlbmRSZXNwb25zZSkge1xuICAgICAgICAgIGxldCBkaWRDYWxsU2VuZFJlc3BvbnNlID0gZmFsc2U7XG5cbiAgICAgICAgICBsZXQgd3JhcHBlZFNlbmRSZXNwb25zZTtcbiAgICAgICAgICBsZXQgc2VuZFJlc3BvbnNlUHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgd3JhcHBlZFNlbmRSZXNwb25zZSA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICBpZiAoIWxvZ2dlZFNlbmRSZXNwb25zZURlcHJlY2F0aW9uV2FybmluZykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihTRU5EX1JFU1BPTlNFX0RFUFJFQ0FUSU9OX1dBUk5JTkcsIG5ldyBFcnJvcigpLnN0YWNrKTtcbiAgICAgICAgICAgICAgICBsb2dnZWRTZW5kUmVzcG9uc2VEZXByZWNhdGlvbldhcm5pbmcgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGRpZENhbGxTZW5kUmVzcG9uc2UgPSB0cnVlO1xuICAgICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBsZXQgcmVzdWx0O1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSBsaXN0ZW5lcihtZXNzYWdlLCBzZW5kZXIsIHdyYXBwZWRTZW5kUmVzcG9uc2UpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmVzdWx0ID0gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBpc1Jlc3VsdFRoZW5hYmxlID0gcmVzdWx0ICE9PSB0cnVlICYmIGlzVGhlbmFibGUocmVzdWx0KTtcblxuICAgICAgICAgIC8vIElmIHRoZSBsaXN0ZW5lciBkaWRuJ3QgcmV0dXJuZWQgdHJ1ZSBvciBhIFByb21pc2UsIG9yIGNhbGxlZFxuICAgICAgICAgIC8vIHdyYXBwZWRTZW5kUmVzcG9uc2Ugc3luY2hyb25vdXNseSwgd2UgY2FuIGV4aXQgZWFybGllclxuICAgICAgICAgIC8vIGJlY2F1c2UgdGhlcmUgd2lsbCBiZSBubyByZXNwb25zZSBzZW50IGZyb20gdGhpcyBsaXN0ZW5lci5cbiAgICAgICAgICBpZiAocmVzdWx0ICE9PSB0cnVlICYmICFpc1Jlc3VsdFRoZW5hYmxlICYmICFkaWRDYWxsU2VuZFJlc3BvbnNlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gQSBzbWFsbCBoZWxwZXIgdG8gc2VuZCB0aGUgbWVzc2FnZSBpZiB0aGUgcHJvbWlzZSByZXNvbHZlc1xuICAgICAgICAgIC8vIGFuZCBhbiBlcnJvciBpZiB0aGUgcHJvbWlzZSByZWplY3RzIChhIHdyYXBwZWQgc2VuZE1lc3NhZ2UgaGFzXG4gICAgICAgICAgLy8gdG8gdHJhbnNsYXRlIHRoZSBtZXNzYWdlIGludG8gYSByZXNvbHZlZCBwcm9taXNlIG9yIGEgcmVqZWN0ZWRcbiAgICAgICAgICAvLyBwcm9taXNlKS5cbiAgICAgICAgICBjb25zdCBzZW5kUHJvbWlzZWRSZXN1bHQgPSBwcm9taXNlID0+IHtcbiAgICAgICAgICAgIHByb21pc2UudGhlbihtc2cgPT4ge1xuICAgICAgICAgICAgICAvLyBzZW5kIHRoZSBtZXNzYWdlIHZhbHVlLlxuICAgICAgICAgICAgICBzZW5kUmVzcG9uc2UobXNnKTtcbiAgICAgICAgICAgIH0sIGVycm9yID0+IHtcbiAgICAgICAgICAgICAgLy8gU2VuZCBhIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIGVycm9yIGlmIHRoZSByZWplY3RlZCB2YWx1ZVxuICAgICAgICAgICAgICAvLyBpcyBhbiBpbnN0YW5jZSBvZiBlcnJvciwgb3IgdGhlIG9iamVjdCBpdHNlbGYgb3RoZXJ3aXNlLlxuICAgICAgICAgICAgICBsZXQgbWVzc2FnZTtcbiAgICAgICAgICAgICAgaWYgKGVycm9yICYmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yIHx8IHR5cGVvZiBlcnJvci5tZXNzYWdlID09PSBcInN0cmluZ1wiKSkge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWRcIjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHNlbmRSZXNwb25zZSh7XG4gICAgICAgICAgICAgICAgX19tb3pXZWJFeHRlbnNpb25Qb2x5ZmlsbFJlamVjdF9fOiB0cnVlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2VcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAvLyBQcmludCBhbiBlcnJvciBvbiB0aGUgY29uc29sZSBpZiB1bmFibGUgdG8gc2VuZCB0aGUgcmVzcG9uc2UuXG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gc2VuZCBvbk1lc3NhZ2UgcmVqZWN0ZWQgcmVwbHlcIiwgZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICAvLyBJZiB0aGUgbGlzdGVuZXIgcmV0dXJuZWQgYSBQcm9taXNlLCBzZW5kIHRoZSByZXNvbHZlZCB2YWx1ZSBhcyBhXG4gICAgICAgICAgLy8gcmVzdWx0LCBvdGhlcndpc2Ugd2FpdCB0aGUgcHJvbWlzZSByZWxhdGVkIHRvIHRoZSB3cmFwcGVkU2VuZFJlc3BvbnNlXG4gICAgICAgICAgLy8gY2FsbGJhY2sgdG8gcmVzb2x2ZSBhbmQgc2VuZCBpdCBhcyBhIHJlc3BvbnNlLlxuICAgICAgICAgIGlmIChpc1Jlc3VsdFRoZW5hYmxlKSB7XG4gICAgICAgICAgICBzZW5kUHJvbWlzZWRSZXN1bHQocmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VuZFByb21pc2VkUmVzdWx0KHNlbmRSZXNwb25zZVByb21pc2UpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIExldCBDaHJvbWUga25vdyB0aGF0IHRoZSBsaXN0ZW5lciBpcyByZXBseWluZy5cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB3cmFwcGVkU2VuZE1lc3NhZ2VDYWxsYmFjayA9ICh7IHJlamVjdCwgcmVzb2x2ZSB9LCByZXBseSkgPT4ge1xuICAgICAgICBpZiAoY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yKSB7XG4gICAgICAgICAgLy8gRGV0ZWN0IHdoZW4gbm9uZSBvZiB0aGUgbGlzdGVuZXJzIHJlcGxpZWQgdG8gdGhlIHNlbmRNZXNzYWdlIGNhbGwgYW5kIHJlc29sdmVcbiAgICAgICAgICAvLyB0aGUgcHJvbWlzZSB0byB1bmRlZmluZWQgYXMgaW4gRmlyZWZveC5cbiAgICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvd2ViZXh0ZW5zaW9uLXBvbHlmaWxsL2lzc3Vlcy8xMzBcbiAgICAgICAgICBpZiAoY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yLm1lc3NhZ2UgPT09IENIUk9NRV9TRU5EX01FU1NBR0VfQ0FMTEJBQ0tfTk9fUkVTUE9OU0VfTUVTU0FHRSkge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QoY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocmVwbHkgJiYgcmVwbHkuX19tb3pXZWJFeHRlbnNpb25Qb2x5ZmlsbFJlamVjdF9fKSB7XG4gICAgICAgICAgLy8gQ29udmVydCBiYWNrIHRoZSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBlcnJvciBpbnRvXG4gICAgICAgICAgLy8gYW4gRXJyb3IgaW5zdGFuY2UuXG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihyZXBseS5tZXNzYWdlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZShyZXBseSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHdyYXBwZWRTZW5kTWVzc2FnZSA9IChuYW1lLCBtZXRhZGF0YSwgYXBpTmFtZXNwYWNlT2JqLCAuLi5hcmdzKSA9PiB7XG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCA8IG1ldGFkYXRhLm1pbkFyZ3MpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGF0IGxlYXN0ICR7bWV0YWRhdGEubWluQXJnc30gJHtwbHVyYWxpemVBcmd1bWVudHMobWV0YWRhdGEubWluQXJncyl9IGZvciAke25hbWV9KCksIGdvdCAke2FyZ3MubGVuZ3RofWApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gbWV0YWRhdGEubWF4QXJncykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgYXQgbW9zdCAke21ldGFkYXRhLm1heEFyZ3N9ICR7cGx1cmFsaXplQXJndW1lbnRzKG1ldGFkYXRhLm1heEFyZ3MpfSBmb3IgJHtuYW1lfSgpLCBnb3QgJHthcmdzLmxlbmd0aH1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgY29uc3Qgd3JhcHBlZENiID0gd3JhcHBlZFNlbmRNZXNzYWdlQ2FsbGJhY2suYmluZChudWxsLCB7IHJlc29sdmUsIHJlamVjdCB9KTtcbiAgICAgICAgICBhcmdzLnB1c2god3JhcHBlZENiKTtcbiAgICAgICAgICBhcGlOYW1lc3BhY2VPYmouc2VuZE1lc3NhZ2UoLi4uYXJncyk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgY29uc3Qgc3RhdGljV3JhcHBlcnMgPSB7XG4gICAgICAgIHJ1bnRpbWU6IHtcbiAgICAgICAgICBvbk1lc3NhZ2U6IHdyYXBFdmVudChvbk1lc3NhZ2VXcmFwcGVycyksXG4gICAgICAgICAgb25NZXNzYWdlRXh0ZXJuYWw6IHdyYXBFdmVudChvbk1lc3NhZ2VXcmFwcGVycyksXG4gICAgICAgICAgc2VuZE1lc3NhZ2U6IHdyYXBwZWRTZW5kTWVzc2FnZS5iaW5kKG51bGwsIFwic2VuZE1lc3NhZ2VcIiwgeyBtaW5BcmdzOiAxLCBtYXhBcmdzOiAzIH0pXG4gICAgICAgIH0sXG4gICAgICAgIHRhYnM6IHtcbiAgICAgICAgICBzZW5kTWVzc2FnZTogd3JhcHBlZFNlbmRNZXNzYWdlLmJpbmQobnVsbCwgXCJzZW5kTWVzc2FnZVwiLCB7IG1pbkFyZ3M6IDIsIG1heEFyZ3M6IDMgfSlcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNvbnN0IHNldHRpbmdNZXRhZGF0YSA9IHtcbiAgICAgICAgY2xlYXI6IHsgbWluQXJnczogMSwgbWF4QXJnczogMSB9LFxuICAgICAgICBnZXQ6IHsgbWluQXJnczogMSwgbWF4QXJnczogMSB9LFxuICAgICAgICBzZXQ6IHsgbWluQXJnczogMSwgbWF4QXJnczogMSB9XG4gICAgICB9O1xuICAgICAgYXBpTWV0YWRhdGEucHJpdmFjeSA9IHtcbiAgICAgICAgbmV0d29yazoge1xuICAgICAgICAgIG5ldHdvcmtQcmVkaWN0aW9uRW5hYmxlZDogc2V0dGluZ01ldGFkYXRhLFxuICAgICAgICAgIHdlYlJUQ0lQSGFuZGxpbmdQb2xpY3k6IHNldHRpbmdNZXRhZGF0YVxuICAgICAgICB9LFxuICAgICAgICBzZXJ2aWNlczoge1xuICAgICAgICAgIHBhc3N3b3JkU2F2aW5nRW5hYmxlZDogc2V0dGluZ01ldGFkYXRhXG4gICAgICAgIH0sXG4gICAgICAgIHdlYnNpdGVzOiB7XG4gICAgICAgICAgaHlwZXJsaW5rQXVkaXRpbmdFbmFibGVkOiBzZXR0aW5nTWV0YWRhdGEsXG4gICAgICAgICAgcmVmZXJyZXJzRW5hYmxlZDogc2V0dGluZ01ldGFkYXRhXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiB3cmFwT2JqZWN0KGNocm9tZSwgc3RhdGljV3JhcHBlcnMsIGFwaU1ldGFkYXRhKTtcbiAgICB9O1xuXG4gICAgLy8gVGhlIGJ1aWxkIHByb2Nlc3MgYWRkcyBhIFVNRCB3cmFwcGVyIGFyb3VuZCB0aGlzIGZpbGUsIHdoaWNoIG1ha2VzIHRoZVxuICAgIC8vIGBtb2R1bGVgIHZhcmlhYmxlIGF2YWlsYWJsZS5cbiAgICBtb2R1bGUuZXhwb3J0cyA9IHdyYXBBUElzKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGJyb3dzZXI7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1icm93c2VyLXBvbHlmaWxsLmpzLm1hcFxuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdvd25LZXlzJykgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICAvLyBXZSBjYW4ndCB1c2UgdGhpcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbiAgLy8gZGVvcHRpbWl6YXRpb24gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3N1xuICByZXR1cm4gVjhfVkVSU0lPTiA+PSA1MSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIHZhciBjb25zdHJ1Y3RvciA9IGFycmF5LmNvbnN0cnVjdG9yID0ge307XG4gICAgY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBmb286IDEgfTtcbiAgICB9O1xuICAgIHJldHVybiBhcnJheVtNRVRIT0RfTkFNRV0oQm9vbGVhbikuZm9vICE9PSAxO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIHByb3BlcnR5S2V5ID0gdG9QcmltaXRpdmUoa2V5KTtcbiAgaWYgKHByb3BlcnR5S2V5IGluIG9iamVjdCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIHByb3BlcnR5S2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbcHJvcGVydHlLZXldID0gdmFsdWU7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lKSB7XG4gIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgJyArIChuYW1lID8gbmFtZSArICcgJyA6ICcnKSArICdpbnZvY2F0aW9uJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcblxuLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdID09PSBpdCk7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBFTlRSSUVTKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEVOVFJJRVMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB2YXIgcmV0dXJuTWV0aG9kID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXR1cm5NZXRob2QgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0dXJuTWV0aG9kLmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuICB2YXIga2V5cyA9IG93bktleXMoc291cmNlKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbiAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoIWhhcyh0YXJnZXQsIGtleSkpIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgfVxufTtcbiIsInZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgaWYgKChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSAmJiBPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG4gIGluZGV4T2Y6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBIZWxwZXIgZm9yIGEgcG9wdWxhciByZXBlYXRpbmcgY2FzZSBvZiB0aGUgc3BlYzpcbi8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS5cbi8vIElmIGludGVnZXIgPCAwLCBsZXQgcmVzdWx0IGJlIG1heCgobGVuZ3RoICsgaW50ZWdlciksIDApOyBlbHNlIGxldCByZXN1bHQgYmUgbWluKGludGVnZXIsIGxlbmd0aCkuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIHZhciBpbnRlZ2VyID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGludGVnZXIgPCAwID8gbWF4KGludGVnZXIgKyBsZW5ndGgsIDApIDogbWluKGludGVnZXIsIGxlbmd0aCk7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoTywga2V5ID0ga2V5c1tpbmRleCsrXSwgUHJvcGVydGllc1trZXldKTtcbiAgcmV0dXJuIE87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIEFSUkFZX0lURVJBVE9SID0gJ0FycmF5IEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKEFSUkFZX0lURVJBVE9SKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5lbnRyaWVzXG4vLyBgQXJyYXkucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmtleXNcbi8vIGBBcnJheS5wcm90b3R5cGUudmFsdWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS52YWx1ZXNcbi8vIGBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAaXRlcmF0b3Jcbi8vIGBDcmVhdGVBcnJheUl0ZXJhdG9yYCBpbnRlcm5hbCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZWFycmF5aXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lSXRlcmF0b3IoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBBUlJBWV9JVEVSQVRPUixcbiAgICB0YXJnZXQ6IHRvSW5kZXhlZE9iamVjdChpdGVyYXRlZCksIC8vIHRhcmdldFxuICAgIGluZGV4OiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICAgIGtpbmQ6IGtpbmQgICAgICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICB9KTtcbi8vIGAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0lYXJyYXlpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgdGFyZ2V0ID0gc3RhdGUudGFyZ2V0O1xuICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4Kys7XG4gIGlmICghdGFyZ2V0IHx8IGluZGV4ID49IHRhcmdldC5sZW5ndGgpIHtcbiAgICBzdGF0ZS50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHsgdmFsdWU6IGluZGV4LCBkb25lOiBmYWxzZSB9O1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IHRhcmdldFtpbmRleF0sIGRvbmU6IGZhbHNlIH07XG4gIHJldHVybiB7IHZhbHVlOiBbaW5kZXgsIHRhcmdldFtpbmRleF1dLCBkb25lOiBmYWxzZSB9O1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyVcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZXVubWFwcGVkYXJndW1lbnRzb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1jcmVhdGVtYXBwZWRhcmd1bWVudHNvYmplY3Rcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgb3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIG9wdGlvbnMpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgY2FsbGVkID0gMDtcbiAgdmFyIGl0ZXJhdG9yV2l0aFJldHVybiA9IHtcbiAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBkb25lOiAhIWNhbGxlZCsrIH07XG4gICAgfSxcbiAgICAncmV0dXJuJzogZnVuY3Rpb24gKCkge1xuICAgICAgU0FGRV9DTE9TSU5HID0gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIGl0ZXJhdG9yV2l0aFJldHVybltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gIEFycmF5LmZyb20oaXRlcmF0b3JXaXRoUmV0dXJuLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBTS0lQX0NMT1NJTkcpIHtcbiAgaWYgKCFTS0lQX0NMT1NJTkcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgSVRFUkFUSU9OX1NVUFBPUlQgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgb2JqZWN0W0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4geyBkb25lOiBJVEVSQVRJT05fU1VQUE9SVCA9IHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICAgIGV4ZWMob2JqZWN0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gSVRFUkFUSU9OX1NVUFBPUlQ7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbi8vIGBTcGVjaWVzQ29uc3RydWN0b3JgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3BlY2llc2NvbnN0cnVjdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBkZWZhdWx0Q29uc3RydWN0b3IpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gZGVmYXVsdENvbnN0cnVjdG9yIDogYUZ1bmN0aW9uKFMpO1xufTtcbiIsIi8vIGl0ZXJhYmxlIERPTSBjb2xsZWN0aW9uc1xuLy8gZmxhZyAtIGBpdGVyYWJsZWAgaW50ZXJmYWNlIC0gJ2VudHJpZXMnLCAna2V5cycsICd2YWx1ZXMnLCAnZm9yRWFjaCcgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENTU1J1bGVMaXN0OiAwLFxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiAwLFxuICBDU1NWYWx1ZUxpc3Q6IDAsXG4gIENsaWVudFJlY3RMaXN0OiAwLFxuICBET01SZWN0TGlzdDogMCxcbiAgRE9NU3RyaW5nTGlzdDogMCxcbiAgRE9NVG9rZW5MaXN0OiAxLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogMCxcbiAgRmlsZUxpc3Q6IDAsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiAwLFxuICBIVE1MQ29sbGVjdGlvbjogMCxcbiAgSFRNTEZvcm1FbGVtZW50OiAwLFxuICBIVE1MU2VsZWN0RWxlbWVudDogMCxcbiAgTWVkaWFMaXN0OiAwLFxuICBNaW1lVHlwZUFycmF5OiAwLFxuICBOYW1lZE5vZGVNYXA6IDAsXG4gIE5vZGVMaXN0OiAxLFxuICBQYWludFJlcXVlc3RMaXN0OiAwLFxuICBQbHVnaW46IDAsXG4gIFBsdWdpbkFycmF5OiAwLFxuICBTVkdMZW5ndGhMaXN0OiAwLFxuICBTVkdOdW1iZXJMaXN0OiAwLFxuICBTVkdQYXRoU2VnTGlzdDogMCxcbiAgU1ZHUG9pbnRMaXN0OiAwLFxuICBTVkdTdHJpbmdMaXN0OiAwLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiAwLFxuICBTb3VyY2VCdWZmZXJMaXN0OiAwLFxuICBTdHlsZVNoZWV0TGlzdDogMCxcbiAgVGV4dFRyYWNrQ3VlTGlzdDogMCxcbiAgVGV4dFRyYWNrTGlzdDogMCxcbiAgVG91Y2hMaXN0OiAwXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcbnZhciBVU0VfU1lNQk9MX0FTX1VJRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBuYXRpdmVPYmplY3RDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkJyk7XG52YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZvckVhY2g7XG5cbnZhciBISURERU4gPSBzaGFyZWRLZXkoJ2hpZGRlbicpO1xudmFyIFNZTUJPTCA9ICdTeW1ib2wnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFRPX1BSSU1JVElWRSA9IHdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFNZTUJPTCk7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJHN0cmluZ2lmeSA9IGdldEJ1aWx0SW4oJ0pTT04nLCAnc3RyaW5naWZ5Jyk7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwuZjtcbnZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmY7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvdHlwZVN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzdHJpbmctdG8tc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXRvLXN0cmluZy1yZWdpc3RyeScpO1xudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgVVNFX1NFVFRFUiA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2NyaXB0b3IgPSBERVNDUklQVE9SUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RDcmVhdGUobmF0aXZlRGVmaW5lUHJvcGVydHkoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24gKE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgdmFyIE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlLCBQKTtcbiAgaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IpIGRlbGV0ZSBPYmplY3RQcm90b3R5cGVbUF07XG4gIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICBpZiAoT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciAmJiBPICE9PSBPYmplY3RQcm90b3R5cGUpIHtcbiAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90b3R5cGUsIFAsIE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IpO1xuICB9XG59IDogbmF0aXZlRGVmaW5lUHJvcGVydHk7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZywgZGVzY3JpcHRpb24pIHtcbiAgdmFyIHN5bWJvbCA9IEFsbFN5bWJvbHNbdGFnXSA9IG5hdGl2ZU9iamVjdENyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzZXRJbnRlcm5hbFN0YXRlKHN5bWJvbCwge1xuICAgIHR5cGU6IFNZTUJPTCxcbiAgICB0YWc6IHRhZyxcbiAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb25cbiAgfSk7XG4gIGlmICghREVTQ1JJUFRPUlMpIHN5bWJvbC5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICByZXR1cm4gc3ltYm9sO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChpdCkgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgaWYgKE8gPT09IE9iamVjdFByb3RvdHlwZSkgJGRlZmluZVByb3BlcnR5KE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIFAsIEF0dHJpYnV0ZXMpO1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFBdHRyaWJ1dGVzLmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKE8sIEhJRERFTikpIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIEhJRERFTiwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHt9KSk7XG4gICAgICBPW0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXMoTywgSElEREVOKSAmJiBPW0hJRERFTl1ba2V5XSkgT1tISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEF0dHJpYnV0ZXMgPSBuYXRpdmVPYmplY3RDcmVhdGUoQXR0cmlidXRlcywgeyBlbnVtZXJhYmxlOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2NyaXB0b3IoTywga2V5LCBBdHRyaWJ1dGVzKTtcbiAgfSByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkoTywga2V5LCBBdHRyaWJ1dGVzKTtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIHByb3BlcnRpZXMgPSB0b0luZGV4ZWRPYmplY3QoUHJvcGVydGllcyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhwcm9wZXJ0aWVzKS5jb25jYXQoJGdldE93blByb3BlcnR5U3ltYm9scyhwcm9wZXJ0aWVzKSk7XG4gICRmb3JFYWNoKGtleXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIURFU0NSSVBUT1JTIHx8ICRwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHByb3BlcnRpZXMsIGtleSkpICRkZWZpbmVQcm9wZXJ0eShPLCBrZXksIHByb3BlcnRpZXNba2V5XSk7XG4gIH0pO1xuICByZXR1cm4gTztcbn07XG5cbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IG5hdGl2ZU9iamVjdENyZWF0ZShPKSA6ICRkZWZpbmVQcm9wZXJ0aWVzKG5hdGl2ZU9iamVjdENyZWF0ZShPKSwgUHJvcGVydGllcyk7XG59O1xuXG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgUCA9IHRvUHJpbWl0aXZlKFYsIHRydWUpO1xuICB2YXIgZW51bWVyYWJsZSA9IG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodGhpcywgUCk7XG4gIGlmICh0aGlzID09PSBPYmplY3RQcm90b3R5cGUgJiYgaGFzKEFsbFN5bWJvbHMsIFApICYmICFoYXMoT2JqZWN0UHJvdG90eXBlU3ltYm9scywgUCkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIGVudW1lcmFibGUgfHwgIWhhcyh0aGlzLCBQKSB8fCAhaGFzKEFsbFN5bWJvbHMsIFApIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtQXSA/IGVudW1lcmFibGUgOiB0cnVlO1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICB2YXIgaXQgPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90b3R5cGUgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBkZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpO1xuICBpZiAoZGVzY3JpcHRvciAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSB7XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZGVzY3JpcHRvcjtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoaGlkZGVuS2V5cywga2V5KSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhPKSB7XG4gIHZhciBJU19PQkpFQ1RfUFJPVE9UWVBFID0gTyA9PT0gT2JqZWN0UHJvdG90eXBlO1xuICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKElTX09CSkVDVF9QUk9UT1RZUEUgPyBPYmplY3RQcm90b3R5cGVTeW1ib2xzIDogdG9JbmRleGVkT2JqZWN0KE8pKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICAkZm9yRWFjaChuYW1lcywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSAmJiAoIUlTX09CSkVDVF9QUk9UT1RZUEUgfHwgaGFzKE9iamVjdFByb3RvdHlwZSwga2V5KSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIGBTeW1ib2xgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zeW1ib2wtY29uc3RydWN0b3JcbmlmICghTkFUSVZFX1NZTUJPTCkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3InKTtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSAhYXJndW1lbnRzLmxlbmd0aCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IFN0cmluZyhhcmd1bWVudHNbMF0pO1xuICAgIHZhciB0YWcgPSB1aWQoZGVzY3JpcHRpb24pO1xuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90b3R5cGUpIHNldHRlci5jYWxsKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzY3JpcHRvcih0aGlzLCB0YWcsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIFVTRV9TRVRURVIpIHNldFN5bWJvbERlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6IHNldHRlciB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcsIGRlc2NyaXB0aW9uKTtcbiAgfTtcblxuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnRhZztcbiAgfSk7XG5cbiAgcmVkZWZpbmUoJFN5bWJvbCwgJ3dpdGhvdXRTZXR0ZXInLCBmdW5jdGlvbiAoZGVzY3JpcHRpb24pIHtcbiAgICByZXR1cm4gd3JhcCh1aWQoZGVzY3JpcHRpb24pLCBkZXNjcmlwdGlvbik7XG4gIH0pO1xuXG4gIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIGRlZmluZVByb3BlcnR5TW9kdWxlLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2VsbEtub3duU3ltYm9sKG5hbWUpLCBuYW1lKTtcbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1TeW1ib2wtZGVzY3JpcHRpb25cbiAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eSgkU3ltYm9sW1BST1RPVFlQRV0sICdkZXNjcmlwdGlvbicsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gZGVzY3JpcHRpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLmRlc2NyaXB0aW9uO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghSVNfUFVSRSkge1xuICAgICAgcmVkZWZpbmUoT2JqZWN0UHJvdG90eXBlLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHsgdW5zYWZlOiB0cnVlIH0pO1xuICAgIH1cbiAgfVxufVxuXG4kKHsgZ2xvYmFsOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MLCBzaGFtOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIFN5bWJvbDogJFN5bWJvbFxufSk7XG5cbiRmb3JFYWNoKG9iamVjdEtleXMoV2VsbEtub3duU3ltYm9sc1N0b3JlKSwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgZGVmaW5lV2VsbEtub3duU3ltYm9sKG5hbWUpO1xufSk7XG5cbiQoeyB0YXJnZXQ6IFNZTUJPTCwgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIC8vIGBTeW1ib2wuZm9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLmZvclxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBzdHJpbmcgPSBTdHJpbmcoa2V5KTtcbiAgICBpZiAoaGFzKFN0cmluZ1RvU3ltYm9sUmVnaXN0cnksIHN0cmluZykpIHJldHVybiBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5W3N0cmluZ107XG4gICAgdmFyIHN5bWJvbCA9ICRTeW1ib2woc3RyaW5nKTtcbiAgICBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5W3N0cmluZ10gPSBzeW1ib2w7XG4gICAgU3ltYm9sVG9TdHJpbmdSZWdpc3RyeVtzeW1ib2xdID0gc3RyaW5nO1xuICAgIHJldHVybiBzeW1ib2w7XG4gIH0sXG4gIC8vIGBTeW1ib2wua2V5Rm9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLmtleWZvclxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCcpO1xuICAgIGlmIChoYXMoU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSwgc3ltKSkgcmV0dXJuIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnlbc3ltXTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IFVTRV9TRVRURVIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgVVNFX1NFVFRFUiA9IGZhbHNlOyB9XG59KTtcblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIC8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yXG59KTtcblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wgfSwge1xuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlzeW1ib2xzXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIENocm9tZSAzOCBhbmQgMzkgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIGZhaWxzIG9uIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM0NDNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IGZhaWxzKGZ1bmN0aW9uICgpIHsgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYoMSk7IH0pIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbi8vIGBKU09OLnN0cmluZ2lmeWAgbWV0aG9kIGJlaGF2aW9yIHdpdGggc3ltYm9sc1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtanNvbi5zdHJpbmdpZnlcbmlmICgkc3RyaW5naWZ5KSB7XG4gIHZhciBGT1JDRURfSlNPTl9TVFJJTkdJRlkgPSAhTkFUSVZFX1NZTUJPTCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN5bWJvbCA9ICRTeW1ib2woKTtcbiAgICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAgIHJldHVybiAkc3RyaW5naWZ5KFtzeW1ib2xdKSAhPSAnW251bGxdJ1xuICAgICAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gICAgICB8fCAkc3RyaW5naWZ5KHsgYTogc3ltYm9sIH0pICE9ICd7fSdcbiAgICAgIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gICAgICB8fCAkc3RyaW5naWZ5KE9iamVjdChzeW1ib2wpKSAhPSAne30nO1xuICB9KTtcblxuICAkKHsgdGFyZ2V0OiAnSlNPTicsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEX0pTT05fU1RSSU5HSUZZIH0sIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCwgcmVwbGFjZXIsIHNwYWNlKSB7XG4gICAgICB2YXIgYXJncyA9IFtpdF07XG4gICAgICB2YXIgaW5kZXggPSAxO1xuICAgICAgdmFyICRyZXBsYWNlcjtcbiAgICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaW5kZXgpIGFyZ3MucHVzaChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgICAgJHJlcGxhY2VyID0gcmVwbGFjZXI7XG4gICAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgJHJlcGxhY2VyID09ICdmdW5jdGlvbicpIHZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgICB9O1xuICAgICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgICAgcmV0dXJuICRzdHJpbmdpZnkuYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfVxuICB9KTtcbn1cblxuLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG5pZiAoISRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdKSB7XG4gIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xufVxuLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11gIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsIFNZTUJPTCk7XG5cbmhpZGRlbktleXNbSElEREVOXSA9IHRydWU7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcblxubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoaW5zcGVjdFNvdXJjZShXZWFrTWFwKSk7XG4iLCJ2YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG5cbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMoaXQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XSdcbiAgICA/IGdldFdpbmRvd05hbWVzKGl0KVxuICAgIDogbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyh0b0luZGV4ZWRPYmplY3QoaXQpKTtcbn07XG4iLCJ2YXIgcGF0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXRoJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FKSB7XG4gIHZhciBTeW1ib2wgPSBwYXRoLlN5bWJvbCB8fCAocGF0aC5TeW1ib2wgPSB7fSk7XG4gIGlmICghaGFzKFN5bWJvbCwgTkFNRSkpIGRlZmluZVByb3BlcnR5KFN5bWJvbCwgTkFNRSwge1xuICAgIHZhbHVlOiB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlLmYoTkFNRSlcbiAgfSk7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxuLy8gYEFycmF5U3BlY2llc0NyZWF0ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheXNwZWNpZXNjcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsQXJyYXksIGxlbmd0aCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWxBcnJheSkpIHtcbiAgICBDID0gb3JpZ2luYWxBcnJheS5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmICh0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7XG4gICAgZWxzZSBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBuZXcgKEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQykobGVuZ3RoID09PSAwID8gMCA6IGxlbmd0aCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGZpbHRlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maWx0ZXI7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xudmFyIGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC11c2VzLXRvLWxlbmd0aCcpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ2ZpbHRlcicpO1xuLy8gRWRnZSAxNC0gaXNzdWVcbnZhciBVU0VTX1RPX0xFTkdUSCA9IGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoKCdmaWx0ZXInKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbHRlclxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIHx8ICFVU0VTX1RPX0xFTkdUSCB9LCB7XG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xudmFyIGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC11c2VzLXRvLWxlbmd0aCcpO1xuXG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2ZvckVhY2gnKTtcbnZhciBVU0VTX1RPX0xFTkdUSCA9IGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoKCdmb3JFYWNoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxubW9kdWxlLmV4cG9ydHMgPSAoIVNUUklDVF9NRVRIT0QgfHwgIVVTRVNfVE9fTEVOR1RIKSA/IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0gOiBbXS5mb3JFYWNoO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSBmYWxzZTtcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG4vLyBgJUl0ZXJhdG9yUHJvdG90eXBlJWAgb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLW9iamVjdFxudmFyIEl0ZXJhdG9yUHJvdG90eXBlLCBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUsIGFycmF5SXRlcmF0b3I7XG5cbmlmIChbXS5rZXlzKSB7XG4gIGFycmF5SXRlcmF0b3IgPSBbXS5rZXlzKCk7XG4gIC8vIFNhZmFyaSA4IGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxuICBpZiAoISgnbmV4dCcgaW4gYXJyYXlJdGVyYXRvcikpIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSB0cnVlO1xuICBlbHNlIHtcbiAgICBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihnZXRQcm90b3R5cGVPZihhcnJheUl0ZXJhdG9yKSk7XG4gICAgaWYgKFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSkgSXRlcmF0b3JQcm90b3R5cGUgPSBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cbn1cblxuaWYgKEl0ZXJhdG9yUHJvdG90eXBlID09IHVuZGVmaW5lZCkgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbmlmICghSVNfUFVSRSAmJiAhaGFzKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUikpIHtcbiAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBJdGVyYXRvclByb3RvdHlwZTogSXRlcmF0b3JQcm90b3R5cGUsXG4gIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlM6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlNcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlcicpO1xuXG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLy8gYE9iamVjdC5nZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0cHJvdG90eXBlb2Zcbm1vZHVsZS5leHBvcnRzID0gQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvdHlwZSA6IG51bGw7XG59O1xuIiwidmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcnKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKCFUT19TVFJJTkdfVEFHX1NVUFBPUlQpIHtcbiAgcmVkZWZpbmUoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgdG9TdHJpbmcsIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyB7fS50b1N0cmluZyA6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgTmF0aXZlUHJvbWlzZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtcHJvbWlzZS1jb25zdHJ1Y3RvcicpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21pY3JvdGFzaycpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIGhvc3RSZXBvcnRFcnJvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGVyZm9ybScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsUHJvbWlzZVN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoUFJPTUlTRSk7XG52YXIgUHJvbWlzZUNvbnN0cnVjdG9yID0gTmF0aXZlUHJvbWlzZTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciAkZmV0Y2ggPSBnZXRCdWlsdEluKCdmZXRjaCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcbnZhciBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eTtcbnZhciBJU19OT0RFID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG52YXIgRElTUEFUQ0hfRVZFTlQgPSAhIShkb2N1bWVudCAmJiBkb2N1bWVudC5jcmVhdGVFdmVudCAmJiBnbG9iYWwuZGlzcGF0Y2hFdmVudCk7XG52YXIgVU5IQU5ETEVEX1JFSkVDVElPTiA9ICd1bmhhbmRsZWRyZWplY3Rpb24nO1xudmFyIFJFSkVDVElPTl9IQU5ETEVEID0gJ3JlamVjdGlvbmhhbmRsZWQnO1xudmFyIFBFTkRJTkcgPSAwO1xudmFyIEZVTEZJTExFRCA9IDE7XG52YXIgUkVKRUNURUQgPSAyO1xudmFyIEhBTkRMRUQgPSAxO1xudmFyIFVOSEFORExFRCA9IDI7XG52YXIgSW50ZXJuYWwsIE93blByb21pc2VDYXBhYmlsaXR5LCBQcm9taXNlV3JhcHBlciwgbmF0aXZlVGhlbjtcblxudmFyIEZPUkNFRCA9IGlzRm9yY2VkKFBST01JU0UsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIEdMT0JBTF9DT1JFX0pTX1BST01JU0UgPSBpbnNwZWN0U291cmNlKFByb21pc2VDb25zdHJ1Y3RvcikgIT09IFN0cmluZyhQcm9taXNlQ29uc3RydWN0b3IpO1xuICBpZiAoIUdMT0JBTF9DT1JFX0pTX1BST01JU0UpIHtcbiAgICAvLyBWOCA2LjYgKE5vZGUgMTAgYW5kIENocm9tZSA2NikgaGF2ZSBhIGJ1ZyB3aXRoIHJlc29sdmluZyBjdXN0b20gdGhlbmFibGVzXG4gICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODMwNTY1XG4gICAgLy8gV2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgICBpZiAoVjhfVkVSU0lPTiA9PT0gNjYpIHJldHVybiB0cnVlO1xuICAgIC8vIFVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICBpZiAoIUlTX05PREUgJiYgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCAhPSAnZnVuY3Rpb24nKSByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvLyBXZSBuZWVkIFByb21pc2UjZmluYWxseSBpbiB0aGUgcHVyZSB2ZXJzaW9uIGZvciBwcmV2ZW50aW5nIHByb3RvdHlwZSBwb2xsdXRpb25cbiAgaWYgKElTX1BVUkUgJiYgIVByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGVbJ2ZpbmFsbHknXSkgcmV0dXJuIHRydWU7XG4gIC8vIFdlIGNhbid0IHVzZSBAQHNwZWNpZXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4gIC8vIGRlb3B0aW1pemF0aW9uIGFuZCBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc5XG4gIGlmIChWOF9WRVJTSU9OID49IDUxICYmIC9uYXRpdmUgY29kZS8udGVzdChQcm9taXNlQ29uc3RydWN0b3IpKSByZXR1cm4gZmFsc2U7XG4gIC8vIERldGVjdCBjb3JyZWN0bmVzcyBvZiBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZUNvbnN0cnVjdG9yLnJlc29sdmUoMSk7XG4gIHZhciBGYWtlUHJvbWlzZSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgZXhlYyhmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG4gIH07XG4gIHZhciBjb25zdHJ1Y3RvciA9IHByb21pc2UuY29uc3RydWN0b3IgPSB7fTtcbiAgY29uc3RydWN0b3JbU1BFQ0lFU10gPSBGYWtlUHJvbWlzZTtcbiAgcmV0dXJuICEocHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZSk7XG59KTtcblxudmFyIElOQ09SUkVDVF9JVEVSQVRJT04gPSBGT1JDRUQgfHwgIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgUHJvbWlzZUNvbnN0cnVjdG9yLmFsbChpdGVyYWJsZSlbJ2NhdGNoJ10oZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcblxudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSwgaXNSZWplY3QpIHtcbiAgaWYgKHN0YXRlLm5vdGlmaWVkKSByZXR1cm47XG4gIHN0YXRlLm5vdGlmaWVkID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gc3RhdGUucmVhY3Rpb25zO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICAgIHZhciBvayA9IHN0YXRlLnN0YXRlID09IEZVTEZJTExFRDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBjaGFpbltpbmRleCsrXTtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHN0YXRlLnJlamVjdGlvbiA9PT0gVU5IQU5ETEVEKSBvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlLCBzdGF0ZSk7XG4gICAgICAgICAgICBzdGF0ZS5yZWplY3Rpb24gPSBIQU5ETEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOyAvLyBjYW4gdGhyb3dcbiAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICAgIHN0YXRlLnJlYWN0aW9ucyA9IFtdO1xuICAgIHN0YXRlLm5vdGlmaWVkID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFzdGF0ZS5yZWplY3Rpb24pIG9uVW5oYW5kbGVkKHByb21pc2UsIHN0YXRlKTtcbiAgfSk7XG59O1xuXG52YXIgZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIChuYW1lLCBwcm9taXNlLCByZWFzb24pIHtcbiAgdmFyIGV2ZW50LCBoYW5kbGVyO1xuICBpZiAoRElTUEFUQ0hfRVZFTlQpIHtcbiAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2ZW50LnByb21pc2UgPSBwcm9taXNlO1xuICAgIGV2ZW50LnJlYXNvbiA9IHJlYXNvbjtcbiAgICBldmVudC5pbml0RXZlbnQobmFtZSwgZmFsc2UsIHRydWUpO1xuICAgIGdsb2JhbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfSBlbHNlIGV2ZW50ID0geyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHJlYXNvbiB9O1xuICBpZiAoaGFuZGxlciA9IGdsb2JhbFsnb24nICsgbmFtZV0pIGhhbmRsZXIoZXZlbnQpO1xuICBlbHNlIGlmIChuYW1lID09PSBVTkhBTkRMRURfUkVKRUNUSU9OKSBob3N0UmVwb3J0RXJyb3JzKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCByZWFzb24pO1xufTtcblxudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgICB2YXIgSVNfVU5IQU5ETEVEID0gaXNVbmhhbmRsZWQoc3RhdGUpO1xuICAgIHZhciByZXN1bHQ7XG4gICAgaWYgKElTX1VOSEFORExFRCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChJU19OT0RFKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFVOSEFORExFRF9SRUpFQ1RJT04sIHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHN0YXRlLnJlamVjdGlvbiA9IElTX05PREUgfHwgaXNVbmhhbmRsZWQoc3RhdGUpID8gVU5IQU5ETEVEIDogSEFORExFRDtcbiAgICAgIGlmIChyZXN1bHQuZXJyb3IpIHRocm93IHJlc3VsdC52YWx1ZTtcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5yZWplY3Rpb24gIT09IEhBTkRMRUQgJiYgIXN0YXRlLnBhcmVudDtcbn07XG5cbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKElTX05PREUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFJFSkVDVElPTl9IQU5ETEVELCBwcm9taXNlLCBzdGF0ZS52YWx1ZSk7XG4gIH0pO1xufTtcblxudmFyIGJpbmQgPSBmdW5jdGlvbiAoZm4sIHByb21pc2UsIHN0YXRlLCB1bndyYXApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGZuKHByb21pc2UsIHN0YXRlLCB2YWx1ZSwgdW53cmFwKTtcbiAgfTtcbn07XG5cbnZhciBpbnRlcm5hbFJlamVjdCA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSwgdmFsdWUsIHVud3JhcCkge1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuO1xuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgaWYgKHVud3JhcCkgc3RhdGUgPSB1bndyYXA7XG4gIHN0YXRlLnZhbHVlID0gdmFsdWU7XG4gIHN0YXRlLnN0YXRlID0gUkVKRUNURUQ7XG4gIG5vdGlmeShwcm9taXNlLCBzdGF0ZSwgdHJ1ZSk7XG59O1xuXG52YXIgaW50ZXJuYWxSZXNvbHZlID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlLCB2YWx1ZSwgdW53cmFwKSB7XG4gIGlmIChzdGF0ZS5kb25lKSByZXR1cm47XG4gIHN0YXRlLmRvbmUgPSB0cnVlO1xuICBpZiAodW53cmFwKSBzdGF0ZSA9IHVud3JhcDtcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIHZhciB0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSk7XG4gICAgaWYgKHRoZW4pIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBkb25lOiBmYWxzZSB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSxcbiAgICAgICAgICAgIGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBwcm9taXNlLCB3cmFwcGVyLCBzdGF0ZSksXG4gICAgICAgICAgICBiaW5kKGludGVybmFsUmVqZWN0LCBwcm9taXNlLCB3cmFwcGVyLCBzdGF0ZSlcbiAgICAgICAgICApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGludGVybmFsUmVqZWN0KHByb21pc2UsIHdyYXBwZXIsIGVycm9yLCBzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgc3RhdGUuc3RhdGUgPSBGVUxGSUxMRUQ7XG4gICAgICBub3RpZnkocHJvbWlzZSwgc3RhdGUsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaW50ZXJuYWxSZWplY3QocHJvbWlzZSwgeyBkb25lOiBmYWxzZSB9LCBlcnJvciwgc3RhdGUpO1xuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKEZPUkNFRCkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICBQcm9taXNlQ29uc3RydWN0b3IgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCBQcm9taXNlQ29uc3RydWN0b3IsIFBST01JU0UpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihiaW5kKGludGVybmFsUmVzb2x2ZSwgdGhpcywgc3RhdGUpLCBiaW5kKGludGVybmFsUmVqZWN0LCB0aGlzLCBzdGF0ZSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpbnRlcm5hbFJlamVjdCh0aGlzLCBzdGF0ZSwgZXJyb3IpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgdHlwZTogUFJPTUlTRSxcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgbm90aWZpZWQ6IGZhbHNlLFxuICAgICAgcGFyZW50OiBmYWxzZSxcbiAgICAgIHJlYWN0aW9uczogW10sXG4gICAgICByZWplY3Rpb246IGZhbHNlLFxuICAgICAgc3RhdGU6IFBFTkRJTkcsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKFByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHtcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUudGhlbmAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5wcm90b3R5cGUudGhlblxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUHJvbWlzZVN0YXRlKHRoaXMpO1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIFByb21pc2VDb25zdHJ1Y3RvcikpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBJU19OT0RFID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICBzdGF0ZS5wYXJlbnQgPSB0cnVlO1xuICAgICAgc3RhdGUucmVhY3Rpb25zLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHN0YXRlLnN0YXRlICE9IFBFTkRJTkcpIG5vdGlmeSh0aGlzLCBzdGF0ZSwgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLmNhdGNoXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUocHJvbWlzZSk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBiaW5kKGludGVybmFsUmVzb2x2ZSwgcHJvbWlzZSwgc3RhdGUpO1xuICAgIHRoaXMucmVqZWN0ID0gYmluZChpbnRlcm5hbFJlamVjdCwgcHJvbWlzZSwgc3RhdGUpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBDID09PSBQcm9taXNlQ29uc3RydWN0b3IgfHwgQyA9PT0gUHJvbWlzZVdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcblxuICBpZiAoIUlTX1BVUkUgJiYgdHlwZW9mIE5hdGl2ZVByb21pc2UgPT0gJ2Z1bmN0aW9uJykge1xuICAgIG5hdGl2ZVRoZW4gPSBOYXRpdmVQcm9taXNlLnByb3RvdHlwZS50aGVuO1xuXG4gICAgLy8gd3JhcCBuYXRpdmUgUHJvbWlzZSN0aGVuIGZvciBuYXRpdmUgYXN5bmMgZnVuY3Rpb25zXG4gICAgcmVkZWZpbmUoTmF0aXZlUHJvbWlzZS5wcm90b3R5cGUsICd0aGVuJywgZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlQ29uc3RydWN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBuYXRpdmVUaGVuLmNhbGwodGhhdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpO1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NDBcbiAgICB9LCB7IHVuc2FmZTogdHJ1ZSB9KTtcblxuICAgIC8vIHdyYXAgZmV0Y2ggcmVzdWx0XG4gICAgaWYgKHR5cGVvZiAkZmV0Y2ggPT0gJ2Z1bmN0aW9uJykgJCh7IGdsb2JhbDogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgZmV0Y2g6IGZ1bmN0aW9uIGZldGNoKGlucHV0IC8qICwgaW5pdCAqLykge1xuICAgICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoUHJvbWlzZUNvbnN0cnVjdG9yLCAkZmV0Y2guYXBwbHkoZ2xvYmFsLCBhcmd1bWVudHMpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG4kKHsgZ2xvYmFsOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIFByb21pc2U6IFByb21pc2VDb25zdHJ1Y3RvclxufSk7XG5cbnNldFRvU3RyaW5nVGFnKFByb21pc2VDb25zdHJ1Y3RvciwgUFJPTUlTRSwgZmFsc2UsIHRydWUpO1xuc2V0U3BlY2llcyhQUk9NSVNFKTtcblxuUHJvbWlzZVdyYXBwZXIgPSBnZXRCdWlsdEluKFBST01JU0UpO1xuXG4vLyBzdGF0aWNzXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIC8vIGBQcm9taXNlLnJlamVjdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucmVqZWN0XG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIGNhcGFiaWxpdHkucmVqZWN0LmNhbGwodW5kZWZpbmVkLCByKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcblxuJCh7IHRhcmdldDogUFJPTUlTRSwgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIHx8IEZPUkNFRCB9LCB7XG4gIC8vIGBQcm9taXNlLnJlc29sdmVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJlc29sdmVcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKElTX1BVUkUgJiYgdGhpcyA9PT0gUHJvbWlzZVdyYXBwZXIgPyBQcm9taXNlQ29uc3RydWN0b3IgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG5cbiQoeyB0YXJnZXQ6IFBST01JU0UsIHN0YXQ6IHRydWUsIGZvcmNlZDogSU5DT1JSRUNUX0lURVJBVElPTiB9LCB7XG4gIC8vIGBQcm9taXNlLmFsbGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UuYWxsXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkcHJvbWlzZVJlc29sdmUgPSBhRnVuY3Rpb24oQy5yZXNvbHZlKTtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gY291bnRlcisrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgJHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyBgUHJvbWlzZS5yYWNlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5yYWNlXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRwcm9taXNlUmVzb2x2ZSA9IGFGdW5jdGlvbihDLnJlc29sdmUpO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgJHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLlByb21pc2U7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1JfTkFNRSkge1xuICB2YXIgQ29uc3RydWN0b3IgPSBnZXRCdWlsdEluKENPTlNUUlVDVE9SX05BTUUpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiBDb25zdHJ1Y3RvciAmJiAhQ29uc3RydWN0b3JbU1BFQ0lFU10pIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgU1BFQ0lFUywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gICAgfSk7XG4gIH1cbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcnKTtcblxudmFyIFJlc3VsdCA9IGZ1bmN0aW9uIChzdG9wcGVkLCByZXN1bHQpIHtcbiAgdGhpcy5zdG9wcGVkID0gc3RvcHBlZDtcbiAgdGhpcy5yZXN1bHQgPSByZXN1bHQ7XG59O1xuXG52YXIgaXRlcmF0ZSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBmbiwgdGhhdCwgQVNfRU5UUklFUywgSVNfSVRFUkFUT1IpIHtcbiAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGZuLCB0aGF0LCBBU19FTlRSSUVTID8gMiA6IDEpO1xuICB2YXIgaXRlcmF0b3IsIGl0ZXJGbiwgaW5kZXgsIGxlbmd0aCwgcmVzdWx0LCBuZXh0LCBzdGVwO1xuXG4gIGlmIChJU19JVEVSQVRPUikge1xuICAgIGl0ZXJhdG9yID0gaXRlcmFibGU7XG4gIH0gZWxzZSB7XG4gICAgaXRlckZuID0gZ2V0SXRlcmF0b3JNZXRob2QoaXRlcmFibGUpO1xuICAgIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcignVGFyZ2V0IGlzIG5vdCBpdGVyYWJsZScpO1xuICAgIC8vIG9wdGltaXNhdGlvbiBmb3IgYXJyYXkgaXRlcmF0b3JzXG4gICAgaWYgKGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyRm4pKSB7XG4gICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgcmVzdWx0ID0gQVNfRU5UUklFU1xuICAgICAgICAgID8gYm91bmRGdW5jdGlvbihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSlcbiAgICAgICAgICA6IGJvdW5kRnVuY3Rpb24oaXRlcmFibGVbaW5kZXhdKTtcbiAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQgaW5zdGFuY2VvZiBSZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gICAgICB9IHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbiAgICB9XG4gICAgaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7XG4gIH1cblxuICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgd2hpbGUgKCEoc3RlcCA9IG5leHQuY2FsbChpdGVyYXRvcikpLmRvbmUpIHtcbiAgICByZXN1bHQgPSBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBib3VuZEZ1bmN0aW9uLCBzdGVwLnZhbHVlLCBBU19FTlRSSUVTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCA9PSAnb2JqZWN0JyAmJiByZXN1bHQgJiYgcmVzdWx0IGluc3RhbmNlb2YgUmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICB9IHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbn07XG5cbml0ZXJhdGUuc3RvcCA9IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgcmV0dXJuIG5ldyBSZXN1bHQodHJ1ZSwgcmVzdWx0KTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgbWFjcm90YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Rhc2snKS5zZXQ7XG52YXIgSVNfSU9TID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MnKTtcblxudmFyIE11dGF0aW9uT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xudmFyIElTX05PREUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbi8vIE5vZGUuanMgMTEgc2hvd3MgRXhwZXJpbWVudGFsV2FybmluZyBvbiBnZXR0aW5nIGBxdWV1ZU1pY3JvdGFza2BcbnZhciBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZ2xvYmFsLCAncXVldWVNaWNyb3Rhc2snKTtcbnZhciBxdWV1ZU1pY3JvdGFzayA9IHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciAmJiBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IudmFsdWU7XG5cbnZhciBmbHVzaCwgaGVhZCwgbGFzdCwgbm90aWZ5LCB0b2dnbGUsIG5vZGUsIHByb21pc2UsIHRoZW47XG5cbi8vIG1vZGVybiBlbmdpbmVzIGhhdmUgcXVldWVNaWNyb3Rhc2sgbWV0aG9kXG5pZiAoIXF1ZXVlTWljcm90YXNrKSB7XG4gIGZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmIChJU19OT0RFICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGhlYWQpIG5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH0gbGFzdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBOb2RlLmpzXG4gIGlmIChJU19OT0RFKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICB9IGVsc2UgaWYgKE11dGF0aW9uT2JzZXJ2ZXIgJiYgIUlTX0lPUykge1xuICAgIHRvZ2dsZSA9IHRydWU7XG4gICAgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgTXV0YXRpb25PYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDJcbiAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgdGhlbiA9IHByb21pc2UudGhlbjtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGVuLmNhbGwocHJvbWlzZSwgZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcXVldWVNaWNyb3Rhc2sgfHwgZnVuY3Rpb24gKGZuKSB7XG4gIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgaWYgKCFoZWFkKSB7XG4gICAgaGVhZCA9IHRhc2s7XG4gICAgbm90aWZ5KCk7XG4gIH0gbGFzdCA9IHRhc2s7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgdmFyIGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZTtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xuICAgIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBjb25zb2xlLmVycm9yKGEpIDogY29uc29sZS5lcnJvcihhLCBiKTtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlcnJvcjogZmFsc2UsIHZhbHVlOiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4geyBlcnJvcjogdHJ1ZSwgdmFsdWU6IGVycm9yIH07XG4gIH1cbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gSUUgOCBoYXMgYSBicm9rZW4gT2JqZWN0LmRlZmluZVByb3BlcnR5IHRoYXQgb25seSB3b3JrcyBvbiBET00gb2JqZWN0cy5cbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbihvYmosIGtleSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShcbiAgICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICB0b1N0cmluZ1RhZ1N5bWJvbCxcbiAgICBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgKTtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKTtcbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgaWYgKFByb21pc2VJbXBsID09PSB2b2lkIDApIFByb21pc2VJbXBsID0gUHJvbWlzZTtcblxuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSxcbiAgICAgIFByb21pc2VJbXBsXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKTtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxudmFyIFVOU0NPUEFCTEVTID0gd2VsbEtub3duU3ltYm9sKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5pZiAoQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkge1xuICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKEFycmF5UHJvdG90eXBlLCBVTlNDT1BBQkxFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogY3JlYXRlKG51bGwpXG4gIH0pO1xufVxuXG4vLyBhZGQgYSBrZXkgdG8gQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEl0ZXJhdG9yc0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKTtcblxudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gSXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gSXRlcmF0b3JzQ29yZS5CVUdHWV9TQUZBUklfSVRFUkFUT1JTO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG52YXIgRU5UUklFUyA9ICdlbnRyaWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYWJsZSwgTkFNRSwgSXRlcmF0b3JDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcblxuICB2YXIgZ2V0SXRlcmF0aW9uTWV0aG9kID0gZnVuY3Rpb24gKEtJTkQpIHtcbiAgICBpZiAoS0lORCA9PT0gREVGQVVMVCAmJiBkZWZhdWx0SXRlcmF0b3IpIHJldHVybiBkZWZhdWx0SXRlcmF0b3I7XG4gICAgaWYgKCFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIEtJTkQgaW4gSXRlcmFibGVQcm90b3R5cGUpIHJldHVybiBJdGVyYWJsZVByb3RvdHlwZVtLSU5EXTtcbiAgICBzd2l0Y2ggKEtJTkQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIEVOVFJJRVM6IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcyk7IH07XG4gIH07XG5cbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSBmYWxzZTtcbiAgdmFyIEl0ZXJhYmxlUHJvdG90eXBlID0gSXRlcmFibGUucHJvdG90eXBlO1xuICB2YXIgbmF0aXZlSXRlcmF0b3IgPSBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl1cbiAgICB8fCBJdGVyYWJsZVByb3RvdHlwZVsnQEBpdGVyYXRvciddXG4gICAgfHwgREVGQVVMVCAmJiBJdGVyYWJsZVByb3RvdHlwZVtERUZBVUxUXTtcbiAgdmFyIGRlZmF1bHRJdGVyYXRvciA9ICFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIG5hdGl2ZUl0ZXJhdG9yIHx8IGdldEl0ZXJhdGlvbk1ldGhvZChERUZBVUxUKTtcbiAgdmFyIGFueU5hdGl2ZUl0ZXJhdG9yID0gTkFNRSA9PSAnQXJyYXknID8gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcyB8fCBuYXRpdmVJdGVyYXRvciA6IG5hdGl2ZUl0ZXJhdG9yO1xuICB2YXIgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBtZXRob2RzLCBLRVk7XG5cbiAgLy8gZml4IG5hdGl2ZVxuICBpZiAoYW55TmF0aXZlSXRlcmF0b3IpIHtcbiAgICBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihhbnlOYXRpdmVJdGVyYXRvci5jYWxsKG5ldyBJdGVyYWJsZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICBpZiAoIUlTX1BVUkUgJiYgZ2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlKSAhPT0gSXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgICAgICAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgICAgICAgc2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJdGVyYXRvclByb3RvdHlwZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCB0cnVlLCB0cnVlKTtcbiAgICAgIGlmIChJU19QVVJFKSBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICAgIH1cbiAgfVxuXG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRkFVTFQgPT0gVkFMVUVTICYmIG5hdGl2ZUl0ZXJhdG9yICYmIG5hdGl2ZUl0ZXJhdG9yLm5hbWUgIT09IFZBTFVFUykge1xuICAgIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IHRydWU7XG4gICAgZGVmYXVsdEl0ZXJhdG9yID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmF0aXZlSXRlcmF0b3IuY2FsbCh0aGlzKTsgfTtcbiAgfVxuXG4gIC8vIGRlZmluZSBpdGVyYXRvclxuICBpZiAoKCFJU19QVVJFIHx8IEZPUkNFRCkgJiYgSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdICE9PSBkZWZhdWx0SXRlcmF0b3IpIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoSXRlcmFibGVQcm90b3R5cGUsIElURVJBVE9SLCBkZWZhdWx0SXRlcmF0b3IpO1xuICB9XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IGRlZmF1bHRJdGVyYXRvcjtcblxuICAvLyBleHBvcnQgYWRkaXRpb25hbCBtZXRob2RzXG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogZ2V0SXRlcmF0aW9uTWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyBkZWZhdWx0SXRlcmF0b3IgOiBnZXRJdGVyYXRpb25NZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiBnZXRJdGVyYXRpb25NZXRob2QoRU5UUklFUylcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoS0VZIGluIG1ldGhvZHMpIHtcbiAgICAgIGlmIChCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB8fCAhKEtFWSBpbiBJdGVyYWJsZVByb3RvdHlwZSkpIHtcbiAgICAgICAgcmVkZWZpbmUoSXRlcmFibGVQcm90b3R5cGUsIEtFWSwgbWV0aG9kc1tLRVldKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgJCh7IHRhcmdldDogTkFNRSwgcHJvdG86IHRydWUsIGZvcmNlZDogQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfSwgbWV0aG9kcyk7XG4gIH1cblxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEl0ZXJhdG9yQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIEl0ZXJhdG9yQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JDb25zdHJ1Y3RvciwgVE9fU1RSSU5HX1RBRywgZmFsc2UsIHRydWUpO1xuICBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICByZXR1cm4gSXRlcmF0b3JDb25zdHJ1Y3Rvcjtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IGNvZGVQb2ludEF0LCBhdCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKENPTlZFUlRfVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIHBvcykge1xuICAgIHZhciBTID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICB2YXIgcG9zaXRpb24gPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgc2l6ZSA9IFMubGVuZ3RoO1xuICAgIHZhciBmaXJzdCwgc2Vjb25kO1xuICAgIGlmIChwb3NpdGlvbiA8IDAgfHwgcG9zaXRpb24gPj0gc2l6ZSkgcmV0dXJuIENPTlZFUlRfVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgZmlyc3QgPSBTLmNoYXJDb2RlQXQocG9zaXRpb24pO1xuICAgIHJldHVybiBmaXJzdCA8IDB4RDgwMCB8fCBmaXJzdCA+IDB4REJGRiB8fCBwb3NpdGlvbiArIDEgPT09IHNpemVcbiAgICAgIHx8IChzZWNvbmQgPSBTLmNoYXJDb2RlQXQocG9zaXRpb24gKyAxKSkgPCAweERDMDAgfHwgc2Vjb25kID4gMHhERkZGXG4gICAgICAgID8gQ09OVkVSVF9UT19TVFJJTkcgPyBTLmNoYXJBdChwb3NpdGlvbikgOiBmaXJzdFxuICAgICAgICA6IENPTlZFUlRfVE9fU1RSSU5HID8gUy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyAyKSA6IChmaXJzdCAtIDB4RDgwMCA8PCAxMCkgKyAoc2Vjb25kIC0gMHhEQzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmNvZGVwb2ludGF0XG4gIGNvZGVBdDogY3JlYXRlTWV0aG9kKGZhbHNlKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuYXRgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9TdHJpbmcucHJvdG90eXBlLmF0XG4gIGNoYXJBdDogY3JlYXRlTWV0aG9kKHRydWUpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mb3ItZWFjaCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFtdLmZvckVhY2ggIT0gZm9yRWFjaCB9LCB7XG4gIGZvckVhY2g6IGZvckVhY2hcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FLCBhcmd1bWVudCkge1xuICB2YXIgbWV0aG9kID0gW11bTUVUSE9EX05BTUVdO1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGwsbm8tdGhyb3ctbGl0ZXJhbFxuICAgIG1ldGhvZC5jYWxsKG51bGwsIGFyZ3VtZW50IHx8IGZ1bmN0aW9uICgpIHsgdGhyb3cgMTsgfSwgMSk7XG4gIH0pO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgRi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBudWxsO1xuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyBGKCkpICE9PSBGLnByb3RvdHlwZTtcbn0pO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFQb3NzaWJsZVByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5zZXRwcm90b3R5cGVvZlxuLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gZnVuY3Rpb24gKCkge1xuICB2YXIgQ09SUkVDVF9TRVRURVIgPSBmYWxzZTtcbiAgdmFyIHRlc3QgPSB7fTtcbiAgdmFyIHNldHRlcjtcbiAgdHJ5IHtcbiAgICBzZXR0ZXIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQ7XG4gICAgc2V0dGVyLmNhbGwodGVzdCwgW10pO1xuICAgIENPUlJFQ1RfU0VUVEVSID0gdGVzdCBpbnN0YW5jZW9mIEFycmF5O1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgIGFuT2JqZWN0KE8pO1xuICAgIGFQb3NzaWJsZVByb3RvdHlwZShwcm90byk7XG4gICAgaWYgKENPUlJFQ1RfU0VUVEVSKSBzZXR0ZXIuY2FsbChPLCBwcm90byk7XG4gICAgZWxzZSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgIHJldHVybiBPO1xuICB9O1xufSgpIDogdW5kZWZpbmVkKTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgJiYgaXQgIT09IG51bGwpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBzZXQgXCIgKyBTdHJpbmcoaXQpICsgJyBhcyBhIHByb3RvdHlwZScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3duLWtleXMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gICAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICAgIHZhciBrZXlzID0gb3duS2V5cyhPKTtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIga2V5LCBkZXNjcmlwdG9yO1xuICAgIHdoaWxlIChrZXlzLmxlbmd0aCA+IGluZGV4KSB7XG4gICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIGtleSA9IGtleXNbaW5kZXgrK10pO1xuICAgICAgaWYgKGRlc2NyaXB0b3IgIT09IHVuZGVmaW5lZCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBNQVRDSCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTtcblxuLy8gYElzUmVnRXhwYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWlzcmVnZXhwXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjbGFzc29mKGl0KSA9PSAnUmVnRXhwJyk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBET01JdGVyYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcycpO1xudmFyIGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZm9yLWVhY2gnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbQ09MTEVDVElPTl9OQU1FXTtcbiAgdmFyIENvbGxlY3Rpb25Qcm90b3R5cGUgPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGUgJiYgQ29sbGVjdGlvblByb3RvdHlwZS5mb3JFYWNoICE9PSBmb3JFYWNoKSB0cnkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCAnZm9yRWFjaCcsIGZvckVhY2gpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIENvbGxlY3Rpb25Qcm90b3R5cGUuZm9yRWFjaCA9IGZvckVhY2g7XG4gIH1cbn1cbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgRE9NSXRlcmFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMnKTtcbnZhciBBcnJheUl0ZXJhdG9yTWV0aG9kcyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvck1ldGhvZHMudmFsdWVzO1xuXG5mb3IgKHZhciBDT0xMRUNUSU9OX05BTUUgaW4gRE9NSXRlcmFibGVzKSB7XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uUHJvdG90eXBlID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGUpIHtcbiAgICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUl0gIT09IEFycmF5VmFsdWVzKSB0cnkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdID0gQXJyYXlWYWx1ZXM7XG4gICAgfVxuICAgIGlmICghQ29sbGVjdGlvblByb3RvdHlwZVtUT19TVFJJTkdfVEFHXSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIENPTExFQ1RJT05fTkFNRSk7XG4gICAgfVxuICAgIGlmIChET01JdGVyYWJsZXNbQ09MTEVDVElPTl9OQU1FXSkgZm9yICh2YXIgTUVUSE9EX05BTUUgaW4gQXJyYXlJdGVyYXRvck1ldGhvZHMpIHtcbiAgICAgIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICAgICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbTUVUSE9EX05BTUVdICE9PSBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV0pIHRyeSB7XG4gICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBNRVRIT0RfTkFNRSwgQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIENvbGxlY3Rpb25Qcm90b3R5cGVbTUVUSE9EX05BTUVdID0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jYWxsLXdpdGgtc2FmZS1pdGVyYXRpb24tY2xvc2luZycpO1xudmFyIGlzQXJyYXlJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbi8vIGBBcnJheS5mcm9tYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LmZyb21cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtYXBmbiA9IGFyZ3VtZW50c0xlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gZ2V0SXRlcmF0b3JNZXRob2QoTyk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3IsIG5leHQsIHZhbHVlO1xuICBpZiAobWFwcGluZykgbWFwZm4gPSBiaW5kKG1hcGZuLCBhcmd1bWVudHNMZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgLy8gaWYgdGhlIHRhcmdldCBpcyBub3QgaXRlcmFibGUgb3IgaXQncyBhbiBhcnJheSB3aXRoIHRoZSBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIGEgc2ltcGxlIGNhc2VcbiAgaWYgKGl0ZXJhdG9yTWV0aG9kICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJhdG9yTWV0aG9kKSkpIHtcbiAgICBpdGVyYXRvciA9IGl0ZXJhdG9yTWV0aG9kLmNhbGwoTyk7XG4gICAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gICAgcmVzdWx0ID0gbmV3IEMoKTtcbiAgICBmb3IgKDshKHN0ZXAgPSBuZXh0LmNhbGwoaXRlcmF0b3IpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlO1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgcmVzdWx0ID0gbmV3IEMobGVuZ3RoKTtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgdmFsdWUgPSBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdO1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZQcmVzZW50KGhhbmRsZSkge1xuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG4gICAgICAgICAgICAvLyBcInRvbyBtdWNoIHJlY3Vyc2lvblwiIGVycm9yLlxuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBydW4odGFzayk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXG4gICAgICAgIC8vIHdoZXJlIGBnbG9iYWwucG9zdE1lc3NhZ2VgIG1lYW5zIHNvbWV0aGluZyBjb21wbGV0ZWx5IGRpZmZlcmVudCBhbmQgY2FuJ3QgYmUgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLlxuICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG4gICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZVxuICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXG5cbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcbiAgICAgICAgdmFyIG9uR2xvYmFsTWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKG1lc3NhZ2VQcmVmaXggKyBoYW5kbGUsIFwiKlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdXBwb3J0ZWQsIHdlIHNob3VsZCBhdHRhY2ggdG8gdGhlIHByb3RvdHlwZSBvZiBnbG9iYWwsIHNpbmNlIHRoYXQgaXMgd2hlcmUgc2V0VGltZW91dCBldCBhbC4gbGl2ZS5cbiAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XG5cbiAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuICAgICAgICAvLyBGb3IgTm9kZS5qcyBiZWZvcmUgMC45XG4gICAgICAgIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcbiAgICAgICAgLy8gRm9yIElFIDbigJM4XG4gICAgICAgIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuICAgIGF0dGFjaFRvLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG59KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG4iLCIvKiFcbiAqIFZ1ZS5qcyB2Mi42LjEyXG4gKiAoYykgMjAxNC0yMDIwIEV2YW4gWW91XG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cbi8qICAqL1xuXG52YXIgZW1wdHlPYmplY3QgPSBPYmplY3QuZnJlZXplKHt9KTtcblxuLy8gVGhlc2UgaGVscGVycyBwcm9kdWNlIGJldHRlciBWTSBjb2RlIGluIEpTIGVuZ2luZXMgZHVlIHRvIHRoZWlyXG4vLyBleHBsaWNpdG5lc3MgYW5kIGZ1bmN0aW9uIGlubGluaW5nLlxuZnVuY3Rpb24gaXNVbmRlZiAodikge1xuICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IG51bGxcbn1cblxuZnVuY3Rpb24gaXNEZWYgKHYpIHtcbiAgcmV0dXJuIHYgIT09IHVuZGVmaW5lZCAmJiB2ICE9PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzVHJ1ZSAodikge1xuICByZXR1cm4gdiA9PT0gdHJ1ZVxufVxuXG5mdW5jdGlvbiBpc0ZhbHNlICh2KSB7XG4gIHJldHVybiB2ID09PSBmYWxzZVxufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbHVlIGlzIHByaW1pdGl2ZS5cbiAqL1xuZnVuY3Rpb24gaXNQcmltaXRpdmUgKHZhbHVlKSB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHxcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzeW1ib2wnIHx8XG4gICAgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbidcbiAgKVxufVxuXG4vKipcbiAqIFF1aWNrIG9iamVjdCBjaGVjayAtIHRoaXMgaXMgcHJpbWFyaWx5IHVzZWQgdG8gdGVsbFxuICogT2JqZWN0cyBmcm9tIHByaW1pdGl2ZSB2YWx1ZXMgd2hlbiB3ZSBrbm93IHRoZSB2YWx1ZVxuICogaXMgYSBKU09OLWNvbXBsaWFudCB0eXBlLlxuICovXG5mdW5jdGlvbiBpc09iamVjdCAob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCdcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHJhdyB0eXBlIHN0cmluZyBvZiBhIHZhbHVlLCBlLmcuLCBbb2JqZWN0IE9iamVjdF0uXG4gKi9cbnZhciBfdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5mdW5jdGlvbiB0b1Jhd1R5cGUgKHZhbHVlKSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpXG59XG5cbi8qKlxuICogU3RyaWN0IG9iamVjdCB0eXBlIGNoZWNrLiBPbmx5IHJldHVybnMgdHJ1ZVxuICogZm9yIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0cy5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCAob2JqKSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBPYmplY3RdJ1xufVxuXG5mdW5jdGlvbiBpc1JlZ0V4cCAodikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsIGlzIGEgdmFsaWQgYXJyYXkgaW5kZXguXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRBcnJheUluZGV4ICh2YWwpIHtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KFN0cmluZyh2YWwpKTtcbiAgcmV0dXJuIG4gPj0gMCAmJiBNYXRoLmZsb29yKG4pID09PSBuICYmIGlzRmluaXRlKHZhbClcbn1cblxuZnVuY3Rpb24gaXNQcm9taXNlICh2YWwpIHtcbiAgcmV0dXJuIChcbiAgICBpc0RlZih2YWwpICYmXG4gICAgdHlwZW9mIHZhbC50aGVuID09PSAnZnVuY3Rpb24nICYmXG4gICAgdHlwZW9mIHZhbC5jYXRjaCA9PT0gJ2Z1bmN0aW9uJ1xuICApXG59XG5cbi8qKlxuICogQ29udmVydCBhIHZhbHVlIHRvIGEgc3RyaW5nIHRoYXQgaXMgYWN0dWFsbHkgcmVuZGVyZWQuXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PSBudWxsXG4gICAgPyAnJ1xuICAgIDogQXJyYXkuaXNBcnJheSh2YWwpIHx8IChpc1BsYWluT2JqZWN0KHZhbCkgJiYgdmFsLnRvU3RyaW5nID09PSBfdG9TdHJpbmcpXG4gICAgICA/IEpTT04uc3RyaW5naWZ5KHZhbCwgbnVsbCwgMilcbiAgICAgIDogU3RyaW5nKHZhbClcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGFuIGlucHV0IHZhbHVlIHRvIGEgbnVtYmVyIGZvciBwZXJzaXN0ZW5jZS5cbiAqIElmIHRoZSBjb252ZXJzaW9uIGZhaWxzLCByZXR1cm4gb3JpZ2luYWwgc3RyaW5nLlxuICovXG5mdW5jdGlvbiB0b051bWJlciAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdCh2YWwpO1xuICByZXR1cm4gaXNOYU4obikgPyB2YWwgOiBuXG59XG5cbi8qKlxuICogTWFrZSBhIG1hcCBhbmQgcmV0dXJuIGEgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGEga2V5XG4gKiBpcyBpbiB0aGF0IG1hcC5cbiAqL1xuZnVuY3Rpb24gbWFrZU1hcCAoXG4gIHN0cixcbiAgZXhwZWN0c0xvd2VyQ2FzZVxuKSB7XG4gIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgbGlzdCA9IHN0ci5zcGxpdCgnLCcpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICBtYXBbbGlzdFtpXV0gPSB0cnVlO1xuICB9XG4gIHJldHVybiBleHBlY3RzTG93ZXJDYXNlXG4gICAgPyBmdW5jdGlvbiAodmFsKSB7IHJldHVybiBtYXBbdmFsLnRvTG93ZXJDYXNlKCldOyB9XG4gICAgOiBmdW5jdGlvbiAodmFsKSB7IHJldHVybiBtYXBbdmFsXTsgfVxufVxuXG4vKipcbiAqIENoZWNrIGlmIGEgdGFnIGlzIGEgYnVpbHQtaW4gdGFnLlxuICovXG52YXIgaXNCdWlsdEluVGFnID0gbWFrZU1hcCgnc2xvdCxjb21wb25lbnQnLCB0cnVlKTtcblxuLyoqXG4gKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUuXG4gKi9cbnZhciBpc1Jlc2VydmVkQXR0cmlidXRlID0gbWFrZU1hcCgna2V5LHJlZixzbG90LHNsb3Qtc2NvcGUsaXMnKTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaXRlbSBmcm9tIGFuIGFycmF5LlxuICovXG5mdW5jdGlvbiByZW1vdmUgKGFyciwgaXRlbSkge1xuICBpZiAoYXJyLmxlbmd0aCkge1xuICAgIHZhciBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICByZXR1cm4gYXJyLnNwbGljZShpbmRleCwgMSlcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGFuIG9iamVjdCBoYXMgdGhlIHByb3BlcnR5LlxuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gaGFzT3duIChvYmosIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSlcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBjYWNoZWQgdmVyc2lvbiBvZiBhIHB1cmUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNhY2hlZCAoZm4pIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIChmdW5jdGlvbiBjYWNoZWRGbiAoc3RyKSB7XG4gICAgdmFyIGhpdCA9IGNhY2hlW3N0cl07XG4gICAgcmV0dXJuIGhpdCB8fCAoY2FjaGVbc3RyXSA9IGZuKHN0cikpXG4gIH0pXG59XG5cbi8qKlxuICogQ2FtZWxpemUgYSBoeXBoZW4tZGVsaW1pdGVkIHN0cmluZy5cbiAqL1xudmFyIGNhbWVsaXplUkUgPSAvLShcXHcpL2c7XG52YXIgY2FtZWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoY2FtZWxpemVSRSwgZnVuY3Rpb24gKF8sIGMpIHsgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJzsgfSlcbn0pO1xuXG4vKipcbiAqIENhcGl0YWxpemUgYSBzdHJpbmcuXG4gKi9cbnZhciBjYXBpdGFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKVxufSk7XG5cbi8qKlxuICogSHlwaGVuYXRlIGEgY2FtZWxDYXNlIHN0cmluZy5cbiAqL1xudmFyIGh5cGhlbmF0ZVJFID0gL1xcQihbQS1aXSkvZztcbnZhciBoeXBoZW5hdGUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoaHlwaGVuYXRlUkUsICctJDEnKS50b0xvd2VyQ2FzZSgpXG59KTtcblxuLyoqXG4gKiBTaW1wbGUgYmluZCBwb2x5ZmlsbCBmb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IHN1cHBvcnQgaXQsXG4gKiBlLmcuLCBQaGFudG9tSlMgMS54LiBUZWNobmljYWxseSwgd2UgZG9uJ3QgbmVlZCB0aGlzIGFueW1vcmVcbiAqIHNpbmNlIG5hdGl2ZSBiaW5kIGlzIG5vdyBwZXJmb3JtYW50IGVub3VnaCBpbiBtb3N0IGJyb3dzZXJzLlxuICogQnV0IHJlbW92aW5nIGl0IHdvdWxkIG1lYW4gYnJlYWtpbmcgY29kZSB0aGF0IHdhcyBhYmxlIHRvIHJ1biBpblxuICogUGhhbnRvbUpTIDEueCwgc28gdGhpcyBtdXN0IGJlIGtlcHQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4gKi9cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIHBvbHlmaWxsQmluZCAoZm4sIGN0eCkge1xuICBmdW5jdGlvbiBib3VuZEZuIChhKSB7XG4gICAgdmFyIGwgPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHJldHVybiBsXG4gICAgICA/IGwgPiAxXG4gICAgICAgID8gZm4uYXBwbHkoY3R4LCBhcmd1bWVudHMpXG4gICAgICAgIDogZm4uY2FsbChjdHgsIGEpXG4gICAgICA6IGZuLmNhbGwoY3R4KVxuICB9XG5cbiAgYm91bmRGbi5fbGVuZ3RoID0gZm4ubGVuZ3RoO1xuICByZXR1cm4gYm91bmRGblxufVxuXG5mdW5jdGlvbiBuYXRpdmVCaW5kIChmbiwgY3R4KSB7XG4gIHJldHVybiBmbi5iaW5kKGN0eClcbn1cblxudmFyIGJpbmQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZFxuICA/IG5hdGl2ZUJpbmRcbiAgOiBwb2x5ZmlsbEJpbmQ7XG5cbi8qKlxuICogQ29udmVydCBhbiBBcnJheS1saWtlIG9iamVjdCB0byBhIHJlYWwgQXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXkgKGxpc3QsIHN0YXJ0KSB7XG4gIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgdmFyIGkgPSBsaXN0Lmxlbmd0aCAtIHN0YXJ0O1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgcmV0W2ldID0gbGlzdFtpICsgc3RhcnRdO1xuICB9XG4gIHJldHVybiByZXRcbn1cblxuLyoqXG4gKiBNaXggcHJvcGVydGllcyBpbnRvIHRhcmdldCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZCAodG8sIF9mcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBfZnJvbSkge1xuICAgIHRvW2tleV0gPSBfZnJvbVtrZXldO1xuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIE1lcmdlIGFuIEFycmF5IG9mIE9iamVjdHMgaW50byBhIHNpbmdsZSBPYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHRvT2JqZWN0IChhcnIpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChhcnJbaV0pIHtcbiAgICAgIGV4dGVuZChyZXMsIGFycltpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBQZXJmb3JtIG5vIG9wZXJhdGlvbi5cbiAqIFN0dWJiaW5nIGFyZ3MgdG8gbWFrZSBGbG93IGhhcHB5IHdpdGhvdXQgbGVhdmluZyB1c2VsZXNzIHRyYW5zcGlsZWQgY29kZVxuICogd2l0aCAuLi5yZXN0IChodHRwczovL2Zsb3cub3JnL2Jsb2cvMjAxNy8wNS8wNy9TdHJpY3QtRnVuY3Rpb24tQ2FsbC1Bcml0eS8pLlxuICovXG5mdW5jdGlvbiBub29wIChhLCBiLCBjKSB7fVxuXG4vKipcbiAqIEFsd2F5cyByZXR1cm4gZmFsc2UuXG4gKi9cbnZhciBubyA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7IHJldHVybiBmYWxzZTsgfTtcblxuLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG4vKipcbiAqIFJldHVybiB0aGUgc2FtZSB2YWx1ZS5cbiAqL1xudmFyIGlkZW50aXR5ID0gZnVuY3Rpb24gKF8pIHsgcmV0dXJuIF87IH07XG5cbi8qKlxuICogQ2hlY2sgaWYgdHdvIHZhbHVlcyBhcmUgbG9vc2VseSBlcXVhbCAtIHRoYXQgaXMsXG4gKiBpZiB0aGV5IGFyZSBwbGFpbiBvYmplY3RzLCBkbyB0aGV5IGhhdmUgdGhlIHNhbWUgc2hhcGU/XG4gKi9cbmZ1bmN0aW9uIGxvb3NlRXF1YWwgKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHsgcmV0dXJuIHRydWUgfVxuICB2YXIgaXNPYmplY3RBID0gaXNPYmplY3QoYSk7XG4gIHZhciBpc09iamVjdEIgPSBpc09iamVjdChiKTtcbiAgaWYgKGlzT2JqZWN0QSAmJiBpc09iamVjdEIpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIGlzQXJyYXlBID0gQXJyYXkuaXNBcnJheShhKTtcbiAgICAgIHZhciBpc0FycmF5QiA9IEFycmF5LmlzQXJyYXkoYik7XG4gICAgICBpZiAoaXNBcnJheUEgJiYgaXNBcnJheUIpIHtcbiAgICAgICAgcmV0dXJuIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLmV2ZXJ5KGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoZSwgYltpXSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSBpZiAoYSBpbnN0YW5jZW9mIERhdGUgJiYgYiBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgcmV0dXJuIGEuZ2V0VGltZSgpID09PSBiLmdldFRpbWUoKVxuICAgICAgfSBlbHNlIGlmICghaXNBcnJheUEgJiYgIWlzQXJyYXlCKSB7XG4gICAgICAgIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKGEpO1xuICAgICAgICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhiKTtcbiAgICAgICAgcmV0dXJuIGtleXNBLmxlbmd0aCA9PT0ga2V5c0IubGVuZ3RoICYmIGtleXNBLmV2ZXJ5KGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICByZXR1cm4gbG9vc2VFcXVhbChhW2tleV0sIGJba2V5XSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH0gZWxzZSBpZiAoIWlzT2JqZWN0QSAmJiAhaXNPYmplY3RCKSB7XG4gICAgcmV0dXJuIFN0cmluZyhhKSA9PT0gU3RyaW5nKGIpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGZpcnN0IGluZGV4IGF0IHdoaWNoIGEgbG9vc2VseSBlcXVhbCB2YWx1ZSBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBhcnJheSAoaWYgdmFsdWUgaXMgYSBwbGFpbiBvYmplY3QsIHRoZSBhcnJheSBtdXN0XG4gKiBjb250YWluIGFuIG9iamVjdCBvZiB0aGUgc2FtZSBzaGFwZSksIG9yIC0xIGlmIGl0IGlzIG5vdCBwcmVzZW50LlxuICovXG5mdW5jdGlvbiBsb29zZUluZGV4T2YgKGFyciwgdmFsKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGxvb3NlRXF1YWwoYXJyW2ldLCB2YWwpKSB7IHJldHVybiBpIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuLyoqXG4gKiBFbnN1cmUgYSBmdW5jdGlvbiBpcyBjYWxsZWQgb25seSBvbmNlLlxuICovXG5mdW5jdGlvbiBvbmNlIChmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgU1NSX0FUVFIgPSAnZGF0YS1zZXJ2ZXItcmVuZGVyZWQnO1xuXG52YXIgQVNTRVRfVFlQRVMgPSBbXG4gICdjb21wb25lbnQnLFxuICAnZGlyZWN0aXZlJyxcbiAgJ2ZpbHRlcidcbl07XG5cbnZhciBMSUZFQ1lDTEVfSE9PS1MgPSBbXG4gICdiZWZvcmVDcmVhdGUnLFxuICAnY3JlYXRlZCcsXG4gICdiZWZvcmVNb3VudCcsXG4gICdtb3VudGVkJyxcbiAgJ2JlZm9yZVVwZGF0ZScsXG4gICd1cGRhdGVkJyxcbiAgJ2JlZm9yZURlc3Ryb3knLFxuICAnZGVzdHJveWVkJyxcbiAgJ2FjdGl2YXRlZCcsXG4gICdkZWFjdGl2YXRlZCcsXG4gICdlcnJvckNhcHR1cmVkJyxcbiAgJ3NlcnZlclByZWZldGNoJ1xuXTtcblxuLyogICovXG5cblxuXG52YXIgY29uZmlnID0gKHtcbiAgLyoqXG4gICAqIE9wdGlvbiBtZXJnZSBzdHJhdGVnaWVzICh1c2VkIGluIGNvcmUvdXRpbC9vcHRpb25zKVxuICAgKi9cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIG9wdGlvbk1lcmdlU3RyYXRlZ2llczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAvKipcbiAgICogV2hldGhlciB0byBzdXBwcmVzcyB3YXJuaW5ncy5cbiAgICovXG4gIHNpbGVudDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIFNob3cgcHJvZHVjdGlvbiBtb2RlIHRpcCBtZXNzYWdlIG9uIGJvb3Q/XG4gICAqL1xuICBwcm9kdWN0aW9uVGlwOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGVuYWJsZSBkZXZ0b29sc1xuICAgKi9cbiAgZGV2dG9vbHM6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gcmVjb3JkIHBlcmZcbiAgICovXG4gIHBlcmZvcm1hbmNlOiBmYWxzZSxcblxuICAvKipcbiAgICogRXJyb3IgaGFuZGxlciBmb3Igd2F0Y2hlciBlcnJvcnNcbiAgICovXG4gIGVycm9ySGFuZGxlcjogbnVsbCxcblxuICAvKipcbiAgICogV2FybiBoYW5kbGVyIGZvciB3YXRjaGVyIHdhcm5zXG4gICAqL1xuICB3YXJuSGFuZGxlcjogbnVsbCxcblxuICAvKipcbiAgICogSWdub3JlIGNlcnRhaW4gY3VzdG9tIGVsZW1lbnRzXG4gICAqL1xuICBpZ25vcmVkRWxlbWVudHM6IFtdLFxuXG4gIC8qKlxuICAgKiBDdXN0b20gdXNlciBrZXkgYWxpYXNlcyBmb3Igdi1vblxuICAgKi9cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIGtleUNvZGVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyByZXNlcnZlZCBzbyB0aGF0IGl0IGNhbm5vdCBiZSByZWdpc3RlcmVkIGFzIGFcbiAgICogY29tcG9uZW50LiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZFRhZzogbm8sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBpcyByZXNlcnZlZCBzbyB0aGF0IGl0IGNhbm5vdCBiZSB1c2VkIGFzIGEgY29tcG9uZW50XG4gICAqIHByb3AuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uXG4gICAqL1xuICBpc1Jlc2VydmVkQXR0cjogbm8sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIGFuIHVua25vd24gZWxlbWVudC5cbiAgICogUGxhdGZvcm0tZGVwZW5kZW50LlxuICAgKi9cbiAgaXNVbmtub3duRWxlbWVudDogbm8sXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbmFtZXNwYWNlIG9mIGFuIGVsZW1lbnRcbiAgICovXG4gIGdldFRhZ05hbWVzcGFjZTogbm9vcCxcblxuICAvKipcbiAgICogUGFyc2UgdGhlIHJlYWwgdGFnIG5hbWUgZm9yIHRoZSBzcGVjaWZpYyBwbGF0Zm9ybS5cbiAgICovXG4gIHBhcnNlUGxhdGZvcm1UYWdOYW1lOiBpZGVudGl0eSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIG11c3QgYmUgYm91bmQgdXNpbmcgcHJvcGVydHksIGUuZy4gdmFsdWVcbiAgICogUGxhdGZvcm0tZGVwZW5kZW50LlxuICAgKi9cbiAgbXVzdFVzZVByb3A6IG5vLFxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIHVwZGF0ZXMgYXN5bmNocm9ub3VzbHkuIEludGVuZGVkIHRvIGJlIHVzZWQgYnkgVnVlIFRlc3QgVXRpbHNcbiAgICogVGhpcyB3aWxsIHNpZ25pZmljYW50bHkgcmVkdWNlIHBlcmZvcm1hbmNlIGlmIHNldCB0byBmYWxzZS5cbiAgICovXG4gIGFzeW5jOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBFeHBvc2VkIGZvciBsZWdhY3kgcmVhc29uc1xuICAgKi9cbiAgX2xpZmVjeWNsZUhvb2tzOiBMSUZFQ1lDTEVfSE9PS1Ncbn0pO1xuXG4vKiAgKi9cblxuLyoqXG4gKiB1bmljb2RlIGxldHRlcnMgdXNlZCBmb3IgcGFyc2luZyBodG1sIHRhZ3MsIGNvbXBvbmVudCBuYW1lcyBhbmQgcHJvcGVydHkgcGF0aHMuXG4gKiB1c2luZyBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUzL3NlbWFudGljcy1zY3JpcHRpbmcuaHRtbCNwb3RlbnRpYWxjdXN0b21lbGVtZW50bmFtZVxuICogc2tpcHBpbmcgXFx1MTAwMDAtXFx1RUZGRkYgZHVlIHRvIGl0IGZyZWV6aW5nIHVwIFBoYW50b21KU1xuICovXG52YXIgdW5pY29kZVJlZ0V4cCA9IC9hLXpBLVpcXHUwMEI3XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjAzRi1cXHUyMDQwXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZELztcblxuLyoqXG4gKiBDaGVjayBpZiBhIHN0cmluZyBzdGFydHMgd2l0aCAkIG9yIF9cbiAqL1xuZnVuY3Rpb24gaXNSZXNlcnZlZCAoc3RyKSB7XG4gIHZhciBjID0gKHN0ciArICcnKS5jaGFyQ29kZUF0KDApO1xuICByZXR1cm4gYyA9PT0gMHgyNCB8fCBjID09PSAweDVGXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcHJvcGVydHkuXG4gKi9cbmZ1bmN0aW9uIGRlZiAob2JqLCBrZXksIHZhbCwgZW51bWVyYWJsZSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICB2YWx1ZTogdmFsLFxuICAgIGVudW1lcmFibGU6ICEhZW51bWVyYWJsZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogUGFyc2Ugc2ltcGxlIHBhdGguXG4gKi9cbnZhciBiYWlsUkUgPSBuZXcgUmVnRXhwKChcIlteXCIgKyAodW5pY29kZVJlZ0V4cC5zb3VyY2UpICsgXCIuJF9cXFxcZF1cIikpO1xuZnVuY3Rpb24gcGFyc2VQYXRoIChwYXRoKSB7XG4gIGlmIChiYWlsUkUudGVzdChwYXRoKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBzZWdtZW50cyA9IHBhdGguc3BsaXQoJy4nKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmopIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIW9iaikgeyByZXR1cm4gfVxuICAgICAgb2JqID0gb2JqW3NlZ21lbnRzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIG9ialxuICB9XG59XG5cbi8qICAqL1xuXG4vLyBjYW4gd2UgdXNlIF9fcHJvdG9fXz9cbnZhciBoYXNQcm90byA9ICdfX3Byb3RvX18nIGluIHt9O1xuXG4vLyBCcm93c2VyIGVudmlyb25tZW50IHNuaWZmaW5nXG52YXIgaW5Ccm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgaW5XZWV4ID0gdHlwZW9mIFdYRW52aXJvbm1lbnQgIT09ICd1bmRlZmluZWQnICYmICEhV1hFbnZpcm9ubWVudC5wbGF0Zm9ybTtcbnZhciB3ZWV4UGxhdGZvcm0gPSBpbldlZXggJiYgV1hFbnZpcm9ubWVudC5wbGF0Zm9ybS50b0xvd2VyQ2FzZSgpO1xudmFyIFVBID0gaW5Ccm93c2VyICYmIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG52YXIgaXNJRSA9IFVBICYmIC9tc2llfHRyaWRlbnQvLnRlc3QoVUEpO1xudmFyIGlzSUU5ID0gVUEgJiYgVUEuaW5kZXhPZignbXNpZSA5LjAnKSA+IDA7XG52YXIgaXNFZGdlID0gVUEgJiYgVUEuaW5kZXhPZignZWRnZS8nKSA+IDA7XG52YXIgaXNBbmRyb2lkID0gKFVBICYmIFVBLmluZGV4T2YoJ2FuZHJvaWQnKSA+IDApIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdhbmRyb2lkJyk7XG52YXIgaXNJT1MgPSAoVUEgJiYgL2lwaG9uZXxpcGFkfGlwb2R8aW9zLy50ZXN0KFVBKSkgfHwgKHdlZXhQbGF0Zm9ybSA9PT0gJ2lvcycpO1xudmFyIGlzQ2hyb21lID0gVUEgJiYgL2Nocm9tZVxcL1xcZCsvLnRlc3QoVUEpICYmICFpc0VkZ2U7XG52YXIgaXNQaGFudG9tSlMgPSBVQSAmJiAvcGhhbnRvbWpzLy50ZXN0KFVBKTtcbnZhciBpc0ZGID0gVUEgJiYgVUEubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKTtcblxuLy8gRmlyZWZveCBoYXMgYSBcIndhdGNoXCIgZnVuY3Rpb24gb24gT2JqZWN0LnByb3RvdHlwZS4uLlxudmFyIG5hdGl2ZVdhdGNoID0gKHt9KS53YXRjaDtcblxudmFyIHN1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xuaWYgKGluQnJvd3Nlcikge1xuICB0cnkge1xuICAgIHZhciBvcHRzID0ge307XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wdHMsICdwYXNzaXZlJywgKHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KSk7IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yODVcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdC1wYXNzaXZlJywgbnVsbCwgb3B0cyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG5cbi8vIHRoaXMgbmVlZHMgdG8gYmUgbGF6eS1ldmFsZWQgYmVjYXVzZSB2dWUgbWF5IGJlIHJlcXVpcmVkIGJlZm9yZVxuLy8gdnVlLXNlcnZlci1yZW5kZXJlciBjYW4gc2V0IFZVRV9FTlZcbnZhciBfaXNTZXJ2ZXI7XG52YXIgaXNTZXJ2ZXJSZW5kZXJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIGlmIChfaXNTZXJ2ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghaW5Ccm93c2VyICYmICFpbldlZXggJiYgdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGRldGVjdCBwcmVzZW5jZSBvZiB2dWUtc2VydmVyLXJlbmRlcmVyIGFuZCBhdm9pZFxuICAgICAgLy8gV2VicGFjayBzaGltbWluZyB0aGUgcHJvY2Vzc1xuICAgICAgX2lzU2VydmVyID0gZ2xvYmFsWydwcm9jZXNzJ10gJiYgZ2xvYmFsWydwcm9jZXNzJ10uZW52LlZVRV9FTlYgPT09ICdzZXJ2ZXInO1xuICAgIH0gZWxzZSB7XG4gICAgICBfaXNTZXJ2ZXIgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIF9pc1NlcnZlclxufTtcblxuLy8gZGV0ZWN0IGRldnRvb2xzXG52YXIgZGV2dG9vbHMgPSBpbkJyb3dzZXIgJiYgd2luZG93Ll9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX187XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBpc05hdGl2ZSAoQ3Rvcikge1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT09ICdmdW5jdGlvbicgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KEN0b3IudG9TdHJpbmcoKSlcbn1cblxudmFyIGhhc1N5bWJvbCA9XG4gIHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFN5bWJvbCkgJiZcbiAgdHlwZW9mIFJlZmxlY3QgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFJlZmxlY3Qub3duS2V5cyk7XG5cbnZhciBfU2V0O1xuLyogaXN0YW5idWwgaWdub3JlIGlmICovIC8vICRmbG93LWRpc2FibGUtbGluZVxuaWYgKHR5cGVvZiBTZXQgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFNldCkpIHtcbiAgLy8gdXNlIG5hdGl2ZSBTZXQgd2hlbiBhdmFpbGFibGUuXG4gIF9TZXQgPSBTZXQ7XG59IGVsc2Uge1xuICAvLyBhIG5vbi1zdGFuZGFyZCBTZXQgcG9seWZpbGwgdGhhdCBvbmx5IHdvcmtzIHdpdGggcHJpbWl0aXZlIGtleXMuXG4gIF9TZXQgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTZXQgKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH1cbiAgICBTZXQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIGhhcyAoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXRba2V5XSA9PT0gdHJ1ZVxuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKGtleSkge1xuICAgICAgdGhpcy5zZXRba2V5XSA9IHRydWU7XG4gICAgfTtcbiAgICBTZXQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIgKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH07XG5cbiAgICByZXR1cm4gU2V0O1xuICB9KCkpO1xufVxuXG4vKiAgKi9cblxudmFyIHdhcm4gPSBub29wO1xudmFyIHRpcCA9IG5vb3A7XG52YXIgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IChub29wKTsgLy8gd29yayBhcm91bmQgZmxvdyBjaGVja1xudmFyIGZvcm1hdENvbXBvbmVudE5hbWUgPSAobm9vcCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBoYXNDb25zb2xlID0gdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnO1xuICB2YXIgY2xhc3NpZnlSRSA9IC8oPzpefFstX10pKFxcdykvZztcbiAgdmFyIGNsYXNzaWZ5ID0gZnVuY3Rpb24gKHN0cikgeyByZXR1cm4gc3RyXG4gICAgLnJlcGxhY2UoY2xhc3NpZnlSRSwgZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMudG9VcHBlckNhc2UoKTsgfSlcbiAgICAucmVwbGFjZSgvWy1fXS9nLCAnJyk7IH07XG5cbiAgd2FybiA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgdmFyIHRyYWNlID0gdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnO1xuXG4gICAgaWYgKGNvbmZpZy53YXJuSGFuZGxlcikge1xuICAgICAgY29uZmlnLndhcm5IYW5kbGVyLmNhbGwobnVsbCwgbXNnLCB2bSwgdHJhY2UpO1xuICAgIH0gZWxzZSBpZiAoaGFzQ29uc29sZSAmJiAoIWNvbmZpZy5zaWxlbnQpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKChcIltWdWUgd2Fybl06IFwiICsgbXNnICsgdHJhY2UpKTtcbiAgICB9XG4gIH07XG5cbiAgdGlwID0gZnVuY3Rpb24gKG1zZywgdm0pIHtcbiAgICBpZiAoaGFzQ29uc29sZSAmJiAoIWNvbmZpZy5zaWxlbnQpKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJbVnVlIHRpcF06IFwiICsgbXNnICsgKFxuICAgICAgICB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJydcbiAgICAgICkpO1xuICAgIH1cbiAgfTtcblxuICBmb3JtYXRDb21wb25lbnROYW1lID0gZnVuY3Rpb24gKHZtLCBpbmNsdWRlRmlsZSkge1xuICAgIGlmICh2bS4kcm9vdCA9PT0gdm0pIHtcbiAgICAgIHJldHVybiAnPFJvb3Q+J1xuICAgIH1cbiAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiB2bSA9PT0gJ2Z1bmN0aW9uJyAmJiB2bS5jaWQgIT0gbnVsbFxuICAgICAgPyB2bS5vcHRpb25zXG4gICAgICA6IHZtLl9pc1Z1ZVxuICAgICAgICA/IHZtLiRvcHRpb25zIHx8IHZtLmNvbnN0cnVjdG9yLm9wdGlvbnNcbiAgICAgICAgOiB2bTtcbiAgICB2YXIgbmFtZSA9IG9wdGlvbnMubmFtZSB8fCBvcHRpb25zLl9jb21wb25lbnRUYWc7XG4gICAgdmFyIGZpbGUgPSBvcHRpb25zLl9fZmlsZTtcbiAgICBpZiAoIW5hbWUgJiYgZmlsZSkge1xuICAgICAgdmFyIG1hdGNoID0gZmlsZS5tYXRjaCgvKFteL1xcXFxdKylcXC52dWUkLyk7XG4gICAgICBuYW1lID0gbWF0Y2ggJiYgbWF0Y2hbMV07XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIChuYW1lID8gKFwiPFwiICsgKGNsYXNzaWZ5KG5hbWUpKSArIFwiPlwiKSA6IFwiPEFub255bW91cz5cIikgK1xuICAgICAgKGZpbGUgJiYgaW5jbHVkZUZpbGUgIT09IGZhbHNlID8gKFwiIGF0IFwiICsgZmlsZSkgOiAnJylcbiAgICApXG4gIH07XG5cbiAgdmFyIHJlcGVhdCA9IGZ1bmN0aW9uIChzdHIsIG4pIHtcbiAgICB2YXIgcmVzID0gJyc7XG4gICAgd2hpbGUgKG4pIHtcbiAgICAgIGlmIChuICUgMiA9PT0gMSkgeyByZXMgKz0gc3RyOyB9XG4gICAgICBpZiAobiA+IDEpIHsgc3RyICs9IHN0cjsgfVxuICAgICAgbiA+Pj0gMTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9O1xuXG4gIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSBmdW5jdGlvbiAodm0pIHtcbiAgICBpZiAodm0uX2lzVnVlICYmIHZtLiRwYXJlbnQpIHtcbiAgICAgIHZhciB0cmVlID0gW107XG4gICAgICB2YXIgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDtcbiAgICAgIHdoaWxlICh2bSkge1xuICAgICAgICBpZiAodHJlZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdmFyIGxhc3QgPSB0cmVlW3RyZWUubGVuZ3RoIC0gMV07XG4gICAgICAgICAgaWYgKGxhc3QuY29uc3RydWN0b3IgPT09IHZtLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UrKztcbiAgICAgICAgICAgIHZtID0gdm0uJHBhcmVudDtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPiAwKSB7XG4gICAgICAgICAgICB0cmVlW3RyZWUubGVuZ3RoIC0gMV0gPSBbbGFzdCwgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlXTtcbiAgICAgICAgICAgIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRyZWUucHVzaCh2bSk7XG4gICAgICAgIHZtID0gdm0uJHBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAnXFxuXFxuZm91bmQgaW5cXG5cXG4nICsgdHJlZVxuICAgICAgICAubWFwKGZ1bmN0aW9uICh2bSwgaSkgeyByZXR1cm4gKFwiXCIgKyAoaSA9PT0gMCA/ICctLS0+ICcgOiByZXBlYXQoJyAnLCA1ICsgaSAqIDIpKSArIChBcnJheS5pc0FycmF5KHZtKVxuICAgICAgICAgICAgPyAoKGZvcm1hdENvbXBvbmVudE5hbWUodm1bMF0pKSArIFwiLi4uIChcIiArICh2bVsxXSkgKyBcIiByZWN1cnNpdmUgY2FsbHMpXCIpXG4gICAgICAgICAgICA6IGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSk7IH0pXG4gICAgICAgIC5qb2luKCdcXG4nKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKFwiXFxuXFxuKGZvdW5kIGluIFwiICsgKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSArIFwiKVwiKVxuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciB1aWQgPSAwO1xuXG4vKipcbiAqIEEgZGVwIGlzIGFuIG9ic2VydmFibGUgdGhhdCBjYW4gaGF2ZSBtdWx0aXBsZVxuICogZGlyZWN0aXZlcyBzdWJzY3JpYmluZyB0byBpdC5cbiAqL1xudmFyIERlcCA9IGZ1bmN0aW9uIERlcCAoKSB7XG4gIHRoaXMuaWQgPSB1aWQrKztcbiAgdGhpcy5zdWJzID0gW107XG59O1xuXG5EZXAucHJvdG90eXBlLmFkZFN1YiA9IGZ1bmN0aW9uIGFkZFN1YiAoc3ViKSB7XG4gIHRoaXMuc3Vicy5wdXNoKHN1Yik7XG59O1xuXG5EZXAucHJvdG90eXBlLnJlbW92ZVN1YiA9IGZ1bmN0aW9uIHJlbW92ZVN1YiAoc3ViKSB7XG4gIHJlbW92ZSh0aGlzLnN1YnMsIHN1Yik7XG59O1xuXG5EZXAucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgRGVwLnRhcmdldC5hZGREZXAodGhpcyk7XG4gIH1cbn07XG5cbkRlcC5wcm90b3R5cGUubm90aWZ5ID0gZnVuY3Rpb24gbm90aWZ5ICgpIHtcbiAgLy8gc3RhYmlsaXplIHRoZSBzdWJzY3JpYmVyIGxpc3QgZmlyc3RcbiAgdmFyIHN1YnMgPSB0aGlzLnN1YnMuc2xpY2UoKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbmZpZy5hc3luYykge1xuICAgIC8vIHN1YnMgYXJlbid0IHNvcnRlZCBpbiBzY2hlZHVsZXIgaWYgbm90IHJ1bm5pbmcgYXN5bmNcbiAgICAvLyB3ZSBuZWVkIHRvIHNvcnQgdGhlbSBub3cgdG8gbWFrZSBzdXJlIHRoZXkgZmlyZSBpbiBjb3JyZWN0XG4gICAgLy8gb3JkZXJcbiAgICBzdWJzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuaWQgLSBiLmlkOyB9KTtcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbCA9IHN1YnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgc3Vic1tpXS51cGRhdGUoKTtcbiAgfVxufTtcblxuLy8gVGhlIGN1cnJlbnQgdGFyZ2V0IHdhdGNoZXIgYmVpbmcgZXZhbHVhdGVkLlxuLy8gVGhpcyBpcyBnbG9iYWxseSB1bmlxdWUgYmVjYXVzZSBvbmx5IG9uZSB3YXRjaGVyXG4vLyBjYW4gYmUgZXZhbHVhdGVkIGF0IGEgdGltZS5cbkRlcC50YXJnZXQgPSBudWxsO1xudmFyIHRhcmdldFN0YWNrID0gW107XG5cbmZ1bmN0aW9uIHB1c2hUYXJnZXQgKHRhcmdldCkge1xuICB0YXJnZXRTdGFjay5wdXNoKHRhcmdldCk7XG4gIERlcC50YXJnZXQgPSB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIHBvcFRhcmdldCAoKSB7XG4gIHRhcmdldFN0YWNrLnBvcCgpO1xuICBEZXAudGFyZ2V0ID0gdGFyZ2V0U3RhY2tbdGFyZ2V0U3RhY2subGVuZ3RoIC0gMV07XG59XG5cbi8qICAqL1xuXG52YXIgVk5vZGUgPSBmdW5jdGlvbiBWTm9kZSAoXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIHRleHQsXG4gIGVsbSxcbiAgY29udGV4dCxcbiAgY29tcG9uZW50T3B0aW9ucyxcbiAgYXN5bmNGYWN0b3J5XG4pIHtcbiAgdGhpcy50YWcgPSB0YWc7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgdGhpcy5lbG0gPSBlbG07XG4gIHRoaXMubnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuZm5Db250ZXh0ID0gdW5kZWZpbmVkO1xuICB0aGlzLmZuT3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mblNjb3BlSWQgPSB1bmRlZmluZWQ7XG4gIHRoaXMua2V5ID0gZGF0YSAmJiBkYXRhLmtleTtcbiAgdGhpcy5jb21wb25lbnRPcHRpb25zID0gY29tcG9uZW50T3B0aW9ucztcbiAgdGhpcy5jb21wb25lbnRJbnN0YW5jZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5wYXJlbnQgPSB1bmRlZmluZWQ7XG4gIHRoaXMucmF3ID0gZmFsc2U7XG4gIHRoaXMuaXNTdGF0aWMgPSBmYWxzZTtcbiAgdGhpcy5pc1Jvb3RJbnNlcnQgPSB0cnVlO1xuICB0aGlzLmlzQ29tbWVudCA9IGZhbHNlO1xuICB0aGlzLmlzQ2xvbmVkID0gZmFsc2U7XG4gIHRoaXMuaXNPbmNlID0gZmFsc2U7XG4gIHRoaXMuYXN5bmNGYWN0b3J5ID0gYXN5bmNGYWN0b3J5O1xuICB0aGlzLmFzeW5jTWV0YSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5pc0FzeW5jUGxhY2Vob2xkZXIgPSBmYWxzZTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGNoaWxkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8vIERFUFJFQ0FURUQ6IGFsaWFzIGZvciBjb21wb25lbnRJbnN0YW5jZSBmb3IgYmFja3dhcmRzIGNvbXBhdC5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5wcm90b3R5cGVBY2Nlc3NvcnMuY2hpbGQuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5jb21wb25lbnRJbnN0YW5jZVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFZOb2RlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbnZhciBjcmVhdGVFbXB0eVZOb2RlID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgaWYgKCB0ZXh0ID09PSB2b2lkIDAgKSB0ZXh0ID0gJyc7XG5cbiAgdmFyIG5vZGUgPSBuZXcgVk5vZGUoKTtcbiAgbm9kZS50ZXh0ID0gdGV4dDtcbiAgbm9kZS5pc0NvbW1lbnQgPSB0cnVlO1xuICByZXR1cm4gbm9kZVxufTtcblxuZnVuY3Rpb24gY3JlYXRlVGV4dFZOb2RlICh2YWwpIHtcbiAgcmV0dXJuIG5ldyBWTm9kZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBTdHJpbmcodmFsKSlcbn1cblxuLy8gb3B0aW1pemVkIHNoYWxsb3cgY2xvbmVcbi8vIHVzZWQgZm9yIHN0YXRpYyBub2RlcyBhbmQgc2xvdCBub2RlcyBiZWNhdXNlIHRoZXkgbWF5IGJlIHJldXNlZCBhY3Jvc3Ncbi8vIG11bHRpcGxlIHJlbmRlcnMsIGNsb25pbmcgdGhlbSBhdm9pZHMgZXJyb3JzIHdoZW4gRE9NIG1hbmlwdWxhdGlvbnMgcmVseVxuLy8gb24gdGhlaXIgZWxtIHJlZmVyZW5jZS5cbmZ1bmN0aW9uIGNsb25lVk5vZGUgKHZub2RlKSB7XG4gIHZhciBjbG9uZWQgPSBuZXcgVk5vZGUoXG4gICAgdm5vZGUudGFnLFxuICAgIHZub2RlLmRhdGEsXG4gICAgLy8gIzc5NzVcbiAgICAvLyBjbG9uZSBjaGlsZHJlbiBhcnJheSB0byBhdm9pZCBtdXRhdGluZyBvcmlnaW5hbCBpbiBjYXNlIG9mIGNsb25pbmdcbiAgICAvLyBhIGNoaWxkLlxuICAgIHZub2RlLmNoaWxkcmVuICYmIHZub2RlLmNoaWxkcmVuLnNsaWNlKCksXG4gICAgdm5vZGUudGV4dCxcbiAgICB2bm9kZS5lbG0sXG4gICAgdm5vZGUuY29udGV4dCxcbiAgICB2bm9kZS5jb21wb25lbnRPcHRpb25zLFxuICAgIHZub2RlLmFzeW5jRmFjdG9yeVxuICApO1xuICBjbG9uZWQubnMgPSB2bm9kZS5ucztcbiAgY2xvbmVkLmlzU3RhdGljID0gdm5vZGUuaXNTdGF0aWM7XG4gIGNsb25lZC5rZXkgPSB2bm9kZS5rZXk7XG4gIGNsb25lZC5pc0NvbW1lbnQgPSB2bm9kZS5pc0NvbW1lbnQ7XG4gIGNsb25lZC5mbkNvbnRleHQgPSB2bm9kZS5mbkNvbnRleHQ7XG4gIGNsb25lZC5mbk9wdGlvbnMgPSB2bm9kZS5mbk9wdGlvbnM7XG4gIGNsb25lZC5mblNjb3BlSWQgPSB2bm9kZS5mblNjb3BlSWQ7XG4gIGNsb25lZC5hc3luY01ldGEgPSB2bm9kZS5hc3luY01ldGE7XG4gIGNsb25lZC5pc0Nsb25lZCA9IHRydWU7XG4gIHJldHVybiBjbG9uZWRcbn1cblxuLypcbiAqIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aFxuICogZHluYW1pY2FsbHkgYWNjZXNzaW5nIG1ldGhvZHMgb24gQXJyYXkgcHJvdG90eXBlXG4gKi9cblxudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG52YXIgYXJyYXlNZXRob2RzID0gT2JqZWN0LmNyZWF0ZShhcnJheVByb3RvKTtcblxudmFyIG1ldGhvZHNUb1BhdGNoID0gW1xuICAncHVzaCcsXG4gICdwb3AnLFxuICAnc2hpZnQnLFxuICAndW5zaGlmdCcsXG4gICdzcGxpY2UnLFxuICAnc29ydCcsXG4gICdyZXZlcnNlJ1xuXTtcblxuLyoqXG4gKiBJbnRlcmNlcHQgbXV0YXRpbmcgbWV0aG9kcyBhbmQgZW1pdCBldmVudHNcbiAqL1xubWV0aG9kc1RvUGF0Y2guZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gIC8vIGNhY2hlIG9yaWdpbmFsIG1ldGhvZFxuICB2YXIgb3JpZ2luYWwgPSBhcnJheVByb3RvW21ldGhvZF07XG4gIGRlZihhcnJheU1ldGhvZHMsIG1ldGhvZCwgZnVuY3Rpb24gbXV0YXRvciAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgdmFyIHJlc3VsdCA9IG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIHZhciBvYiA9IHRoaXMuX19vYl9fO1xuICAgIHZhciBpbnNlcnRlZDtcbiAgICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgICAgY2FzZSAncHVzaCc6XG4gICAgICBjYXNlICd1bnNoaWZ0JzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzO1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnc3BsaWNlJzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzLnNsaWNlKDIpO1xuICAgICAgICBicmVha1xuICAgIH1cbiAgICBpZiAoaW5zZXJ0ZWQpIHsgb2Iub2JzZXJ2ZUFycmF5KGluc2VydGVkKTsgfVxuICAgIC8vIG5vdGlmeSBjaGFuZ2VcbiAgICBvYi5kZXAubm90aWZ5KCk7XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9KTtcbn0pO1xuXG4vKiAgKi9cblxudmFyIGFycmF5S2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFycmF5TWV0aG9kcyk7XG5cbi8qKlxuICogSW4gc29tZSBjYXNlcyB3ZSBtYXkgd2FudCB0byBkaXNhYmxlIG9ic2VydmF0aW9uIGluc2lkZSBhIGNvbXBvbmVudCdzXG4gKiB1cGRhdGUgY29tcHV0YXRpb24uXG4gKi9cbnZhciBzaG91bGRPYnNlcnZlID0gdHJ1ZTtcblxuZnVuY3Rpb24gdG9nZ2xlT2JzZXJ2aW5nICh2YWx1ZSkge1xuICBzaG91bGRPYnNlcnZlID0gdmFsdWU7XG59XG5cbi8qKlxuICogT2JzZXJ2ZXIgY2xhc3MgdGhhdCBpcyBhdHRhY2hlZCB0byBlYWNoIG9ic2VydmVkXG4gKiBvYmplY3QuIE9uY2UgYXR0YWNoZWQsIHRoZSBvYnNlcnZlciBjb252ZXJ0cyB0aGUgdGFyZ2V0XG4gKiBvYmplY3QncyBwcm9wZXJ0eSBrZXlzIGludG8gZ2V0dGVyL3NldHRlcnMgdGhhdFxuICogY29sbGVjdCBkZXBlbmRlbmNpZXMgYW5kIGRpc3BhdGNoIHVwZGF0ZXMuXG4gKi9cbnZhciBPYnNlcnZlciA9IGZ1bmN0aW9uIE9ic2VydmVyICh2YWx1ZSkge1xuICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIHRoaXMuZGVwID0gbmV3IERlcCgpO1xuICB0aGlzLnZtQ291bnQgPSAwO1xuICBkZWYodmFsdWUsICdfX29iX18nLCB0aGlzKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgaWYgKGhhc1Byb3RvKSB7XG4gICAgICBwcm90b0F1Z21lbnQodmFsdWUsIGFycmF5TWV0aG9kcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvcHlBdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMsIGFycmF5S2V5cyk7XG4gICAgfVxuICAgIHRoaXMub2JzZXJ2ZUFycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLndhbGsodmFsdWUpO1xuICB9XG59O1xuXG4vKipcbiAqIFdhbGsgdGhyb3VnaCBhbGwgcHJvcGVydGllcyBhbmQgY29udmVydCB0aGVtIGludG9cbiAqIGdldHRlci9zZXR0ZXJzLiBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSBjYWxsZWQgd2hlblxuICogdmFsdWUgdHlwZSBpcyBPYmplY3QuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS53YWxrID0gZnVuY3Rpb24gd2FsayAob2JqKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEob2JqLCBrZXlzW2ldKTtcbiAgfVxufTtcblxuLyoqXG4gKiBPYnNlcnZlIGEgbGlzdCBvZiBBcnJheSBpdGVtcy5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLm9ic2VydmVBcnJheSA9IGZ1bmN0aW9uIG9ic2VydmVBcnJheSAoaXRlbXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBpdGVtcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvYnNlcnZlKGl0ZW1zW2ldKTtcbiAgfVxufTtcblxuLy8gaGVscGVyc1xuXG4vKipcbiAqIEF1Z21lbnQgYSB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGludGVyY2VwdGluZ1xuICogdGhlIHByb3RvdHlwZSBjaGFpbiB1c2luZyBfX3Byb3RvX19cbiAqL1xuZnVuY3Rpb24gcHJvdG9BdWdtZW50ICh0YXJnZXQsIHNyYykge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuICB0YXJnZXQuX19wcm90b19fID0gc3JjO1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXByb3RvICovXG59XG5cbi8qKlxuICogQXVnbWVudCBhIHRhcmdldCBPYmplY3Qgb3IgQXJyYXkgYnkgZGVmaW5pbmdcbiAqIGhpZGRlbiBwcm9wZXJ0aWVzLlxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gY29weUF1Z21lbnQgKHRhcmdldCwgc3JjLCBrZXlzKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBkZWYodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcbiAgfVxufVxuXG4vKipcbiAqIEF0dGVtcHQgdG8gY3JlYXRlIGFuIG9ic2VydmVyIGluc3RhbmNlIGZvciBhIHZhbHVlLFxuICogcmV0dXJucyB0aGUgbmV3IG9ic2VydmVyIGlmIHN1Y2Nlc3NmdWxseSBvYnNlcnZlZCxcbiAqIG9yIHRoZSBleGlzdGluZyBvYnNlcnZlciBpZiB0aGUgdmFsdWUgYWxyZWFkeSBoYXMgb25lLlxuICovXG5mdW5jdGlvbiBvYnNlcnZlICh2YWx1ZSwgYXNSb290RGF0YSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCB2YWx1ZSBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iO1xuICBpZiAoaGFzT3duKHZhbHVlLCAnX19vYl9fJykgJiYgdmFsdWUuX19vYl9fIGluc3RhbmNlb2YgT2JzZXJ2ZXIpIHtcbiAgICBvYiA9IHZhbHVlLl9fb2JfXztcbiAgfSBlbHNlIGlmIChcbiAgICBzaG91bGRPYnNlcnZlICYmXG4gICAgIWlzU2VydmVyUmVuZGVyaW5nKCkgJiZcbiAgICAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgaXNQbGFpbk9iamVjdCh2YWx1ZSkpICYmXG4gICAgT2JqZWN0LmlzRXh0ZW5zaWJsZSh2YWx1ZSkgJiZcbiAgICAhdmFsdWUuX2lzVnVlXG4gICkge1xuICAgIG9iID0gbmV3IE9ic2VydmVyKHZhbHVlKTtcbiAgfVxuICBpZiAoYXNSb290RGF0YSAmJiBvYikge1xuICAgIG9iLnZtQ291bnQrKztcbiAgfVxuICByZXR1cm4gb2Jcbn1cblxuLyoqXG4gKiBEZWZpbmUgYSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiBhbiBPYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGRlZmluZVJlYWN0aXZlJCQxIChcbiAgb2JqLFxuICBrZXksXG4gIHZhbCxcbiAgY3VzdG9tU2V0dGVyLFxuICBzaGFsbG93XG4pIHtcbiAgdmFyIGRlcCA9IG5ldyBEZXAoKTtcblxuICB2YXIgcHJvcGVydHkgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KTtcbiAgaWYgKHByb3BlcnR5ICYmIHByb3BlcnR5LmNvbmZpZ3VyYWJsZSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGNhdGVyIGZvciBwcmUtZGVmaW5lZCBnZXR0ZXIvc2V0dGVyc1xuICB2YXIgZ2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuZ2V0O1xuICB2YXIgc2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuc2V0O1xuICBpZiAoKCFnZXR0ZXIgfHwgc2V0dGVyKSAmJiBhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgdmFsID0gb2JqW2tleV07XG4gIH1cblxuICB2YXIgY2hpbGRPYiA9ICFzaGFsbG93ICYmIG9ic2VydmUodmFsKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiByZWFjdGl2ZUdldHRlciAoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgZGVwLmRlcGVuZCgpO1xuICAgICAgICBpZiAoY2hpbGRPYikge1xuICAgICAgICAgIGNoaWxkT2IuZGVwLmRlcGVuZCgpO1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgZGVwZW5kQXJyYXkodmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlU2V0dGVyIChuZXdWYWwpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChuZXdWYWwgPT09IHZhbHVlIHx8IChuZXdWYWwgIT09IG5ld1ZhbCAmJiB2YWx1ZSAhPT0gdmFsdWUpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGN1c3RvbVNldHRlcikge1xuICAgICAgICBjdXN0b21TZXR0ZXIoKTtcbiAgICAgIH1cbiAgICAgIC8vICM3OTgxOiBmb3IgYWNjZXNzb3IgcHJvcGVydGllcyB3aXRob3V0IHNldHRlclxuICAgICAgaWYgKGdldHRlciAmJiAhc2V0dGVyKSB7IHJldHVybiB9XG4gICAgICBpZiAoc2V0dGVyKSB7XG4gICAgICAgIHNldHRlci5jYWxsKG9iaiwgbmV3VmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IG5ld1ZhbDtcbiAgICAgIH1cbiAgICAgIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKG5ld1ZhbCk7XG4gICAgICBkZXAubm90aWZ5KCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgYSBwcm9wZXJ0eSBvbiBhbiBvYmplY3QuIEFkZHMgdGhlIG5ldyBwcm9wZXJ0eSBhbmRcbiAqIHRyaWdnZXJzIGNoYW5nZSBub3RpZmljYXRpb24gaWYgdGhlIHByb3BlcnR5IGRvZXNuJ3RcbiAqIGFscmVhZHkgZXhpc3QuXG4gKi9cbmZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSlcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3Qgc2V0IHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQubGVuZ3RoID0gTWF0aC5tYXgodGFyZ2V0Lmxlbmd0aCwga2V5KTtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSwgdmFsKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKGtleSBpbiB0YXJnZXQgJiYgIShrZXkgaW4gT2JqZWN0LnByb3RvdHlwZSkpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgYWRkaW5nIHJlYWN0aXZlIHByb3BlcnRpZXMgdG8gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnYXQgcnVudGltZSAtIGRlY2xhcmUgaXQgdXBmcm9udCBpbiB0aGUgZGF0YSBvcHRpb24uJ1xuICAgICk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmICghb2IpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgZGVmaW5lUmVhY3RpdmUkJDEob2IudmFsdWUsIGtleSwgdmFsKTtcbiAgb2IuZGVwLm5vdGlmeSgpO1xuICByZXR1cm4gdmFsXG59XG5cbi8qKlxuICogRGVsZXRlIGEgcHJvcGVydHkgYW5kIHRyaWdnZXIgY2hhbmdlIGlmIG5lY2Vzc2FyeS5cbiAqL1xuZnVuY3Rpb24gZGVsICh0YXJnZXQsIGtleSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSlcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3QgZGVsZXRlIHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgZGVsZXRpbmcgcHJvcGVydGllcyBvbiBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICctIGp1c3Qgc2V0IGl0IHRvIG51bGwuJ1xuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKCFoYXNPd24odGFyZ2V0LCBrZXkpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgZGVsZXRlIHRhcmdldFtrZXldO1xuICBpZiAoIW9iKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgb2IuZGVwLm5vdGlmeSgpO1xufVxuXG4vKipcbiAqIENvbGxlY3QgZGVwZW5kZW5jaWVzIG9uIGFycmF5IGVsZW1lbnRzIHdoZW4gdGhlIGFycmF5IGlzIHRvdWNoZWQsIHNpbmNlXG4gKiB3ZSBjYW5ub3QgaW50ZXJjZXB0IGFycmF5IGVsZW1lbnQgYWNjZXNzIGxpa2UgcHJvcGVydHkgZ2V0dGVycy5cbiAqL1xuZnVuY3Rpb24gZGVwZW5kQXJyYXkgKHZhbHVlKSB7XG4gIGZvciAodmFyIGUgPSAodm9pZCAwKSwgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBlID0gdmFsdWVbaV07XG4gICAgZSAmJiBlLl9fb2JfXyAmJiBlLl9fb2JfXy5kZXAuZGVwZW5kKCk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgIGRlcGVuZEFycmF5KGUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBPcHRpb24gb3ZlcndyaXRpbmcgc3RyYXRlZ2llcyBhcmUgZnVuY3Rpb25zIHRoYXQgaGFuZGxlXG4gKiBob3cgdG8gbWVyZ2UgYSBwYXJlbnQgb3B0aW9uIHZhbHVlIGFuZCBhIGNoaWxkIG9wdGlvblxuICogdmFsdWUgaW50byB0aGUgZmluYWwgdmFsdWUuXG4gKi9cbnZhciBzdHJhdHMgPSBjb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xuXG4vKipcbiAqIE9wdGlvbnMgd2l0aCByZXN0cmljdGlvbnNcbiAqL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgc3RyYXRzLmVsID0gc3RyYXRzLnByb3BzRGF0YSA9IGZ1bmN0aW9uIChwYXJlbnQsIGNoaWxkLCB2bSwga2V5KSB7XG4gICAgaWYgKCF2bSkge1xuICAgICAgd2FybihcbiAgICAgICAgXCJvcHRpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIGluc3RhbmNlIFwiICtcbiAgICAgICAgJ2NyZWF0aW9uIHdpdGggdGhlIGBuZXdgIGtleXdvcmQuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmF1bHRTdHJhdChwYXJlbnQsIGNoaWxkKVxuICB9O1xufVxuXG4vKipcbiAqIEhlbHBlciB0aGF0IHJlY3Vyc2l2ZWx5IG1lcmdlcyB0d28gZGF0YSBvYmplY3RzIHRvZ2V0aGVyLlxuICovXG5mdW5jdGlvbiBtZXJnZURhdGEgKHRvLCBmcm9tKSB7XG4gIGlmICghZnJvbSkgeyByZXR1cm4gdG8gfVxuICB2YXIga2V5LCB0b1ZhbCwgZnJvbVZhbDtcblxuICB2YXIga2V5cyA9IGhhc1N5bWJvbFxuICAgID8gUmVmbGVjdC5vd25LZXlzKGZyb20pXG4gICAgOiBPYmplY3Qua2V5cyhmcm9tKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIC8vIGluIGNhc2UgdGhlIG9iamVjdCBpcyBhbHJlYWR5IG9ic2VydmVkLi4uXG4gICAgaWYgKGtleSA9PT0gJ19fb2JfXycpIHsgY29udGludWUgfVxuICAgIHRvVmFsID0gdG9ba2V5XTtcbiAgICBmcm9tVmFsID0gZnJvbVtrZXldO1xuICAgIGlmICghaGFzT3duKHRvLCBrZXkpKSB7XG4gICAgICBzZXQodG8sIGtleSwgZnJvbVZhbCk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIHRvVmFsICE9PSBmcm9tVmFsICYmXG4gICAgICBpc1BsYWluT2JqZWN0KHRvVmFsKSAmJlxuICAgICAgaXNQbGFpbk9iamVjdChmcm9tVmFsKVxuICAgICkge1xuICAgICAgbWVyZ2VEYXRhKHRvVmFsLCBmcm9tVmFsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvXG59XG5cbi8qKlxuICogRGF0YVxuICovXG5mdW5jdGlvbiBtZXJnZURhdGFPckZuIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgLy8gaW4gYSBWdWUuZXh0ZW5kIG1lcmdlLCBib3RoIHNob3VsZCBiZSBmdW5jdGlvbnNcbiAgICBpZiAoIWNoaWxkVmFsKSB7XG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIGlmICghcGFyZW50VmFsKSB7XG4gICAgICByZXR1cm4gY2hpbGRWYWxcbiAgICB9XG4gICAgLy8gd2hlbiBwYXJlbnRWYWwgJiBjaGlsZFZhbCBhcmUgYm90aCBwcmVzZW50LFxuICAgIC8vIHdlIG5lZWQgdG8gcmV0dXJuIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZVxuICAgIC8vIG1lcmdlZCByZXN1bHQgb2YgYm90aCBmdW5jdGlvbnMuLi4gbm8gbmVlZCB0b1xuICAgIC8vIGNoZWNrIGlmIHBhcmVudFZhbCBpcyBhIGZ1bmN0aW9uIGhlcmUgYmVjYXVzZVxuICAgIC8vIGl0IGhhcyB0byBiZSBhIGZ1bmN0aW9uIHRvIHBhc3MgcHJldmlvdXMgbWVyZ2VzLlxuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWREYXRhRm4gKCkge1xuICAgICAgcmV0dXJuIG1lcmdlRGF0YShcbiAgICAgICAgdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nID8gY2hpbGRWYWwuY2FsbCh0aGlzLCB0aGlzKSA6IGNoaWxkVmFsLFxuICAgICAgICB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nID8gcGFyZW50VmFsLmNhbGwodGhpcywgdGhpcykgOiBwYXJlbnRWYWxcbiAgICAgIClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZEluc3RhbmNlRGF0YUZuICgpIHtcbiAgICAgIC8vIGluc3RhbmNlIG1lcmdlXG4gICAgICB2YXIgaW5zdGFuY2VEYXRhID0gdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gY2hpbGRWYWwuY2FsbCh2bSwgdm0pXG4gICAgICAgIDogY2hpbGRWYWw7XG4gICAgICB2YXIgZGVmYXVsdERhdGEgPSB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcGFyZW50VmFsLmNhbGwodm0sIHZtKVxuICAgICAgICA6IHBhcmVudFZhbDtcbiAgICAgIGlmIChpbnN0YW5jZURhdGEpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlRGF0YShpbnN0YW5jZURhdGEsIGRlZmF1bHREYXRhKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHREYXRhXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnN0cmF0cy5kYXRhID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bVxuKSB7XG4gIGlmICghdm0pIHtcbiAgICBpZiAoY2hpbGRWYWwgJiYgdHlwZW9mIGNoaWxkVmFsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICdUaGUgXCJkYXRhXCIgb3B0aW9uIHNob3VsZCBiZSBhIGZ1bmN0aW9uICcgK1xuICAgICAgICAndGhhdCByZXR1cm5zIGEgcGVyLWluc3RhbmNlIHZhbHVlIGluIGNvbXBvbmVudCAnICtcbiAgICAgICAgJ2RlZmluaXRpb25zLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwpXG4gIH1cblxuICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsLCB2bSlcbn07XG5cbi8qKlxuICogSG9va3MgYW5kIHByb3BzIGFyZSBtZXJnZWQgYXMgYXJyYXlzLlxuICovXG5mdW5jdGlvbiBtZXJnZUhvb2sgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsXG4pIHtcbiAgdmFyIHJlcyA9IGNoaWxkVmFsXG4gICAgPyBwYXJlbnRWYWxcbiAgICAgID8gcGFyZW50VmFsLmNvbmNhdChjaGlsZFZhbClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZFZhbClcbiAgICAgICAgPyBjaGlsZFZhbFxuICAgICAgICA6IFtjaGlsZFZhbF1cbiAgICA6IHBhcmVudFZhbDtcbiAgcmV0dXJuIHJlc1xuICAgID8gZGVkdXBlSG9va3MocmVzKVxuICAgIDogcmVzXG59XG5cbmZ1bmN0aW9uIGRlZHVwZUhvb2tzIChob29rcykge1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocmVzLmluZGV4T2YoaG9va3NbaV0pID09PSAtMSkge1xuICAgICAgcmVzLnB1c2goaG9va3NbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkxJRkVDWUNMRV9IT09LUy5mb3JFYWNoKGZ1bmN0aW9uIChob29rKSB7XG4gIHN0cmF0c1tob29rXSA9IG1lcmdlSG9vaztcbn0pO1xuXG4vKipcbiAqIEFzc2V0c1xuICpcbiAqIFdoZW4gYSB2bSBpcyBwcmVzZW50IChpbnN0YW5jZSBjcmVhdGlvbiksIHdlIG5lZWQgdG8gZG9cbiAqIGEgdGhyZWUtd2F5IG1lcmdlIGJldHdlZW4gY29uc3RydWN0b3Igb3B0aW9ucywgaW5zdGFuY2VcbiAqIG9wdGlvbnMgYW5kIHBhcmVudCBvcHRpb25zLlxuICovXG5mdW5jdGlvbiBtZXJnZUFzc2V0cyAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCk7XG4gIGlmIChjaGlsZFZhbCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gICAgcmV0dXJuIGV4dGVuZChyZXMsIGNoaWxkVmFsKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXNcbiAgfVxufVxuXG5BU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gIHN0cmF0c1t0eXBlICsgJ3MnXSA9IG1lcmdlQXNzZXRzO1xufSk7XG5cbi8qKlxuICogV2F0Y2hlcnMuXG4gKlxuICogV2F0Y2hlcnMgaGFzaGVzIHNob3VsZCBub3Qgb3ZlcndyaXRlIG9uZVxuICogYW5vdGhlciwgc28gd2UgbWVyZ2UgdGhlbSBhcyBhcnJheXMuXG4gKi9cbnN0cmF0cy53YXRjaCA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIC8vIHdvcmsgYXJvdW5kIEZpcmVmb3gncyBPYmplY3QucHJvdG90eXBlLndhdGNoLi4uXG4gIGlmIChwYXJlbnRWYWwgPT09IG5hdGl2ZVdhdGNoKSB7IHBhcmVudFZhbCA9IHVuZGVmaW5lZDsgfVxuICBpZiAoY2hpbGRWYWwgPT09IG5hdGl2ZVdhdGNoKSB7IGNoaWxkVmFsID0gdW5kZWZpbmVkOyB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNoaWxkVmFsKSB7IHJldHVybiBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKSB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IHt9O1xuICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICBmb3IgKHZhciBrZXkkMSBpbiBjaGlsZFZhbCkge1xuICAgIHZhciBwYXJlbnQgPSByZXRba2V5JDFdO1xuICAgIHZhciBjaGlsZCA9IGNoaWxkVmFsW2tleSQxXTtcbiAgICBpZiAocGFyZW50ICYmICFBcnJheS5pc0FycmF5KHBhcmVudCkpIHtcbiAgICAgIHBhcmVudCA9IFtwYXJlbnRdO1xuICAgIH1cbiAgICByZXRba2V5JDFdID0gcGFyZW50XG4gICAgICA/IHBhcmVudC5jb25jYXQoY2hpbGQpXG4gICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGQpID8gY2hpbGQgOiBbY2hpbGRdO1xuICB9XG4gIHJldHVybiByZXRcbn07XG5cbi8qKlxuICogT3RoZXIgb2JqZWN0IGhhc2hlcy5cbiAqL1xuc3RyYXRzLnByb3BzID1cbnN0cmF0cy5tZXRob2RzID1cbnN0cmF0cy5pbmplY3QgPVxuc3RyYXRzLmNvbXB1dGVkID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgaWYgKGNoaWxkVmFsICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgfVxuICBpZiAoIXBhcmVudFZhbCkgeyByZXR1cm4gY2hpbGRWYWwgfVxuICB2YXIgcmV0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgaWYgKGNoaWxkVmFsKSB7IGV4dGVuZChyZXQsIGNoaWxkVmFsKTsgfVxuICByZXR1cm4gcmV0XG59O1xuc3RyYXRzLnByb3ZpZGUgPSBtZXJnZURhdGFPckZuO1xuXG4vKipcbiAqIERlZmF1bHQgc3RyYXRlZ3kuXG4gKi9cbnZhciBkZWZhdWx0U3RyYXQgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICByZXR1cm4gY2hpbGRWYWwgPT09IHVuZGVmaW5lZFxuICAgID8gcGFyZW50VmFsXG4gICAgOiBjaGlsZFZhbFxufTtcblxuLyoqXG4gKiBWYWxpZGF0ZSBjb21wb25lbnQgbmFtZXNcbiAqL1xuZnVuY3Rpb24gY2hlY2tDb21wb25lbnRzIChvcHRpb25zKSB7XG4gIGZvciAodmFyIGtleSBpbiBvcHRpb25zLmNvbXBvbmVudHMpIHtcbiAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoa2V5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUNvbXBvbmVudE5hbWUgKG5hbWUpIHtcbiAgaWYgKCFuZXcgUmVnRXhwKChcIl5bYS16QS1aXVtcXFxcLVxcXFwuMC05X1wiICsgKHVuaWNvZGVSZWdFeHAuc291cmNlKSArIFwiXSokXCIpKS50ZXN0KG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIGNvbXBvbmVudCBuYW1lOiBcIicgKyBuYW1lICsgJ1wiLiBDb21wb25lbnQgbmFtZXMgJyArXG4gICAgICAnc2hvdWxkIGNvbmZvcm0gdG8gdmFsaWQgY3VzdG9tIGVsZW1lbnQgbmFtZSBpbiBodG1sNSBzcGVjaWZpY2F0aW9uLidcbiAgICApO1xuICB9XG4gIGlmIChpc0J1aWx0SW5UYWcobmFtZSkgfHwgY29uZmlnLmlzUmVzZXJ2ZWRUYWcobmFtZSkpIHtcbiAgICB3YXJuKFxuICAgICAgJ0RvIG5vdCB1c2UgYnVpbHQtaW4gb3IgcmVzZXJ2ZWQgSFRNTCBlbGVtZW50cyBhcyBjb21wb25lbnQgJyArXG4gICAgICAnaWQ6ICcgKyBuYW1lXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIEVuc3VyZSBhbGwgcHJvcHMgb3B0aW9uIHN5bnRheCBhcmUgbm9ybWFsaXplZCBpbnRvIHRoZVxuICogT2JqZWN0LWJhc2VkIGZvcm1hdC5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplUHJvcHMgKG9wdGlvbnMsIHZtKSB7XG4gIHZhciBwcm9wcyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmICghcHJvcHMpIHsgcmV0dXJuIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgaSwgdmFsLCBuYW1lO1xuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wcykpIHtcbiAgICBpID0gcHJvcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHZhbCA9IHByb3BzW2ldO1xuICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG5hbWUgPSBjYW1lbGl6ZSh2YWwpO1xuICAgICAgICByZXNbbmFtZV0gPSB7IHR5cGU6IG51bGwgfTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuKCdwcm9wcyBtdXN0IGJlIHN0cmluZ3Mgd2hlbiB1c2luZyBhcnJheSBzeW50YXguJyk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QocHJvcHMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgICB2YWwgPSBwcm9wc1trZXldO1xuICAgICAgbmFtZSA9IGNhbWVsaXplKGtleSk7XG4gICAgICByZXNbbmFtZV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgPyB2YWxcbiAgICAgICAgOiB7IHR5cGU6IHZhbCB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJwcm9wc1xcXCI6IGV4cGVjdGVkIGFuIEFycmF5IG9yIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZShwcm9wcykpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgb3B0aW9ucy5wcm9wcyA9IHJlcztcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYWxsIGluamVjdGlvbnMgaW50byBPYmplY3QtYmFzZWQgZm9ybWF0XG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZUluamVjdCAob3B0aW9ucywgdm0pIHtcbiAgdmFyIGluamVjdCA9IG9wdGlvbnMuaW5qZWN0O1xuICBpZiAoIWluamVjdCkgeyByZXR1cm4gfVxuICB2YXIgbm9ybWFsaXplZCA9IG9wdGlvbnMuaW5qZWN0ID0ge307XG4gIGlmIChBcnJheS5pc0FycmF5KGluamVjdCkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluamVjdC5sZW5ndGg7IGkrKykge1xuICAgICAgbm9ybWFsaXplZFtpbmplY3RbaV1dID0geyBmcm9tOiBpbmplY3RbaV0gfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChpbmplY3QpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGluamVjdCkge1xuICAgICAgdmFyIHZhbCA9IGluamVjdFtrZXldO1xuICAgICAgbm9ybWFsaXplZFtrZXldID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gZXh0ZW5kKHsgZnJvbToga2V5IH0sIHZhbClcbiAgICAgICAgOiB7IGZyb206IHZhbCB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJpbmplY3RcXFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUoaW5qZWN0KSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSByYXcgZnVuY3Rpb24gZGlyZWN0aXZlcyBpbnRvIG9iamVjdCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdGl2ZXMgKG9wdGlvbnMpIHtcbiAgdmFyIGRpcnMgPSBvcHRpb25zLmRpcmVjdGl2ZXM7XG4gIGlmIChkaXJzKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGRpcnMpIHtcbiAgICAgIHZhciBkZWYkJDEgPSBkaXJzW2tleV07XG4gICAgICBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBkaXJzW2tleV0gPSB7IGJpbmQ6IGRlZiQkMSwgdXBkYXRlOiBkZWYkJDEgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0T2JqZWN0VHlwZSAobmFtZSwgdmFsdWUsIHZtKSB7XG4gIGlmICghaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcIlwiICsgbmFtZSArIFwiXFxcIjogZXhwZWN0ZWQgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKHZhbHVlKSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIE1lcmdlIHR3byBvcHRpb24gb2JqZWN0cyBpbnRvIGEgbmV3IG9uZS5cbiAqIENvcmUgdXRpbGl0eSB1c2VkIGluIGJvdGggaW5zdGFudGlhdGlvbiBhbmQgaW5oZXJpdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlT3B0aW9ucyAoXG4gIHBhcmVudCxcbiAgY2hpbGQsXG4gIHZtXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaGVja0NvbXBvbmVudHMoY2hpbGQpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNoaWxkID0gY2hpbGQub3B0aW9ucztcbiAgfVxuXG4gIG5vcm1hbGl6ZVByb3BzKGNoaWxkLCB2bSk7XG4gIG5vcm1hbGl6ZUluamVjdChjaGlsZCwgdm0pO1xuICBub3JtYWxpemVEaXJlY3RpdmVzKGNoaWxkKTtcblxuICAvLyBBcHBseSBleHRlbmRzIGFuZCBtaXhpbnMgb24gdGhlIGNoaWxkIG9wdGlvbnMsXG4gIC8vIGJ1dCBvbmx5IGlmIGl0IGlzIGEgcmF3IG9wdGlvbnMgb2JqZWN0IHRoYXQgaXNuJ3RcbiAgLy8gdGhlIHJlc3VsdCBvZiBhbm90aGVyIG1lcmdlT3B0aW9ucyBjYWxsLlxuICAvLyBPbmx5IG1lcmdlZCBvcHRpb25zIGhhcyB0aGUgX2Jhc2UgcHJvcGVydHkuXG4gIGlmICghY2hpbGQuX2Jhc2UpIHtcbiAgICBpZiAoY2hpbGQuZXh0ZW5kcykge1xuICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQuZXh0ZW5kcywgdm0pO1xuICAgIH1cbiAgICBpZiAoY2hpbGQubWl4aW5zKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkLm1peGlucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQubWl4aW5zW2ldLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIG9wdGlvbnMgPSB7fTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gcGFyZW50KSB7XG4gICAgbWVyZ2VGaWVsZChrZXkpO1xuICB9XG4gIGZvciAoa2V5IGluIGNoaWxkKSB7XG4gICAgaWYgKCFoYXNPd24ocGFyZW50LCBrZXkpKSB7XG4gICAgICBtZXJnZUZpZWxkKGtleSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1lcmdlRmllbGQgKGtleSkge1xuICAgIHZhciBzdHJhdCA9IHN0cmF0c1trZXldIHx8IGRlZmF1bHRTdHJhdDtcbiAgICBvcHRpb25zW2tleV0gPSBzdHJhdChwYXJlbnRba2V5XSwgY2hpbGRba2V5XSwgdm0sIGtleSk7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnNcbn1cblxuLyoqXG4gKiBSZXNvbHZlIGFuIGFzc2V0LlxuICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGJlY2F1c2UgY2hpbGQgaW5zdGFuY2VzIG5lZWQgYWNjZXNzXG4gKiB0byBhc3NldHMgZGVmaW5lZCBpbiBpdHMgYW5jZXN0b3IgY2hhaW4uXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVBc3NldCAoXG4gIG9wdGlvbnMsXG4gIHR5cGUsXG4gIGlkLFxuICB3YXJuTWlzc2luZ1xuKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodHlwZW9mIGlkICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBhc3NldHMgPSBvcHRpb25zW3R5cGVdO1xuICAvLyBjaGVjayBsb2NhbCByZWdpc3RyYXRpb24gdmFyaWF0aW9ucyBmaXJzdFxuICBpZiAoaGFzT3duKGFzc2V0cywgaWQpKSB7IHJldHVybiBhc3NldHNbaWRdIH1cbiAgdmFyIGNhbWVsaXplZElkID0gY2FtZWxpemUoaWQpO1xuICBpZiAoaGFzT3duKGFzc2V0cywgY2FtZWxpemVkSWQpKSB7IHJldHVybiBhc3NldHNbY2FtZWxpemVkSWRdIH1cbiAgdmFyIFBhc2NhbENhc2VJZCA9IGNhcGl0YWxpemUoY2FtZWxpemVkSWQpO1xuICBpZiAoaGFzT3duKGFzc2V0cywgUGFzY2FsQ2FzZUlkKSkgeyByZXR1cm4gYXNzZXRzW1Bhc2NhbENhc2VJZF0gfVxuICAvLyBmYWxsYmFjayB0byBwcm90b3R5cGUgY2hhaW5cbiAgdmFyIHJlcyA9IGFzc2V0c1tpZF0gfHwgYXNzZXRzW2NhbWVsaXplZElkXSB8fCBhc3NldHNbUGFzY2FsQ2FzZUlkXTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2Fybk1pc3NpbmcgJiYgIXJlcykge1xuICAgIHdhcm4oXG4gICAgICAnRmFpbGVkIHRvIHJlc29sdmUgJyArIHR5cGUuc2xpY2UoMCwgLTEpICsgJzogJyArIGlkLFxuICAgICAgb3B0aW9uc1xuICAgICk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuXG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcCAoXG4gIGtleSxcbiAgcHJvcE9wdGlvbnMsXG4gIHByb3BzRGF0YSxcbiAgdm1cbikge1xuICB2YXIgcHJvcCA9IHByb3BPcHRpb25zW2tleV07XG4gIHZhciBhYnNlbnQgPSAhaGFzT3duKHByb3BzRGF0YSwga2V5KTtcbiAgdmFyIHZhbHVlID0gcHJvcHNEYXRhW2tleV07XG4gIC8vIGJvb2xlYW4gY2FzdGluZ1xuICB2YXIgYm9vbGVhbkluZGV4ID0gZ2V0VHlwZUluZGV4KEJvb2xlYW4sIHByb3AudHlwZSk7XG4gIGlmIChib29sZWFuSW5kZXggPiAtMSkge1xuICAgIGlmIChhYnNlbnQgJiYgIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgICB2YWx1ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBoeXBoZW5hdGUoa2V5KSkge1xuICAgICAgLy8gb25seSBjYXN0IGVtcHR5IHN0cmluZyAvIHNhbWUgbmFtZSB0byBib29sZWFuIGlmXG4gICAgICAvLyBib29sZWFuIGhhcyBoaWdoZXIgcHJpb3JpdHlcbiAgICAgIHZhciBzdHJpbmdJbmRleCA9IGdldFR5cGVJbmRleChTdHJpbmcsIHByb3AudHlwZSk7XG4gICAgICBpZiAoc3RyaW5nSW5kZXggPCAwIHx8IGJvb2xlYW5JbmRleCA8IHN0cmluZ0luZGV4KSB7XG4gICAgICAgIHZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gY2hlY2sgZGVmYXVsdCB2YWx1ZVxuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhbHVlID0gZ2V0UHJvcERlZmF1bHRWYWx1ZSh2bSwgcHJvcCwga2V5KTtcbiAgICAvLyBzaW5jZSB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBhIGZyZXNoIGNvcHksXG4gICAgLy8gbWFrZSBzdXJlIHRvIG9ic2VydmUgaXQuXG4gICAgdmFyIHByZXZTaG91bGRPYnNlcnZlID0gc2hvdWxkT2JzZXJ2ZTtcbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gICAgb2JzZXJ2ZSh2YWx1ZSk7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHByZXZTaG91bGRPYnNlcnZlKTtcbiAgfVxuICBpZiAoXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIC8vIHNraXAgdmFsaWRhdGlvbiBmb3Igd2VleCByZWN5Y2xlLWxpc3QgY2hpbGQgY29tcG9uZW50IHByb3BzXG4gICAgIShmYWxzZSlcbiAgKSB7XG4gICAgYXNzZXJ0UHJvcChwcm9wLCBrZXksIHZhbHVlLCB2bSwgYWJzZW50KTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGRlZmF1bHQgdmFsdWUgb2YgYSBwcm9wLlxuICovXG5mdW5jdGlvbiBnZXRQcm9wRGVmYXVsdFZhbHVlICh2bSwgcHJvcCwga2V5KSB7XG4gIC8vIG5vIGRlZmF1bHQsIHJldHVybiB1bmRlZmluZWRcbiAgaWYgKCFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuICB2YXIgZGVmID0gcHJvcC5kZWZhdWx0O1xuICAvLyB3YXJuIGFnYWluc3Qgbm9uLWZhY3RvcnkgZGVmYXVsdHMgZm9yIE9iamVjdCAmIEFycmF5XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzT2JqZWN0KGRlZikpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ludmFsaWQgZGVmYXVsdCB2YWx1ZSBmb3IgcHJvcCBcIicgKyBrZXkgKyAnXCI6ICcgK1xuICAgICAgJ1Byb3BzIHdpdGggdHlwZSBPYmplY3QvQXJyYXkgbXVzdCB1c2UgYSBmYWN0b3J5IGZ1bmN0aW9uICcgK1xuICAgICAgJ3RvIHJldHVybiB0aGUgZGVmYXVsdCB2YWx1ZS4nLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIC8vIHRoZSByYXcgcHJvcCB2YWx1ZSB3YXMgYWxzbyB1bmRlZmluZWQgZnJvbSBwcmV2aW91cyByZW5kZXIsXG4gIC8vIHJldHVybiBwcmV2aW91cyBkZWZhdWx0IHZhbHVlIHRvIGF2b2lkIHVubmVjZXNzYXJ5IHdhdGNoZXIgdHJpZ2dlclxuICBpZiAodm0gJiYgdm0uJG9wdGlvbnMucHJvcHNEYXRhICYmXG4gICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhW2tleV0gPT09IHVuZGVmaW5lZCAmJlxuICAgIHZtLl9wcm9wc1trZXldICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgcmV0dXJuIHZtLl9wcm9wc1trZXldXG4gIH1cbiAgLy8gY2FsbCBmYWN0b3J5IGZ1bmN0aW9uIGZvciBub24tRnVuY3Rpb24gdHlwZXNcbiAgLy8gYSB2YWx1ZSBpcyBGdW5jdGlvbiBpZiBpdHMgcHJvdG90eXBlIGlzIGZ1bmN0aW9uIGV2ZW4gYWNyb3NzIGRpZmZlcmVudCBleGVjdXRpb24gY29udGV4dFxuICByZXR1cm4gdHlwZW9mIGRlZiA9PT0gJ2Z1bmN0aW9uJyAmJiBnZXRUeXBlKHByb3AudHlwZSkgIT09ICdGdW5jdGlvbidcbiAgICA/IGRlZi5jYWxsKHZtKVxuICAgIDogZGVmXG59XG5cbi8qKlxuICogQXNzZXJ0IHdoZXRoZXIgYSBwcm9wIGlzIHZhbGlkLlxuICovXG5mdW5jdGlvbiBhc3NlcnRQcm9wIChcbiAgcHJvcCxcbiAgbmFtZSxcbiAgdmFsdWUsXG4gIHZtLFxuICBhYnNlbnRcbikge1xuICBpZiAocHJvcC5yZXF1aXJlZCAmJiBhYnNlbnQpIHtcbiAgICB3YXJuKFxuICAgICAgJ01pc3NpbmcgcmVxdWlyZWQgcHJvcDogXCInICsgbmFtZSArICdcIicsXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgJiYgIXByb3AucmVxdWlyZWQpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgdHlwZSA9IHByb3AudHlwZTtcbiAgdmFyIHZhbGlkID0gIXR5cGUgfHwgdHlwZSA9PT0gdHJ1ZTtcbiAgdmFyIGV4cGVjdGVkVHlwZXMgPSBbXTtcbiAgaWYgKHR5cGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodHlwZSkpIHtcbiAgICAgIHR5cGUgPSBbdHlwZV07XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZS5sZW5ndGggJiYgIXZhbGlkOyBpKyspIHtcbiAgICAgIHZhciBhc3NlcnRlZFR5cGUgPSBhc3NlcnRUeXBlKHZhbHVlLCB0eXBlW2ldKTtcbiAgICAgIGV4cGVjdGVkVHlwZXMucHVzaChhc3NlcnRlZFR5cGUuZXhwZWN0ZWRUeXBlIHx8ICcnKTtcbiAgICAgIHZhbGlkID0gYXNzZXJ0ZWRUeXBlLnZhbGlkO1xuICAgIH1cbiAgfVxuXG4gIGlmICghdmFsaWQpIHtcbiAgICB3YXJuKFxuICAgICAgZ2V0SW52YWxpZFR5cGVNZXNzYWdlKG5hbWUsIHZhbHVlLCBleHBlY3RlZFR5cGVzKSxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgdmFsaWRhdG9yID0gcHJvcC52YWxpZGF0b3I7XG4gIGlmICh2YWxpZGF0b3IpIHtcbiAgICBpZiAoIXZhbGlkYXRvcih2YWx1ZSkpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdJbnZhbGlkIHByb3A6IGN1c3RvbSB2YWxpZGF0b3IgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFwiJyArIG5hbWUgKyAnXCIuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbnZhciBzaW1wbGVDaGVja1JFID0gL14oU3RyaW5nfE51bWJlcnxCb29sZWFufEZ1bmN0aW9ufFN5bWJvbCkkLztcblxuZnVuY3Rpb24gYXNzZXJ0VHlwZSAodmFsdWUsIHR5cGUpIHtcbiAgdmFyIHZhbGlkO1xuICB2YXIgZXhwZWN0ZWRUeXBlID0gZ2V0VHlwZSh0eXBlKTtcbiAgaWYgKHNpbXBsZUNoZWNrUkUudGVzdChleHBlY3RlZFR5cGUpKSB7XG4gICAgdmFyIHQgPSB0eXBlb2YgdmFsdWU7XG4gICAgdmFsaWQgPSB0ID09PSBleHBlY3RlZFR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICAvLyBmb3IgcHJpbWl0aXZlIHdyYXBwZXIgb2JqZWN0c1xuICAgIGlmICghdmFsaWQgJiYgdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiB0eXBlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdPYmplY3QnKSB7XG4gICAgdmFsaWQgPSBpc1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdBcnJheScpIHtcbiAgICB2YWxpZCA9IEFycmF5LmlzQXJyYXkodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiB0eXBlO1xuICB9XG4gIHJldHVybiB7XG4gICAgdmFsaWQ6IHZhbGlkLFxuICAgIGV4cGVjdGVkVHlwZTogZXhwZWN0ZWRUeXBlXG4gIH1cbn1cblxuLyoqXG4gKiBVc2UgZnVuY3Rpb24gc3RyaW5nIG5hbWUgdG8gY2hlY2sgYnVpbHQtaW4gdHlwZXMsXG4gKiBiZWNhdXNlIGEgc2ltcGxlIGVxdWFsaXR5IGNoZWNrIHdpbGwgZmFpbCB3aGVuIHJ1bm5pbmdcbiAqIGFjcm9zcyBkaWZmZXJlbnQgdm1zIC8gaWZyYW1lcy5cbiAqL1xuZnVuY3Rpb24gZ2V0VHlwZSAoZm4pIHtcbiAgdmFyIG1hdGNoID0gZm4gJiYgZm4udG9TdHJpbmcoKS5tYXRjaCgvXlxccypmdW5jdGlvbiAoXFx3KykvKTtcbiAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0gOiAnJ1xufVxuXG5mdW5jdGlvbiBpc1NhbWVUeXBlIChhLCBiKSB7XG4gIHJldHVybiBnZXRUeXBlKGEpID09PSBnZXRUeXBlKGIpXG59XG5cbmZ1bmN0aW9uIGdldFR5cGVJbmRleCAodHlwZSwgZXhwZWN0ZWRUeXBlcykge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoZXhwZWN0ZWRUeXBlcykpIHtcbiAgICByZXR1cm4gaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzLCB0eXBlKSA/IDAgOiAtMVxuICB9XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBleHBlY3RlZFR5cGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGlzU2FtZVR5cGUoZXhwZWN0ZWRUeXBlc1tpXSwgdHlwZSkpIHtcbiAgICAgIHJldHVybiBpXG4gICAgfVxuICB9XG4gIHJldHVybiAtMVxufVxuXG5mdW5jdGlvbiBnZXRJbnZhbGlkVHlwZU1lc3NhZ2UgKG5hbWUsIHZhbHVlLCBleHBlY3RlZFR5cGVzKSB7XG4gIHZhciBtZXNzYWdlID0gXCJJbnZhbGlkIHByb3A6IHR5cGUgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIuXCIgK1xuICAgIFwiIEV4cGVjdGVkIFwiICsgKGV4cGVjdGVkVHlwZXMubWFwKGNhcGl0YWxpemUpLmpvaW4oJywgJykpO1xuICB2YXIgZXhwZWN0ZWRUeXBlID0gZXhwZWN0ZWRUeXBlc1swXTtcbiAgdmFyIHJlY2VpdmVkVHlwZSA9IHRvUmF3VHlwZSh2YWx1ZSk7XG4gIHZhciBleHBlY3RlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgZXhwZWN0ZWRUeXBlKTtcbiAgdmFyIHJlY2VpdmVkVmFsdWUgPSBzdHlsZVZhbHVlKHZhbHVlLCByZWNlaXZlZFR5cGUpO1xuICAvLyBjaGVjayBpZiB3ZSBuZWVkIHRvIHNwZWNpZnkgZXhwZWN0ZWQgdmFsdWVcbiAgaWYgKGV4cGVjdGVkVHlwZXMubGVuZ3RoID09PSAxICYmXG4gICAgICBpc0V4cGxpY2FibGUoZXhwZWN0ZWRUeXBlKSAmJlxuICAgICAgIWlzQm9vbGVhbihleHBlY3RlZFR5cGUsIHJlY2VpdmVkVHlwZSkpIHtcbiAgICBtZXNzYWdlICs9IFwiIHdpdGggdmFsdWUgXCIgKyBleHBlY3RlZFZhbHVlO1xuICB9XG4gIG1lc3NhZ2UgKz0gXCIsIGdvdCBcIiArIHJlY2VpdmVkVHlwZSArIFwiIFwiO1xuICAvLyBjaGVjayBpZiB3ZSBuZWVkIHRvIHNwZWNpZnkgcmVjZWl2ZWQgdmFsdWVcbiAgaWYgKGlzRXhwbGljYWJsZShyZWNlaXZlZFR5cGUpKSB7XG4gICAgbWVzc2FnZSArPSBcIndpdGggdmFsdWUgXCIgKyByZWNlaXZlZFZhbHVlICsgXCIuXCI7XG4gIH1cbiAgcmV0dXJuIG1lc3NhZ2Vcbn1cblxuZnVuY3Rpb24gc3R5bGVWYWx1ZSAodmFsdWUsIHR5cGUpIHtcbiAgaWYgKHR5cGUgPT09ICdTdHJpbmcnKSB7XG4gICAgcmV0dXJuIChcIlxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ051bWJlcicpIHtcbiAgICByZXR1cm4gKFwiXCIgKyAoTnVtYmVyKHZhbHVlKSkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChcIlwiICsgdmFsdWUpXG4gIH1cbn1cblxuZnVuY3Rpb24gaXNFeHBsaWNhYmxlICh2YWx1ZSkge1xuICB2YXIgZXhwbGljaXRUeXBlcyA9IFsnc3RyaW5nJywgJ251bWJlcicsICdib29sZWFuJ107XG4gIHJldHVybiBleHBsaWNpdFR5cGVzLnNvbWUoZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09IGVsZW07IH0pXG59XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbiAoKSB7XG4gIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgcmV0dXJuIGFyZ3Muc29tZShmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gZWxlbS50b0xvd2VyQ2FzZSgpID09PSAnYm9vbGVhbic7IH0pXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBoYW5kbGVFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICAvLyBEZWFjdGl2YXRlIGRlcHMgdHJhY2tpbmcgd2hpbGUgcHJvY2Vzc2luZyBlcnJvciBoYW5kbGVyIHRvIGF2b2lkIHBvc3NpYmxlIGluZmluaXRlIHJlbmRlcmluZy5cbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVleC9pc3N1ZXMvMTUwNVxuICBwdXNoVGFyZ2V0KCk7XG4gIHRyeSB7XG4gICAgaWYgKHZtKSB7XG4gICAgICB2YXIgY3VyID0gdm07XG4gICAgICB3aGlsZSAoKGN1ciA9IGN1ci4kcGFyZW50KSkge1xuICAgICAgICB2YXIgaG9va3MgPSBjdXIuJG9wdGlvbnMuZXJyb3JDYXB0dXJlZDtcbiAgICAgICAgaWYgKGhvb2tzKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgdmFyIGNhcHR1cmUgPSBob29rc1tpXS5jYWxsKGN1ciwgZXJyLCB2bSwgaW5mbykgPT09IGZhbHNlO1xuICAgICAgICAgICAgICBpZiAoY2FwdHVyZSkgeyByZXR1cm4gfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBnbG9iYWxIYW5kbGVFcnJvcihlLCBjdXIsICdlcnJvckNhcHR1cmVkIGhvb2snKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZ2xvYmFsSGFuZGxlRXJyb3IoZXJyLCB2bSwgaW5mbyk7XG4gIH0gZmluYWxseSB7XG4gICAgcG9wVGFyZ2V0KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlV2l0aEVycm9ySGFuZGxpbmcgKFxuICBoYW5kbGVyLFxuICBjb250ZXh0LFxuICBhcmdzLFxuICB2bSxcbiAgaW5mb1xuKSB7XG4gIHZhciByZXM7XG4gIHRyeSB7XG4gICAgcmVzID0gYXJncyA/IGhhbmRsZXIuYXBwbHkoY29udGV4dCwgYXJncykgOiBoYW5kbGVyLmNhbGwoY29udGV4dCk7XG4gICAgaWYgKHJlcyAmJiAhcmVzLl9pc1Z1ZSAmJiBpc1Byb21pc2UocmVzKSAmJiAhcmVzLl9oYW5kbGVkKSB7XG4gICAgICByZXMuY2F0Y2goZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGhhbmRsZUVycm9yKGUsIHZtLCBpbmZvICsgXCIgKFByb21pc2UvYXN5bmMpXCIpOyB9KTtcbiAgICAgIC8vIGlzc3VlICM5NTExXG4gICAgICAvLyBhdm9pZCBjYXRjaCB0cmlnZ2VyaW5nIG11bHRpcGxlIHRpbWVzIHdoZW4gbmVzdGVkIGNhbGxzXG4gICAgICByZXMuX2hhbmRsZWQgPSB0cnVlO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGhhbmRsZUVycm9yKGUsIHZtLCBpbmZvKTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdsb2JhbEhhbmRsZUVycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIGlmIChjb25maWcuZXJyb3JIYW5kbGVyKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBjb25maWcuZXJyb3JIYW5kbGVyLmNhbGwobnVsbCwgZXJyLCB2bSwgaW5mbylcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBpZiB0aGUgdXNlciBpbnRlbnRpb25hbGx5IHRocm93cyB0aGUgb3JpZ2luYWwgZXJyb3IgaW4gdGhlIGhhbmRsZXIsXG4gICAgICAvLyBkbyBub3QgbG9nIGl0IHR3aWNlXG4gICAgICBpZiAoZSAhPT0gZXJyKSB7XG4gICAgICAgIGxvZ0Vycm9yKGUsIG51bGwsICdjb25maWcuZXJyb3JIYW5kbGVyJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGxvZ0Vycm9yKGVyciwgdm0sIGluZm8pO1xufVxuXG5mdW5jdGlvbiBsb2dFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oKFwiRXJyb3IgaW4gXCIgKyBpbmZvICsgXCI6IFxcXCJcIiArIChlcnIudG9TdHJpbmcoKSkgKyBcIlxcXCJcIiksIHZtKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoKGluQnJvd3NlciB8fCBpbldlZXgpICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBlcnJcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIGlzVXNpbmdNaWNyb1Rhc2sgPSBmYWxzZTtcblxudmFyIGNhbGxiYWNrcyA9IFtdO1xudmFyIHBlbmRpbmcgPSBmYWxzZTtcblxuZnVuY3Rpb24gZmx1c2hDYWxsYmFja3MgKCkge1xuICBwZW5kaW5nID0gZmFsc2U7XG4gIHZhciBjb3BpZXMgPSBjYWxsYmFja3Muc2xpY2UoMCk7XG4gIGNhbGxiYWNrcy5sZW5ndGggPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvcGllcy5sZW5ndGg7IGkrKykge1xuICAgIGNvcGllc1tpXSgpO1xuICB9XG59XG5cbi8vIEhlcmUgd2UgaGF2ZSBhc3luYyBkZWZlcnJpbmcgd3JhcHBlcnMgdXNpbmcgbWljcm90YXNrcy5cbi8vIEluIDIuNSB3ZSB1c2VkIChtYWNybykgdGFza3MgKGluIGNvbWJpbmF0aW9uIHdpdGggbWljcm90YXNrcykuXG4vLyBIb3dldmVyLCBpdCBoYXMgc3VidGxlIHByb2JsZW1zIHdoZW4gc3RhdGUgaXMgY2hhbmdlZCByaWdodCBiZWZvcmUgcmVwYWludFxuLy8gKGUuZy4gIzY4MTMsIG91dC1pbiB0cmFuc2l0aW9ucykuXG4vLyBBbHNvLCB1c2luZyAobWFjcm8pIHRhc2tzIGluIGV2ZW50IGhhbmRsZXIgd291bGQgY2F1c2Ugc29tZSB3ZWlyZCBiZWhhdmlvcnNcbi8vIHRoYXQgY2Fubm90IGJlIGNpcmN1bXZlbnRlZCAoZS5nLiAjNzEwOSwgIzcxNTMsICM3NTQ2LCAjNzgzNCwgIzgxMDkpLlxuLy8gU28gd2Ugbm93IHVzZSBtaWNyb3Rhc2tzIGV2ZXJ5d2hlcmUsIGFnYWluLlxuLy8gQSBtYWpvciBkcmF3YmFjayBvZiB0aGlzIHRyYWRlb2ZmIGlzIHRoYXQgdGhlcmUgYXJlIHNvbWUgc2NlbmFyaW9zXG4vLyB3aGVyZSBtaWNyb3Rhc2tzIGhhdmUgdG9vIGhpZ2ggYSBwcmlvcml0eSBhbmQgZmlyZSBpbiBiZXR3ZWVuIHN1cHBvc2VkbHlcbi8vIHNlcXVlbnRpYWwgZXZlbnRzIChlLmcuICM0NTIxLCAjNjY5MCwgd2hpY2ggaGF2ZSB3b3JrYXJvdW5kcylcbi8vIG9yIGV2ZW4gYmV0d2VlbiBidWJibGluZyBvZiB0aGUgc2FtZSBldmVudCAoIzY1NjYpLlxudmFyIHRpbWVyRnVuYztcblxuLy8gVGhlIG5leHRUaWNrIGJlaGF2aW9yIGxldmVyYWdlcyB0aGUgbWljcm90YXNrIHF1ZXVlLCB3aGljaCBjYW4gYmUgYWNjZXNzZWRcbi8vIHZpYSBlaXRoZXIgbmF0aXZlIFByb21pc2UudGhlbiBvciBNdXRhdGlvbk9ic2VydmVyLlxuLy8gTXV0YXRpb25PYnNlcnZlciBoYXMgd2lkZXIgc3VwcG9ydCwgaG93ZXZlciBpdCBpcyBzZXJpb3VzbHkgYnVnZ2VkIGluXG4vLyBVSVdlYlZpZXcgaW4gaU9TID49IDkuMy4zIHdoZW4gdHJpZ2dlcmVkIGluIHRvdWNoIGV2ZW50IGhhbmRsZXJzLiBJdFxuLy8gY29tcGxldGVseSBzdG9wcyB3b3JraW5nIGFmdGVyIHRyaWdnZXJpbmcgYSBmZXcgdGltZXMuLi4gc28sIGlmIG5hdGl2ZVxuLy8gUHJvbWlzZSBpcyBhdmFpbGFibGUsIHdlIHdpbGwgdXNlIGl0OlxuLyogaXN0YW5idWwgaWdub3JlIG5leHQsICRmbG93LWRpc2FibGUtbGluZSAqL1xuaWYgKHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm9taXNlKSkge1xuICB2YXIgcCA9IFByb21pc2UucmVzb2x2ZSgpO1xuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcC50aGVuKGZsdXNoQ2FsbGJhY2tzKTtcbiAgICAvLyBJbiBwcm9ibGVtYXRpYyBVSVdlYlZpZXdzLCBQcm9taXNlLnRoZW4gZG9lc24ndCBjb21wbGV0ZWx5IGJyZWFrLCBidXRcbiAgICAvLyBpdCBjYW4gZ2V0IHN0dWNrIGluIGEgd2VpcmQgc3RhdGUgd2hlcmUgY2FsbGJhY2tzIGFyZSBwdXNoZWQgaW50byB0aGVcbiAgICAvLyBtaWNyb3Rhc2sgcXVldWUgYnV0IHRoZSBxdWV1ZSBpc24ndCBiZWluZyBmbHVzaGVkLCB1bnRpbCB0aGUgYnJvd3NlclxuICAgIC8vIG5lZWRzIHRvIGRvIHNvbWUgb3RoZXIgd29yaywgZS5nLiBoYW5kbGUgYSB0aW1lci4gVGhlcmVmb3JlIHdlIGNhblxuICAgIC8vIFwiZm9yY2VcIiB0aGUgbWljcm90YXNrIHF1ZXVlIHRvIGJlIGZsdXNoZWQgYnkgYWRkaW5nIGFuIGVtcHR5IHRpbWVyLlxuICAgIGlmIChpc0lPUykgeyBzZXRUaW1lb3V0KG5vb3ApOyB9XG4gIH07XG4gIGlzVXNpbmdNaWNyb1Rhc2sgPSB0cnVlO1xufSBlbHNlIGlmICghaXNJRSAmJiB0eXBlb2YgTXV0YXRpb25PYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgKFxuICBpc05hdGl2ZShNdXRhdGlvbk9ic2VydmVyKSB8fFxuICAvLyBQaGFudG9tSlMgYW5kIGlPUyA3LnhcbiAgTXV0YXRpb25PYnNlcnZlci50b1N0cmluZygpID09PSAnW29iamVjdCBNdXRhdGlvbk9ic2VydmVyQ29uc3RydWN0b3JdJ1xuKSkge1xuICAvLyBVc2UgTXV0YXRpb25PYnNlcnZlciB3aGVyZSBuYXRpdmUgUHJvbWlzZSBpcyBub3QgYXZhaWxhYmxlLFxuICAvLyBlLmcuIFBoYW50b21KUywgaU9TNywgQW5kcm9pZCA0LjRcbiAgLy8gKCM2NDY2IE11dGF0aW9uT2JzZXJ2ZXIgaXMgdW5yZWxpYWJsZSBpbiBJRTExKVxuICB2YXIgY291bnRlciA9IDE7XG4gIHZhciBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZsdXNoQ2FsbGJhY2tzKTtcbiAgdmFyIHRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKGNvdW50ZXIpKTtcbiAgb2JzZXJ2ZXIub2JzZXJ2ZSh0ZXh0Tm9kZSwge1xuICAgIGNoYXJhY3RlckRhdGE6IHRydWVcbiAgfSk7XG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb3VudGVyID0gKGNvdW50ZXIgKyAxKSAlIDI7XG4gICAgdGV4dE5vZGUuZGF0YSA9IFN0cmluZyhjb3VudGVyKTtcbiAgfTtcbiAgaXNVc2luZ01pY3JvVGFzayA9IHRydWU7XG59IGVsc2UgaWYgKHR5cGVvZiBzZXRJbW1lZGlhdGUgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKHNldEltbWVkaWF0ZSkpIHtcbiAgLy8gRmFsbGJhY2sgdG8gc2V0SW1tZWRpYXRlLlxuICAvLyBUZWNobmljYWxseSBpdCBsZXZlcmFnZXMgdGhlIChtYWNybykgdGFzayBxdWV1ZSxcbiAgLy8gYnV0IGl0IGlzIHN0aWxsIGEgYmV0dGVyIGNob2ljZSB0aGFuIHNldFRpbWVvdXQuXG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRJbW1lZGlhdGUoZmx1c2hDYWxsYmFja3MpO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gRmFsbGJhY2sgdG8gc2V0VGltZW91dC5cbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHNldFRpbWVvdXQoZmx1c2hDYWxsYmFja3MsIDApO1xuICB9O1xufVxuXG5mdW5jdGlvbiBuZXh0VGljayAoY2IsIGN0eCkge1xuICB2YXIgX3Jlc29sdmU7XG4gIGNhbGxiYWNrcy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY2IpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNiLmNhbGwoY3R4KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaGFuZGxlRXJyb3IoZSwgY3R4LCAnbmV4dFRpY2snKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKF9yZXNvbHZlKSB7XG4gICAgICBfcmVzb2x2ZShjdHgpO1xuICAgIH1cbiAgfSk7XG4gIGlmICghcGVuZGluZykge1xuICAgIHBlbmRpbmcgPSB0cnVlO1xuICAgIHRpbWVyRnVuYygpO1xuICB9XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBpZiAoIWNiICYmIHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgIH0pXG4gIH1cbn1cblxuLyogICovXG5cbi8qIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aCBQcm94eSAqL1xuXG52YXIgaW5pdFByb3h5O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgYWxsb3dlZEdsb2JhbHMgPSBtYWtlTWFwKFxuICAgICdJbmZpbml0eSx1bmRlZmluZWQsTmFOLGlzRmluaXRlLGlzTmFOLCcgK1xuICAgICdwYXJzZUZsb2F0LHBhcnNlSW50LGRlY29kZVVSSSxkZWNvZGVVUklDb21wb25lbnQsZW5jb2RlVVJJLGVuY29kZVVSSUNvbXBvbmVudCwnICtcbiAgICAnTWF0aCxOdW1iZXIsRGF0ZSxBcnJheSxPYmplY3QsQm9vbGVhbixTdHJpbmcsUmVnRXhwLE1hcCxTZXQsSlNPTixJbnRsLCcgK1xuICAgICdyZXF1aXJlJyAvLyBmb3IgV2VicGFjay9Ccm93c2VyaWZ5XG4gICk7XG5cbiAgdmFyIHdhcm5Ob25QcmVzZW50ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgd2FybihcbiAgICAgIFwiUHJvcGVydHkgb3IgbWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBub3QgZGVmaW5lZCBvbiB0aGUgaW5zdGFuY2UgYnV0IFwiICtcbiAgICAgICdyZWZlcmVuY2VkIGR1cmluZyByZW5kZXIuIE1ha2Ugc3VyZSB0aGF0IHRoaXMgcHJvcGVydHkgaXMgcmVhY3RpdmUsICcgK1xuICAgICAgJ2VpdGhlciBpbiB0aGUgZGF0YSBvcHRpb24sIG9yIGZvciBjbGFzcy1iYXNlZCBjb21wb25lbnRzLCBieSAnICtcbiAgICAgICdpbml0aWFsaXppbmcgdGhlIHByb3BlcnR5LiAnICtcbiAgICAgICdTZWU6IGh0dHBzOi8vdnVlanMub3JnL3YyL2d1aWRlL3JlYWN0aXZpdHkuaHRtbCNEZWNsYXJpbmctUmVhY3RpdmUtUHJvcGVydGllcy4nLFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuICB2YXIgd2FyblJlc2VydmVkUHJlZml4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgd2FybihcbiAgICAgIFwiUHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIG11c3QgYmUgYWNjZXNzZWQgd2l0aCBcXFwiJGRhdGEuXCIgKyBrZXkgKyBcIlxcXCIgYmVjYXVzZSBcIiArXG4gICAgICAncHJvcGVydGllcyBzdGFydGluZyB3aXRoIFwiJFwiIG9yIFwiX1wiIGFyZSBub3QgcHJveGllZCBpbiB0aGUgVnVlIGluc3RhbmNlIHRvICcgK1xuICAgICAgJ3ByZXZlbnQgY29uZmxpY3RzIHdpdGggVnVlIGludGVybmFscy4gJyArXG4gICAgICAnU2VlOiBodHRwczovL3Z1ZWpzLm9yZy92Mi9hcGkvI2RhdGEnLFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuICB2YXIgaGFzUHJveHkgPVxuICAgIHR5cGVvZiBQcm94eSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJveHkpO1xuXG4gIGlmIChoYXNQcm94eSkge1xuICAgIHZhciBpc0J1aWx0SW5Nb2RpZmllciA9IG1ha2VNYXAoJ3N0b3AscHJldmVudCxzZWxmLGN0cmwsc2hpZnQsYWx0LG1ldGEsZXhhY3QnKTtcbiAgICBjb25maWcua2V5Q29kZXMgPSBuZXcgUHJveHkoY29uZmlnLmtleUNvZGVzLCB7XG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0J1aWx0SW5Nb2RpZmllcihrZXkpKSB7XG4gICAgICAgICAgd2FybigoXCJBdm9pZCBvdmVyd3JpdGluZyBidWlsdC1pbiBtb2RpZmllciBpbiBjb25maWcua2V5Q29kZXM6IC5cIiArIGtleSkpO1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGhhc0hhbmRsZXIgPSB7XG4gICAgaGFzOiBmdW5jdGlvbiBoYXMgKHRhcmdldCwga2V5KSB7XG4gICAgICB2YXIgaGFzID0ga2V5IGluIHRhcmdldDtcbiAgICAgIHZhciBpc0FsbG93ZWQgPSBhbGxvd2VkR2xvYmFscyhrZXkpIHx8XG4gICAgICAgICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkuY2hhckF0KDApID09PSAnXycgJiYgIShrZXkgaW4gdGFyZ2V0LiRkYXRhKSk7XG4gICAgICBpZiAoIWhhcyAmJiAhaXNBbGxvd2VkKSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB7IHdhcm5SZXNlcnZlZFByZWZpeCh0YXJnZXQsIGtleSk7IH1cbiAgICAgICAgZWxzZSB7IHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGhhcyB8fCAhaXNBbGxvd2VkXG4gICAgfVxuICB9O1xuXG4gIHZhciBnZXRIYW5kbGVyID0ge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0ICh0YXJnZXQsIGtleSkge1xuICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmICEoa2V5IGluIHRhcmdldCkpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0YXJnZXQuJGRhdGEpIHsgd2FyblJlc2VydmVkUHJlZml4KHRhcmdldCwga2V5KTsgfVxuICAgICAgICBlbHNlIHsgd2Fybk5vblByZXNlbnQodGFyZ2V0LCBrZXkpOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0W2tleV1cbiAgICB9XG4gIH07XG5cbiAgaW5pdFByb3h5ID0gZnVuY3Rpb24gaW5pdFByb3h5ICh2bSkge1xuICAgIGlmIChoYXNQcm94eSkge1xuICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3h5IGhhbmRsZXIgdG8gdXNlXG4gICAgICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICAgICAgdmFyIGhhbmRsZXJzID0gb3B0aW9ucy5yZW5kZXIgJiYgb3B0aW9ucy5yZW5kZXIuX3dpdGhTdHJpcHBlZFxuICAgICAgICA/IGdldEhhbmRsZXJcbiAgICAgICAgOiBoYXNIYW5kbGVyO1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gbmV3IFByb3h5KHZtLCBoYW5kbGVycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBzZWVuT2JqZWN0cyA9IG5ldyBfU2V0KCk7XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgdHJhdmVyc2UgYW4gb2JqZWN0IHRvIGV2b2tlIGFsbCBjb252ZXJ0ZWRcbiAqIGdldHRlcnMsIHNvIHRoYXQgZXZlcnkgbmVzdGVkIHByb3BlcnR5IGluc2lkZSB0aGUgb2JqZWN0XG4gKiBpcyBjb2xsZWN0ZWQgYXMgYSBcImRlZXBcIiBkZXBlbmRlbmN5LlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZSAodmFsKSB7XG4gIF90cmF2ZXJzZSh2YWwsIHNlZW5PYmplY3RzKTtcbiAgc2Vlbk9iamVjdHMuY2xlYXIoKTtcbn1cblxuZnVuY3Rpb24gX3RyYXZlcnNlICh2YWwsIHNlZW4pIHtcbiAgdmFyIGksIGtleXM7XG4gIHZhciBpc0EgPSBBcnJheS5pc0FycmF5KHZhbCk7XG4gIGlmICgoIWlzQSAmJiAhaXNPYmplY3QodmFsKSkgfHwgT2JqZWN0LmlzRnJvemVuKHZhbCkgfHwgdmFsIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsLl9fb2JfXykge1xuICAgIHZhciBkZXBJZCA9IHZhbC5fX29iX18uZGVwLmlkO1xuICAgIGlmIChzZWVuLmhhcyhkZXBJZCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBzZWVuLmFkZChkZXBJZCk7XG4gIH1cbiAgaWYgKGlzQSkge1xuICAgIGkgPSB2YWwubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtpXSwgc2Vlbik7IH1cbiAgfSBlbHNlIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICBpID0ga2V5cy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2tleXNbaV1dLCBzZWVuKTsgfVxuICB9XG59XG5cbnZhciBtYXJrO1xudmFyIG1lYXN1cmU7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBwZXJmID0gaW5Ccm93c2VyICYmIHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChcbiAgICBwZXJmICYmXG4gICAgcGVyZi5tYXJrICYmXG4gICAgcGVyZi5tZWFzdXJlICYmXG4gICAgcGVyZi5jbGVhck1hcmtzICYmXG4gICAgcGVyZi5jbGVhck1lYXN1cmVzXG4gICkge1xuICAgIG1hcmsgPSBmdW5jdGlvbiAodGFnKSB7IHJldHVybiBwZXJmLm1hcmsodGFnKTsgfTtcbiAgICBtZWFzdXJlID0gZnVuY3Rpb24gKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpIHtcbiAgICAgIHBlcmYubWVhc3VyZShuYW1lLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhzdGFydFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3MoZW5kVGFnKTtcbiAgICAgIC8vIHBlcmYuY2xlYXJNZWFzdXJlcyhuYW1lKVxuICAgIH07XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBub3JtYWxpemVFdmVudCA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgcGFzc2l2ZSA9IG5hbWUuY2hhckF0KDApID09PSAnJic7XG4gIG5hbWUgPSBwYXNzaXZlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHZhciBvbmNlJCQxID0gbmFtZS5jaGFyQXQoMCkgPT09ICd+JzsgLy8gUHJlZml4ZWQgbGFzdCwgY2hlY2tlZCBmaXJzdFxuICBuYW1lID0gb25jZSQkMSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgY2FwdHVyZSA9IG5hbWUuY2hhckF0KDApID09PSAnISc7XG4gIG5hbWUgPSBjYXB0dXJlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBvbmNlOiBvbmNlJCQxLFxuICAgIGNhcHR1cmU6IGNhcHR1cmUsXG4gICAgcGFzc2l2ZTogcGFzc2l2ZVxuICB9XG59KTtcblxuZnVuY3Rpb24gY3JlYXRlRm5JbnZva2VyIChmbnMsIHZtKSB7XG4gIGZ1bmN0aW9uIGludm9rZXIgKCkge1xuICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblxuICAgIHZhciBmbnMgPSBpbnZva2VyLmZucztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmbnMpKSB7XG4gICAgICB2YXIgY2xvbmVkID0gZm5zLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsb25lZC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhjbG9uZWRbaV0sIG51bGwsIGFyZ3VtZW50cyQxLCB2bSwgXCJ2LW9uIGhhbmRsZXJcIik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHJldHVybiBoYW5kbGVyIHJldHVybiB2YWx1ZSBmb3Igc2luZ2xlIGhhbmRsZXJzXG4gICAgICByZXR1cm4gaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoZm5zLCBudWxsLCBhcmd1bWVudHMsIHZtLCBcInYtb24gaGFuZGxlclwiKVxuICAgIH1cbiAgfVxuICBpbnZva2VyLmZucyA9IGZucztcbiAgcmV0dXJuIGludm9rZXJcbn1cblxuZnVuY3Rpb24gdXBkYXRlTGlzdGVuZXJzIChcbiAgb24sXG4gIG9sZE9uLFxuICBhZGQsXG4gIHJlbW92ZSQkMSxcbiAgY3JlYXRlT25jZUhhbmRsZXIsXG4gIHZtXG4pIHtcbiAgdmFyIG5hbWUsIGRlZiQkMSwgY3VyLCBvbGQsIGV2ZW50O1xuICBmb3IgKG5hbWUgaW4gb24pIHtcbiAgICBkZWYkJDEgPSBjdXIgPSBvbltuYW1lXTtcbiAgICBvbGQgPSBvbGRPbltuYW1lXTtcbiAgICBldmVudCA9IG5vcm1hbGl6ZUV2ZW50KG5hbWUpO1xuICAgIGlmIChpc1VuZGVmKGN1cikpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJJbnZhbGlkIGhhbmRsZXIgZm9yIGV2ZW50IFxcXCJcIiArIChldmVudC5uYW1lKSArIFwiXFxcIjogZ290IFwiICsgU3RyaW5nKGN1ciksXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoaXNVbmRlZihvbGQpKSB7XG4gICAgICBpZiAoaXNVbmRlZihjdXIuZm5zKSkge1xuICAgICAgICBjdXIgPSBvbltuYW1lXSA9IGNyZWF0ZUZuSW52b2tlcihjdXIsIHZtKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1RydWUoZXZlbnQub25jZSkpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVPbmNlSGFuZGxlcihldmVudC5uYW1lLCBjdXIsIGV2ZW50LmNhcHR1cmUpO1xuICAgICAgfVxuICAgICAgYWRkKGV2ZW50Lm5hbWUsIGN1ciwgZXZlbnQuY2FwdHVyZSwgZXZlbnQucGFzc2l2ZSwgZXZlbnQucGFyYW1zKTtcbiAgICB9IGVsc2UgaWYgKGN1ciAhPT0gb2xkKSB7XG4gICAgICBvbGQuZm5zID0gY3VyO1xuICAgICAgb25bbmFtZV0gPSBvbGQ7XG4gICAgfVxuICB9XG4gIGZvciAobmFtZSBpbiBvbGRPbikge1xuICAgIGlmIChpc1VuZGVmKG9uW25hbWVdKSkge1xuICAgICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICAgIHJlbW92ZSQkMShldmVudC5uYW1lLCBvbGRPbltuYW1lXSwgZXZlbnQuY2FwdHVyZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBtZXJnZVZOb2RlSG9vayAoZGVmLCBob29rS2V5LCBob29rKSB7XG4gIGlmIChkZWYgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIGRlZiA9IGRlZi5kYXRhLmhvb2sgfHwgKGRlZi5kYXRhLmhvb2sgPSB7fSk7XG4gIH1cbiAgdmFyIGludm9rZXI7XG4gIHZhciBvbGRIb29rID0gZGVmW2hvb2tLZXldO1xuXG4gIGZ1bmN0aW9uIHdyYXBwZWRIb29rICgpIHtcbiAgICBob29rLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgLy8gaW1wb3J0YW50OiByZW1vdmUgbWVyZ2VkIGhvb2sgdG8gZW5zdXJlIGl0J3MgY2FsbGVkIG9ubHkgb25jZVxuICAgIC8vIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrXG4gICAgcmVtb3ZlKGludm9rZXIuZm5zLCB3cmFwcGVkSG9vayk7XG4gIH1cblxuICBpZiAoaXNVbmRlZihvbGRIb29rKSkge1xuICAgIC8vIG5vIGV4aXN0aW5nIGhvb2tcbiAgICBpbnZva2VyID0gY3JlYXRlRm5JbnZva2VyKFt3cmFwcGVkSG9va10pO1xuICB9IGVsc2Uge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpc0RlZihvbGRIb29rLmZucykgJiYgaXNUcnVlKG9sZEhvb2subWVyZ2VkKSkge1xuICAgICAgLy8gYWxyZWFkeSBhIG1lcmdlZCBpbnZva2VyXG4gICAgICBpbnZva2VyID0gb2xkSG9vaztcbiAgICAgIGludm9rZXIuZm5zLnB1c2god3JhcHBlZEhvb2spO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBleGlzdGluZyBwbGFpbiBob29rXG4gICAgICBpbnZva2VyID0gY3JlYXRlRm5JbnZva2VyKFtvbGRIb29rLCB3cmFwcGVkSG9va10pO1xuICAgIH1cbiAgfVxuXG4gIGludm9rZXIubWVyZ2VkID0gdHJ1ZTtcbiAgZGVmW2hvb2tLZXldID0gaW52b2tlcjtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEgKFxuICBkYXRhLFxuICBDdG9yLFxuICB0YWdcbikge1xuICAvLyB3ZSBhcmUgb25seSBleHRyYWN0aW5nIHJhdyB2YWx1ZXMgaGVyZS5cbiAgLy8gdmFsaWRhdGlvbiBhbmQgZGVmYXVsdCB2YWx1ZXMgYXJlIGhhbmRsZWQgaW4gdGhlIGNoaWxkXG4gIC8vIGNvbXBvbmVudCBpdHNlbGYuXG4gIHZhciBwcm9wT3B0aW9ucyA9IEN0b3Iub3B0aW9ucy5wcm9wcztcbiAgaWYgKGlzVW5kZWYocHJvcE9wdGlvbnMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgYXR0cnMgPSBkYXRhLmF0dHJzO1xuICB2YXIgcHJvcHMgPSBkYXRhLnByb3BzO1xuICBpZiAoaXNEZWYoYXR0cnMpIHx8IGlzRGVmKHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgdmFyIGFsdEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIGtleUluTG93ZXJDYXNlID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkgIT09IGtleUluTG93ZXJDYXNlICYmXG4gICAgICAgICAgYXR0cnMgJiYgaGFzT3duKGF0dHJzLCBrZXlJbkxvd2VyQ2FzZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGlwKFxuICAgICAgICAgICAgXCJQcm9wIFxcXCJcIiArIGtleUluTG93ZXJDYXNlICsgXCJcXFwiIGlzIHBhc3NlZCB0byBjb21wb25lbnQgXCIgK1xuICAgICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodGFnIHx8IEN0b3IpKSArIFwiLCBidXQgdGhlIGRlY2xhcmVkIHByb3AgbmFtZSBpc1wiICtcbiAgICAgICAgICAgIFwiIFxcXCJcIiArIGtleSArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgICAgXCJOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCBjYW1lbENhc2VkIFwiICtcbiAgICAgICAgICAgIFwicHJvcHMgbmVlZCB0byB1c2UgdGhlaXIga2ViYWItY2FzZSBlcXVpdmFsZW50cyB3aGVuIHVzaW5nIGluLURPTSBcIiArXG4gICAgICAgICAgICBcInRlbXBsYXRlcy4gWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXFxcIlwiICsgYWx0S2V5ICsgXCJcXFwiIGluc3RlYWQgb2YgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2hlY2tQcm9wKHJlcywgcHJvcHMsIGtleSwgYWx0S2V5LCB0cnVlKSB8fFxuICAgICAgY2hlY2tQcm9wKHJlcywgYXR0cnMsIGtleSwgYWx0S2V5LCBmYWxzZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gY2hlY2tQcm9wIChcbiAgcmVzLFxuICBoYXNoLFxuICBrZXksXG4gIGFsdEtleSxcbiAgcHJlc2VydmVcbikge1xuICBpZiAoaXNEZWYoaGFzaCkpIHtcbiAgICBpZiAoaGFzT3duKGhhc2gsIGtleSkpIHtcbiAgICAgIHJlc1trZXldID0gaGFzaFtrZXldO1xuICAgICAgaWYgKCFwcmVzZXJ2ZSkge1xuICAgICAgICBkZWxldGUgaGFzaFtrZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGVsc2UgaWYgKGhhc093bihoYXNoLCBhbHRLZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hbYWx0S2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hbYWx0S2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vKiAgKi9cblxuLy8gVGhlIHRlbXBsYXRlIGNvbXBpbGVyIGF0dGVtcHRzIHRvIG1pbmltaXplIHRoZSBuZWVkIGZvciBub3JtYWxpemF0aW9uIGJ5XG4vLyBzdGF0aWNhbGx5IGFuYWx5emluZyB0aGUgdGVtcGxhdGUgYXQgY29tcGlsZSB0aW1lLlxuLy9cbi8vIEZvciBwbGFpbiBIVE1MIG1hcmt1cCwgbm9ybWFsaXphdGlvbiBjYW4gYmUgY29tcGxldGVseSBza2lwcGVkIGJlY2F1c2UgdGhlXG4vLyBnZW5lcmF0ZWQgcmVuZGVyIGZ1bmN0aW9uIGlzIGd1YXJhbnRlZWQgdG8gcmV0dXJuIEFycmF5PFZOb2RlPi4gVGhlcmUgYXJlXG4vLyB0d28gY2FzZXMgd2hlcmUgZXh0cmEgbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQ6XG5cbi8vIDEuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbXBvbmVudHMgLSBiZWNhdXNlIGEgZnVuY3Rpb25hbCBjb21wb25lbnRcbi8vIG1heSByZXR1cm4gYW4gQXJyYXkgaW5zdGVhZCBvZiBhIHNpbmdsZSByb290LiBJbiB0aGlzIGNhc2UsIGp1c3QgYSBzaW1wbGVcbi8vIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkIC0gaWYgYW55IGNoaWxkIGlzIGFuIEFycmF5LCB3ZSBmbGF0dGVuIHRoZSB3aG9sZVxuLy8gdGhpbmcgd2l0aCBBcnJheS5wcm90b3R5cGUuY29uY2F0LiBJdCBpcyBndWFyYW50ZWVkIHRvIGJlIG9ubHkgMS1sZXZlbCBkZWVwXG4vLyBiZWNhdXNlIGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhbHJlYWR5IG5vcm1hbGl6ZSB0aGVpciBvd24gY2hpbGRyZW4uXG5mdW5jdGlvbiBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiAoY2hpbGRyZW4pIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuW2ldKSkge1xuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoW10sIGNoaWxkcmVuKVxuICAgIH1cbiAgfVxuICByZXR1cm4gY2hpbGRyZW5cbn1cblxuLy8gMi4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29uc3RydWN0cyB0aGF0IGFsd2F5cyBnZW5lcmF0ZWQgbmVzdGVkIEFycmF5cyxcbi8vIGUuZy4gPHRlbXBsYXRlPiwgPHNsb3Q+LCB2LWZvciwgb3Igd2hlbiB0aGUgY2hpbGRyZW4gaXMgcHJvdmlkZWQgYnkgdXNlclxuLy8gd2l0aCBoYW5kLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucyAvIEpTWC4gSW4gc3VjaCBjYXNlcyBhIGZ1bGwgbm9ybWFsaXphdGlvblxuLy8gaXMgbmVlZGVkIHRvIGNhdGVyIHRvIGFsbCBwb3NzaWJsZSB0eXBlcyBvZiBjaGlsZHJlbiB2YWx1ZXMuXG5mdW5jdGlvbiBub3JtYWxpemVDaGlsZHJlbiAoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIGlzUHJpbWl0aXZlKGNoaWxkcmVuKVxuICAgID8gW2NyZWF0ZVRleHRWTm9kZShjaGlsZHJlbildXG4gICAgOiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKVxuICAgICAgPyBub3JtYWxpemVBcnJheUNoaWxkcmVuKGNoaWxkcmVuKVxuICAgICAgOiB1bmRlZmluZWRcbn1cblxuZnVuY3Rpb24gaXNUZXh0Tm9kZSAobm9kZSkge1xuICByZXR1cm4gaXNEZWYobm9kZSkgJiYgaXNEZWYobm9kZS50ZXh0KSAmJiBpc0ZhbHNlKG5vZGUuaXNDb21tZW50KVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVBcnJheUNoaWxkcmVuIChjaGlsZHJlbiwgbmVzdGVkSW5kZXgpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICB2YXIgaSwgYywgbGFzdEluZGV4LCBsYXN0O1xuICBmb3IgKGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBjID0gY2hpbGRyZW5baV07XG4gICAgaWYgKGlzVW5kZWYoYykgfHwgdHlwZW9mIGMgPT09ICdib29sZWFuJykgeyBjb250aW51ZSB9XG4gICAgbGFzdEluZGV4ID0gcmVzLmxlbmd0aCAtIDE7XG4gICAgbGFzdCA9IHJlc1tsYXN0SW5kZXhdO1xuICAgIC8vICBuZXN0ZWRcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjKSkge1xuICAgICAgaWYgKGMubGVuZ3RoID4gMCkge1xuICAgICAgICBjID0gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjLCAoKG5lc3RlZEluZGV4IHx8ICcnKSArIFwiX1wiICsgaSkpO1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIGlmIChpc1RleHROb2RlKGNbMF0pICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyAoY1swXSkudGV4dCk7XG4gICAgICAgICAgYy5zaGlmdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5wdXNoLmFwcGx5KHJlcywgYyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZShjKSkge1xuICAgICAgaWYgKGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICAvLyB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgU1NSIGh5ZHJhdGlvbiBiZWNhdXNlIHRleHQgbm9kZXMgYXJlXG4gICAgICAgIC8vIGVzc2VudGlhbGx5IG1lcmdlZCB3aGVuIHJlbmRlcmVkIHRvIEhUTUwgc3RyaW5nc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjKTtcbiAgICAgIH0gZWxzZSBpZiAoYyAhPT0gJycpIHtcbiAgICAgICAgLy8gY29udmVydCBwcmltaXRpdmUgdG8gdm5vZGVcbiAgICAgICAgcmVzLnB1c2goY3JlYXRlVGV4dFZOb2RlKGMpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzVGV4dE5vZGUoYykgJiYgaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIGMudGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkZWZhdWx0IGtleSBmb3IgbmVzdGVkIGFycmF5IGNoaWxkcmVuIChsaWtlbHkgZ2VuZXJhdGVkIGJ5IHYtZm9yKVxuICAgICAgICBpZiAoaXNUcnVlKGNoaWxkcmVuLl9pc1ZMaXN0KSAmJlxuICAgICAgICAgIGlzRGVmKGMudGFnKSAmJlxuICAgICAgICAgIGlzVW5kZWYoYy5rZXkpICYmXG4gICAgICAgICAgaXNEZWYobmVzdGVkSW5kZXgpKSB7XG4gICAgICAgICAgYy5rZXkgPSBcIl9fdmxpc3RcIiArIG5lc3RlZEluZGV4ICsgXCJfXCIgKyBpICsgXCJfX1wiO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5wdXNoKGMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UHJvdmlkZSAodm0pIHtcbiAgdmFyIHByb3ZpZGUgPSB2bS4kb3B0aW9ucy5wcm92aWRlO1xuICBpZiAocHJvdmlkZSkge1xuICAgIHZtLl9wcm92aWRlZCA9IHR5cGVvZiBwcm92aWRlID09PSAnZnVuY3Rpb24nXG4gICAgICA/IHByb3ZpZGUuY2FsbCh2bSlcbiAgICAgIDogcHJvdmlkZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0SW5qZWN0aW9ucyAodm0pIHtcbiAgdmFyIHJlc3VsdCA9IHJlc29sdmVJbmplY3Qodm0uJG9wdGlvbnMuaW5qZWN0LCB2bSk7XG4gIGlmIChyZXN1bHQpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICAgIE9iamVjdC5rZXlzKHJlc3VsdCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgcmVzdWx0W2tleV0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhbiBpbmplY3RlZCB2YWx1ZSBkaXJlY3RseSBzaW5jZSB0aGUgY2hhbmdlcyB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHByb3ZpZGVkIGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcImluamVjdGlvbiBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwga2V5LCByZXN1bHRba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVJbmplY3QgKGluamVjdCwgdm0pIHtcbiAgaWYgKGluamVjdCkge1xuICAgIC8vIGluamVjdCBpcyA6YW55IGJlY2F1c2UgZmxvdyBpcyBub3Qgc21hcnQgZW5vdWdoIHRvIGZpZ3VyZSBvdXQgY2FjaGVkXG4gICAgdmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIGtleXMgPSBoYXNTeW1ib2xcbiAgICAgID8gUmVmbGVjdC5vd25LZXlzKGluamVjdClcbiAgICAgIDogT2JqZWN0LmtleXMoaW5qZWN0KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAvLyAjNjU3NCBpbiBjYXNlIHRoZSBpbmplY3Qgb2JqZWN0IGlzIG9ic2VydmVkLi4uXG4gICAgICBpZiAoa2V5ID09PSAnX19vYl9fJykgeyBjb250aW51ZSB9XG4gICAgICB2YXIgcHJvdmlkZUtleSA9IGluamVjdFtrZXldLmZyb207XG4gICAgICB2YXIgc291cmNlID0gdm07XG4gICAgICB3aGlsZSAoc291cmNlKSB7XG4gICAgICAgIGlmIChzb3VyY2UuX3Byb3ZpZGVkICYmIGhhc093bihzb3VyY2UuX3Byb3ZpZGVkLCBwcm92aWRlS2V5KSkge1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gc291cmNlLl9wcm92aWRlZFtwcm92aWRlS2V5XTtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIHNvdXJjZSA9IHNvdXJjZS4kcGFyZW50O1xuICAgICAgfVxuICAgICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgaWYgKCdkZWZhdWx0JyBpbiBpbmplY3Rba2V5XSkge1xuICAgICAgICAgIHZhciBwcm92aWRlRGVmYXVsdCA9IGluamVjdFtrZXldLmRlZmF1bHQ7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSB0eXBlb2YgcHJvdmlkZURlZmF1bHQgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gcHJvdmlkZURlZmF1bHQuY2FsbCh2bSlcbiAgICAgICAgICAgIDogcHJvdmlkZURlZmF1bHQ7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHdhcm4oKFwiSW5qZWN0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBub3QgZm91bmRcIiksIHZtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cbn1cblxuLyogICovXG5cblxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZXNvbHZpbmcgcmF3IGNoaWxkcmVuIFZOb2RlcyBpbnRvIGEgc2xvdCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVTbG90cyAoXG4gIGNoaWxkcmVuLFxuICBjb250ZXh0XG4pIHtcbiAgaWYgKCFjaGlsZHJlbiB8fCAhY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHt9XG4gIH1cbiAgdmFyIHNsb3RzID0ge307XG4gIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgdmFyIGRhdGEgPSBjaGlsZC5kYXRhO1xuICAgIC8vIHJlbW92ZSBzbG90IGF0dHJpYnV0ZSBpZiB0aGUgbm9kZSBpcyByZXNvbHZlZCBhcyBhIFZ1ZSBzbG90IG5vZGVcbiAgICBpZiAoZGF0YSAmJiBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMuc2xvdCkge1xuICAgICAgZGVsZXRlIGRhdGEuYXR0cnMuc2xvdDtcbiAgICB9XG4gICAgLy8gbmFtZWQgc2xvdHMgc2hvdWxkIG9ubHkgYmUgcmVzcGVjdGVkIGlmIHRoZSB2bm9kZSB3YXMgcmVuZGVyZWQgaW4gdGhlXG4gICAgLy8gc2FtZSBjb250ZXh0LlxuICAgIGlmICgoY2hpbGQuY29udGV4dCA9PT0gY29udGV4dCB8fCBjaGlsZC5mbkNvbnRleHQgPT09IGNvbnRleHQpICYmXG4gICAgICBkYXRhICYmIGRhdGEuc2xvdCAhPSBudWxsXG4gICAgKSB7XG4gICAgICB2YXIgbmFtZSA9IGRhdGEuc2xvdDtcbiAgICAgIHZhciBzbG90ID0gKHNsb3RzW25hbWVdIHx8IChzbG90c1tuYW1lXSA9IFtdKSk7XG4gICAgICBpZiAoY2hpbGQudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgICAgIHNsb3QucHVzaC5hcHBseShzbG90LCBjaGlsZC5jaGlsZHJlbiB8fCBbXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbG90LnB1c2goY2hpbGQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAoc2xvdHMuZGVmYXVsdCB8fCAoc2xvdHMuZGVmYXVsdCA9IFtdKSkucHVzaChjaGlsZCk7XG4gICAgfVxuICB9XG4gIC8vIGlnbm9yZSBzbG90cyB0aGF0IGNvbnRhaW5zIG9ubHkgd2hpdGVzcGFjZVxuICBmb3IgKHZhciBuYW1lJDEgaW4gc2xvdHMpIHtcbiAgICBpZiAoc2xvdHNbbmFtZSQxXS5ldmVyeShpc1doaXRlc3BhY2UpKSB7XG4gICAgICBkZWxldGUgc2xvdHNbbmFtZSQxXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNsb3RzXG59XG5cbmZ1bmN0aW9uIGlzV2hpdGVzcGFjZSAobm9kZSkge1xuICByZXR1cm4gKG5vZGUuaXNDb21tZW50ICYmICFub2RlLmFzeW5jRmFjdG9yeSkgfHwgbm9kZS50ZXh0ID09PSAnICdcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNjb3BlZFNsb3RzIChcbiAgc2xvdHMsXG4gIG5vcm1hbFNsb3RzLFxuICBwcmV2U2xvdHNcbikge1xuICB2YXIgcmVzO1xuICB2YXIgaGFzTm9ybWFsU2xvdHMgPSBPYmplY3Qua2V5cyhub3JtYWxTbG90cykubGVuZ3RoID4gMDtcbiAgdmFyIGlzU3RhYmxlID0gc2xvdHMgPyAhIXNsb3RzLiRzdGFibGUgOiAhaGFzTm9ybWFsU2xvdHM7XG4gIHZhciBrZXkgPSBzbG90cyAmJiBzbG90cy4ka2V5O1xuICBpZiAoIXNsb3RzKSB7XG4gICAgcmVzID0ge307XG4gIH0gZWxzZSBpZiAoc2xvdHMuX25vcm1hbGl6ZWQpIHtcbiAgICAvLyBmYXN0IHBhdGggMTogY2hpbGQgY29tcG9uZW50IHJlLXJlbmRlciBvbmx5LCBwYXJlbnQgZGlkIG5vdCBjaGFuZ2VcbiAgICByZXR1cm4gc2xvdHMuX25vcm1hbGl6ZWRcbiAgfSBlbHNlIGlmIChcbiAgICBpc1N0YWJsZSAmJlxuICAgIHByZXZTbG90cyAmJlxuICAgIHByZXZTbG90cyAhPT0gZW1wdHlPYmplY3QgJiZcbiAgICBrZXkgPT09IHByZXZTbG90cy4ka2V5ICYmXG4gICAgIWhhc05vcm1hbFNsb3RzICYmXG4gICAgIXByZXZTbG90cy4kaGFzTm9ybWFsXG4gICkge1xuICAgIC8vIGZhc3QgcGF0aCAyOiBzdGFibGUgc2NvcGVkIHNsb3RzIHcvIG5vIG5vcm1hbCBzbG90cyB0byBwcm94eSxcbiAgICAvLyBvbmx5IG5lZWQgdG8gbm9ybWFsaXplIG9uY2VcbiAgICByZXR1cm4gcHJldlNsb3RzXG4gIH0gZWxzZSB7XG4gICAgcmVzID0ge307XG4gICAgZm9yICh2YXIga2V5JDEgaW4gc2xvdHMpIHtcbiAgICAgIGlmIChzbG90c1trZXkkMV0gJiYga2V5JDFbMF0gIT09ICckJykge1xuICAgICAgICByZXNba2V5JDFdID0gbm9ybWFsaXplU2NvcGVkU2xvdChub3JtYWxTbG90cywga2V5JDEsIHNsb3RzW2tleSQxXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGV4cG9zZSBub3JtYWwgc2xvdHMgb24gc2NvcGVkU2xvdHNcbiAgZm9yICh2YXIga2V5JDIgaW4gbm9ybWFsU2xvdHMpIHtcbiAgICBpZiAoIShrZXkkMiBpbiByZXMpKSB7XG4gICAgICByZXNba2V5JDJdID0gcHJveHlOb3JtYWxTbG90KG5vcm1hbFNsb3RzLCBrZXkkMik7XG4gICAgfVxuICB9XG4gIC8vIGF2b3JpYXogc2VlbXMgdG8gbW9jayBhIG5vbi1leHRlbnNpYmxlICRzY29wZWRTbG90cyBvYmplY3RcbiAgLy8gYW5kIHdoZW4gdGhhdCBpcyBwYXNzZWQgZG93biB0aGlzIHdvdWxkIGNhdXNlIGFuIGVycm9yXG4gIGlmIChzbG90cyAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKHNsb3RzKSkge1xuICAgIChzbG90cykuX25vcm1hbGl6ZWQgPSByZXM7XG4gIH1cbiAgZGVmKHJlcywgJyRzdGFibGUnLCBpc1N0YWJsZSk7XG4gIGRlZihyZXMsICcka2V5Jywga2V5KTtcbiAgZGVmKHJlcywgJyRoYXNOb3JtYWwnLCBoYXNOb3JtYWxTbG90cyk7XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplU2NvcGVkU2xvdChub3JtYWxTbG90cywga2V5LCBmbikge1xuICB2YXIgbm9ybWFsaXplZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzID0gYXJndW1lbnRzLmxlbmd0aCA/IGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cykgOiBmbih7fSk7XG4gICAgcmVzID0gcmVzICYmIHR5cGVvZiByZXMgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHJlcylcbiAgICAgID8gW3Jlc10gLy8gc2luZ2xlIHZub2RlXG4gICAgICA6IG5vcm1hbGl6ZUNoaWxkcmVuKHJlcyk7XG4gICAgcmV0dXJuIHJlcyAmJiAoXG4gICAgICByZXMubGVuZ3RoID09PSAwIHx8XG4gICAgICAocmVzLmxlbmd0aCA9PT0gMSAmJiByZXNbMF0uaXNDb21tZW50KSAvLyAjOTY1OFxuICAgICkgPyB1bmRlZmluZWRcbiAgICAgIDogcmVzXG4gIH07XG4gIC8vIHRoaXMgaXMgYSBzbG90IHVzaW5nIHRoZSBuZXcgdi1zbG90IHN5bnRheCB3aXRob3V0IHNjb3BlLiBhbHRob3VnaCBpdCBpc1xuICAvLyBjb21waWxlZCBhcyBhIHNjb3BlZCBzbG90LCByZW5kZXIgZm4gdXNlcnMgd291bGQgZXhwZWN0IGl0IHRvIGJlIHByZXNlbnRcbiAgLy8gb24gdGhpcy4kc2xvdHMgYmVjYXVzZSB0aGUgdXNhZ2UgaXMgc2VtYW50aWNhbGx5IGEgbm9ybWFsIHNsb3QuXG4gIGlmIChmbi5wcm94eSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShub3JtYWxTbG90cywga2V5LCB7XG4gICAgICBnZXQ6IG5vcm1hbGl6ZWQsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG5vcm1hbGl6ZWRcbn1cblxuZnVuY3Rpb24gcHJveHlOb3JtYWxTbG90KHNsb3RzLCBrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNsb3RzW2tleV07IH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyB2LWZvciBsaXN0cy5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyTGlzdCAoXG4gIHZhbCxcbiAgcmVuZGVyXG4pIHtcbiAgdmFyIHJldCwgaSwgbCwga2V5cywga2V5O1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpIHx8IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0ID0gbmV3IEFycmF5KHZhbC5sZW5ndGgpO1xuICAgIGZvciAoaSA9IDAsIGwgPSB2YWwubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXIodmFsW2ldLCBpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICByZXQgPSBuZXcgQXJyYXkodmFsKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdmFsOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlcihpICsgMSwgaSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KHZhbCkpIHtcbiAgICBpZiAoaGFzU3ltYm9sICYmIHZhbFtTeW1ib2wuaXRlcmF0b3JdKSB7XG4gICAgICByZXQgPSBbXTtcbiAgICAgIHZhciBpdGVyYXRvciA9IHZhbFtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgICB2YXIgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgd2hpbGUgKCFyZXN1bHQuZG9uZSkge1xuICAgICAgICByZXQucHVzaChyZW5kZXIocmVzdWx0LnZhbHVlLCByZXQubGVuZ3RoKSk7XG4gICAgICAgIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG4gICAgICByZXQgPSBuZXcgQXJyYXkoa2V5cy5sZW5ndGgpO1xuICAgICAgZm9yIChpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgIHJldFtpXSA9IHJlbmRlcih2YWxba2V5XSwga2V5LCBpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFpc0RlZihyZXQpKSB7XG4gICAgcmV0ID0gW107XG4gIH1cbiAgKHJldCkuX2lzVkxpc3QgPSB0cnVlO1xuICByZXR1cm4gcmV0XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgPHNsb3Q+XG4gKi9cbmZ1bmN0aW9uIHJlbmRlclNsb3QgKFxuICBuYW1lLFxuICBmYWxsYmFjayxcbiAgcHJvcHMsXG4gIGJpbmRPYmplY3Rcbikge1xuICB2YXIgc2NvcGVkU2xvdEZuID0gdGhpcy4kc2NvcGVkU2xvdHNbbmFtZV07XG4gIHZhciBub2RlcztcbiAgaWYgKHNjb3BlZFNsb3RGbikgeyAvLyBzY29wZWQgc2xvdFxuICAgIHByb3BzID0gcHJvcHMgfHwge307XG4gICAgaWYgKGJpbmRPYmplY3QpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc09iamVjdChiaW5kT2JqZWN0KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdzbG90IHYtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0JyxcbiAgICAgICAgICB0aGlzXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBwcm9wcyA9IGV4dGVuZChleHRlbmQoe30sIGJpbmRPYmplY3QpLCBwcm9wcyk7XG4gICAgfVxuICAgIG5vZGVzID0gc2NvcGVkU2xvdEZuKHByb3BzKSB8fCBmYWxsYmFjaztcbiAgfSBlbHNlIHtcbiAgICBub2RlcyA9IHRoaXMuJHNsb3RzW25hbWVdIHx8IGZhbGxiYWNrO1xuICB9XG5cbiAgdmFyIHRhcmdldCA9IHByb3BzICYmIHByb3BzLnNsb3Q7XG4gIGlmICh0YXJnZXQpIHtcbiAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnLCB7IHNsb3Q6IHRhcmdldCB9LCBub2RlcylcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbm9kZXNcbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIGZpbHRlcnNcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUZpbHRlciAoaWQpIHtcbiAgcmV0dXJuIHJlc29sdmVBc3NldCh0aGlzLiRvcHRpb25zLCAnZmlsdGVycycsIGlkLCB0cnVlKSB8fCBpZGVudGl0eVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaXNLZXlOb3RNYXRjaCAoZXhwZWN0LCBhY3R1YWwpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZXhwZWN0KSkge1xuICAgIHJldHVybiBleHBlY3QuaW5kZXhPZihhY3R1YWwpID09PSAtMVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBleHBlY3QgIT09IGFjdHVhbFxuICB9XG59XG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIGNoZWNraW5nIGtleUNvZGVzIGZyb20gY29uZmlnLlxuICogZXhwb3NlZCBhcyBWdWUucHJvdG90eXBlLl9rXG4gKiBwYXNzaW5nIGluIGV2ZW50S2V5TmFtZSBhcyBsYXN0IGFyZ3VtZW50IHNlcGFyYXRlbHkgZm9yIGJhY2t3YXJkcyBjb21wYXRcbiAqL1xuZnVuY3Rpb24gY2hlY2tLZXlDb2RlcyAoXG4gIGV2ZW50S2V5Q29kZSxcbiAga2V5LFxuICBidWlsdEluS2V5Q29kZSxcbiAgZXZlbnRLZXlOYW1lLFxuICBidWlsdEluS2V5TmFtZVxuKSB7XG4gIHZhciBtYXBwZWRLZXlDb2RlID0gY29uZmlnLmtleUNvZGVzW2tleV0gfHwgYnVpbHRJbktleUNvZGU7XG4gIGlmIChidWlsdEluS2V5TmFtZSAmJiBldmVudEtleU5hbWUgJiYgIWNvbmZpZy5rZXlDb2Rlc1trZXldKSB7XG4gICAgcmV0dXJuIGlzS2V5Tm90TWF0Y2goYnVpbHRJbktleU5hbWUsIGV2ZW50S2V5TmFtZSlcbiAgfSBlbHNlIGlmIChtYXBwZWRLZXlDb2RlKSB7XG4gICAgcmV0dXJuIGlzS2V5Tm90TWF0Y2gobWFwcGVkS2V5Q29kZSwgZXZlbnRLZXlDb2RlKVxuICB9IGVsc2UgaWYgKGV2ZW50S2V5TmFtZSkge1xuICAgIHJldHVybiBoeXBoZW5hdGUoZXZlbnRLZXlOYW1lKSAhPT0ga2V5XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIG1lcmdpbmcgdi1iaW5kPVwib2JqZWN0XCIgaW50byBhIFZOb2RlJ3MgZGF0YS5cbiAqL1xuZnVuY3Rpb24gYmluZE9iamVjdFByb3BzIChcbiAgZGF0YSxcbiAgdGFnLFxuICB2YWx1ZSxcbiAgYXNQcm9wLFxuICBpc1N5bmNcbikge1xuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1iaW5kIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3Qgb3IgQXJyYXkgdmFsdWUnLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSB0b09iamVjdCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICB2YXIgaGFzaDtcbiAgICAgIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkgPT09ICdjbGFzcycgfHxcbiAgICAgICAgICBrZXkgPT09ICdzdHlsZScgfHxcbiAgICAgICAgICBpc1Jlc2VydmVkQXR0cmlidXRlKGtleSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgaGFzaCA9IGRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHR5cGUgPSBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMudHlwZTtcbiAgICAgICAgICBoYXNoID0gYXNQcm9wIHx8IGNvbmZpZy5tdXN0VXNlUHJvcCh0YWcsIHR5cGUsIGtleSlcbiAgICAgICAgICAgID8gZGF0YS5kb21Qcm9wcyB8fCAoZGF0YS5kb21Qcm9wcyA9IHt9KVxuICAgICAgICAgICAgOiBkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjYW1lbGl6ZWRLZXkgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgICBpZiAoIShjYW1lbGl6ZWRLZXkgaW4gaGFzaCkgJiYgIShoeXBoZW5hdGVkS2V5IGluIGhhc2gpKSB7XG4gICAgICAgICAgaGFzaFtrZXldID0gdmFsdWVba2V5XTtcblxuICAgICAgICAgIGlmIChpc1N5bmMpIHtcbiAgICAgICAgICAgIHZhciBvbiA9IGRhdGEub24gfHwgKGRhdGEub24gPSB7fSk7XG4gICAgICAgICAgICBvblsoXCJ1cGRhdGU6XCIgKyBrZXkpXSA9IGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFsdWVba2V5XSA9ICRldmVudDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIGxvb3AoIGtleSApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIHN0YXRpYyB0cmVlcy5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyU3RhdGljIChcbiAgaW5kZXgsXG4gIGlzSW5Gb3Jcbikge1xuICB2YXIgY2FjaGVkID0gdGhpcy5fc3RhdGljVHJlZXMgfHwgKHRoaXMuX3N0YXRpY1RyZWVzID0gW10pO1xuICB2YXIgdHJlZSA9IGNhY2hlZFtpbmRleF07XG4gIC8vIGlmIGhhcyBhbHJlYWR5LXJlbmRlcmVkIHN0YXRpYyB0cmVlIGFuZCBub3QgaW5zaWRlIHYtZm9yLFxuICAvLyB3ZSBjYW4gcmV1c2UgdGhlIHNhbWUgdHJlZS5cbiAgaWYgKHRyZWUgJiYgIWlzSW5Gb3IpIHtcbiAgICByZXR1cm4gdHJlZVxuICB9XG4gIC8vIG90aGVyd2lzZSwgcmVuZGVyIGEgZnJlc2ggdHJlZS5cbiAgdHJlZSA9IGNhY2hlZFtpbmRleF0gPSB0aGlzLiRvcHRpb25zLnN0YXRpY1JlbmRlckZuc1tpbmRleF0uY2FsbChcbiAgICB0aGlzLl9yZW5kZXJQcm94eSxcbiAgICBudWxsLFxuICAgIHRoaXMgLy8gZm9yIHJlbmRlciBmbnMgZ2VuZXJhdGVkIGZvciBmdW5jdGlvbmFsIGNvbXBvbmVudCB0ZW1wbGF0ZXNcbiAgKTtcbiAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX3N0YXRpY19fXCIgKyBpbmRleCksIGZhbHNlKTtcbiAgcmV0dXJuIHRyZWVcbn1cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3Igdi1vbmNlLlxuICogRWZmZWN0aXZlbHkgaXQgbWVhbnMgbWFya2luZyB0aGUgbm9kZSBhcyBzdGF0aWMgd2l0aCBhIHVuaXF1ZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIG1hcmtPbmNlIChcbiAgdHJlZSxcbiAgaW5kZXgsXG4gIGtleVxuKSB7XG4gIG1hcmtTdGF0aWModHJlZSwgKFwiX19vbmNlX19cIiArIGluZGV4ICsgKGtleSA/IChcIl9cIiArIGtleSkgOiBcIlwiKSksIHRydWUpO1xuICByZXR1cm4gdHJlZVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljIChcbiAgdHJlZSxcbiAga2V5LFxuICBpc09uY2Vcbikge1xuICBpZiAoQXJyYXkuaXNBcnJheSh0cmVlKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJlZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRyZWVbaV0gJiYgdHlwZW9mIHRyZWVbaV0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG1hcmtTdGF0aWNOb2RlKHRyZWVbaV0sIChrZXkgKyBcIl9cIiArIGkpLCBpc09uY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBtYXJrU3RhdGljTm9kZSh0cmVlLCBrZXksIGlzT25jZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpY05vZGUgKG5vZGUsIGtleSwgaXNPbmNlKSB7XG4gIG5vZGUuaXNTdGF0aWMgPSB0cnVlO1xuICBub2RlLmtleSA9IGtleTtcbiAgbm9kZS5pc09uY2UgPSBpc09uY2U7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kT2JqZWN0TGlzdGVuZXJzIChkYXRhLCB2YWx1ZSkge1xuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICd2LW9uIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3QgdmFsdWUnLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgb24gPSBkYXRhLm9uID0gZGF0YS5vbiA/IGV4dGVuZCh7fSwgZGF0YS5vbikgOiB7fTtcbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICB2YXIgZXhpc3RpbmcgPSBvbltrZXldO1xuICAgICAgICB2YXIgb3VycyA9IHZhbHVlW2tleV07XG4gICAgICAgIG9uW2tleV0gPSBleGlzdGluZyA/IFtdLmNvbmNhdChleGlzdGluZywgb3VycykgOiBvdXJzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVNjb3BlZFNsb3RzIChcbiAgZm5zLCAvLyBzZWUgZmxvdy92bm9kZVxuICByZXMsXG4gIC8vIHRoZSBmb2xsb3dpbmcgYXJlIGFkZGVkIGluIDIuNlxuICBoYXNEeW5hbWljS2V5cyxcbiAgY29udGVudEhhc2hLZXlcbikge1xuICByZXMgPSByZXMgfHwgeyAkc3RhYmxlOiAhaGFzRHluYW1pY0tleXMgfTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2xvdCA9IGZuc1tpXTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzbG90KSkge1xuICAgICAgcmVzb2x2ZVNjb3BlZFNsb3RzKHNsb3QsIHJlcywgaGFzRHluYW1pY0tleXMpO1xuICAgIH0gZWxzZSBpZiAoc2xvdCkge1xuICAgICAgLy8gbWFya2VyIGZvciByZXZlcnNlIHByb3h5aW5nIHYtc2xvdCB3aXRob3V0IHNjb3BlIG9uIHRoaXMuJHNsb3RzXG4gICAgICBpZiAoc2xvdC5wcm94eSkge1xuICAgICAgICBzbG90LmZuLnByb3h5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJlc1tzbG90LmtleV0gPSBzbG90LmZuO1xuICAgIH1cbiAgfVxuICBpZiAoY29udGVudEhhc2hLZXkpIHtcbiAgICAocmVzKS4ka2V5ID0gY29udGVudEhhc2hLZXk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZER5bmFtaWNLZXlzIChiYXNlT2JqLCB2YWx1ZXMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIga2V5ID0gdmFsdWVzW2ldO1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkpIHtcbiAgICAgIGJhc2VPYmpbdmFsdWVzW2ldXSA9IHZhbHVlc1tpICsgMV07XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGtleSAhPT0gJycgJiYga2V5ICE9PSBudWxsKSB7XG4gICAgICAvLyBudWxsIGlzIGEgc3BlY2lhbCB2YWx1ZSBmb3IgZXhwbGljaXRseSByZW1vdmluZyBhIGJpbmRpbmdcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkludmFsaWQgdmFsdWUgZm9yIGR5bmFtaWMgZGlyZWN0aXZlIGFyZ3VtZW50IChleHBlY3RlZCBzdHJpbmcgb3IgbnVsbCk6IFwiICsga2V5KSxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJhc2VPYmpcbn1cblxuLy8gaGVscGVyIHRvIGR5bmFtaWNhbGx5IGFwcGVuZCBtb2RpZmllciBydW50aW1lIG1hcmtlcnMgdG8gZXZlbnQgbmFtZXMuXG4vLyBlbnN1cmUgb25seSBhcHBlbmQgd2hlbiB2YWx1ZSBpcyBhbHJlYWR5IHN0cmluZywgb3RoZXJ3aXNlIGl0IHdpbGwgYmUgY2FzdFxuLy8gdG8gc3RyaW5nIGFuZCBjYXVzZSB0aGUgdHlwZSBjaGVjayB0byBtaXNzLlxuZnVuY3Rpb24gcHJlcGVuZE1vZGlmaWVyICh2YWx1ZSwgc3ltYm9sKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gc3ltYm9sICsgdmFsdWUgOiB2YWx1ZVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5zdGFsbFJlbmRlckhlbHBlcnMgKHRhcmdldCkge1xuICB0YXJnZXQuX28gPSBtYXJrT25jZTtcbiAgdGFyZ2V0Ll9uID0gdG9OdW1iZXI7XG4gIHRhcmdldC5fcyA9IHRvU3RyaW5nO1xuICB0YXJnZXQuX2wgPSByZW5kZXJMaXN0O1xuICB0YXJnZXQuX3QgPSByZW5kZXJTbG90O1xuICB0YXJnZXQuX3EgPSBsb29zZUVxdWFsO1xuICB0YXJnZXQuX2kgPSBsb29zZUluZGV4T2Y7XG4gIHRhcmdldC5fbSA9IHJlbmRlclN0YXRpYztcbiAgdGFyZ2V0Ll9mID0gcmVzb2x2ZUZpbHRlcjtcbiAgdGFyZ2V0Ll9rID0gY2hlY2tLZXlDb2RlcztcbiAgdGFyZ2V0Ll9iID0gYmluZE9iamVjdFByb3BzO1xuICB0YXJnZXQuX3YgPSBjcmVhdGVUZXh0Vk5vZGU7XG4gIHRhcmdldC5fZSA9IGNyZWF0ZUVtcHR5Vk5vZGU7XG4gIHRhcmdldC5fdSA9IHJlc29sdmVTY29wZWRTbG90cztcbiAgdGFyZ2V0Ll9nID0gYmluZE9iamVjdExpc3RlbmVycztcbiAgdGFyZ2V0Ll9kID0gYmluZER5bmFtaWNLZXlzO1xuICB0YXJnZXQuX3AgPSBwcmVwZW5kTW9kaWZpZXI7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCAoXG4gIGRhdGEsXG4gIHByb3BzLFxuICBjaGlsZHJlbixcbiAgcGFyZW50LFxuICBDdG9yXG4pIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIC8vIGVuc3VyZSB0aGUgY3JlYXRlRWxlbWVudCBmdW5jdGlvbiBpbiBmdW5jdGlvbmFsIGNvbXBvbmVudHNcbiAgLy8gZ2V0cyBhIHVuaXF1ZSBjb250ZXh0IC0gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIGNvcnJlY3QgbmFtZWQgc2xvdCBjaGVja1xuICB2YXIgY29udGV4dFZtO1xuICBpZiAoaGFzT3duKHBhcmVudCwgJ191aWQnKSkge1xuICAgIGNvbnRleHRWbSA9IE9iamVjdC5jcmVhdGUocGFyZW50KTtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBjb250ZXh0Vm0uX29yaWdpbmFsID0gcGFyZW50O1xuICB9IGVsc2Uge1xuICAgIC8vIHRoZSBjb250ZXh0IHZtIHBhc3NlZCBpbiBpcyBhIGZ1bmN0aW9uYWwgY29udGV4dCBhcyB3ZWxsLlxuICAgIC8vIGluIHRoaXMgY2FzZSB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB3ZSBhcmUgYWJsZSB0byBnZXQgYSBob2xkIHRvIHRoZVxuICAgIC8vIHJlYWwgY29udGV4dCBpbnN0YW5jZS5cbiAgICBjb250ZXh0Vm0gPSBwYXJlbnQ7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgcGFyZW50ID0gcGFyZW50Ll9vcmlnaW5hbDtcbiAgfVxuICB2YXIgaXNDb21waWxlZCA9IGlzVHJ1ZShvcHRpb25zLl9jb21waWxlZCk7XG4gIHZhciBuZWVkTm9ybWFsaXphdGlvbiA9ICFpc0NvbXBpbGVkO1xuXG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5saXN0ZW5lcnMgPSBkYXRhLm9uIHx8IGVtcHR5T2JqZWN0O1xuICB0aGlzLmluamVjdGlvbnMgPSByZXNvbHZlSW5qZWN0KG9wdGlvbnMuaW5qZWN0LCBwYXJlbnQpO1xuICB0aGlzLnNsb3RzID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcyQxLiRzbG90cykge1xuICAgICAgbm9ybWFsaXplU2NvcGVkU2xvdHMoXG4gICAgICAgIGRhdGEuc2NvcGVkU2xvdHMsXG4gICAgICAgIHRoaXMkMS4kc2xvdHMgPSByZXNvbHZlU2xvdHMoY2hpbGRyZW4sIHBhcmVudClcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzJDEuJHNsb3RzXG4gIH07XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzY29wZWRTbG90cycsICh7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgICByZXR1cm4gbm9ybWFsaXplU2NvcGVkU2xvdHMoZGF0YS5zY29wZWRTbG90cywgdGhpcy5zbG90cygpKVxuICAgIH1cbiAgfSkpO1xuXG4gIC8vIHN1cHBvcnQgZm9yIGNvbXBpbGVkIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGlzQ29tcGlsZWQpIHtcbiAgICAvLyBleHBvc2luZyAkb3B0aW9ucyBmb3IgcmVuZGVyU3RhdGljKClcbiAgICB0aGlzLiRvcHRpb25zID0gb3B0aW9ucztcbiAgICAvLyBwcmUtcmVzb2x2ZSBzbG90cyBmb3IgcmVuZGVyU2xvdCgpXG4gICAgdGhpcy4kc2xvdHMgPSB0aGlzLnNsb3RzKCk7XG4gICAgdGhpcy4kc2NvcGVkU2xvdHMgPSBub3JtYWxpemVTY29wZWRTbG90cyhkYXRhLnNjb3BlZFNsb3RzLCB0aGlzLiRzbG90cyk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5fc2NvcGVJZCkge1xuICAgIHRoaXMuX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkge1xuICAgICAgdmFyIHZub2RlID0gY3JlYXRlRWxlbWVudChjb250ZXh0Vm0sIGEsIGIsIGMsIGQsIG5lZWROb3JtYWxpemF0aW9uKTtcbiAgICAgIGlmICh2bm9kZSAmJiAhQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICAgICAgdm5vZGUuZm5TY29wZUlkID0gb3B0aW9ucy5fc2NvcGVJZDtcbiAgICAgICAgdm5vZGUuZm5Db250ZXh0ID0gcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZub2RlXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7IH07XG4gIH1cbn1cblxuaW5zdGFsbFJlbmRlckhlbHBlcnMoRnVuY3Rpb25hbFJlbmRlckNvbnRleHQucHJvdG90eXBlKTtcblxuZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudCAoXG4gIEN0b3IsXG4gIHByb3BzRGF0YSxcbiAgZGF0YSxcbiAgY29udGV4dFZtLFxuICBjaGlsZHJlblxuKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICB2YXIgcHJvcHMgPSB7fTtcbiAgdmFyIHByb3BPcHRpb25zID0gb3B0aW9ucy5wcm9wcztcbiAgaWYgKGlzRGVmKHByb3BPcHRpb25zKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEgfHwgZW1wdHlPYmplY3QpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoaXNEZWYoZGF0YS5hdHRycykpIHsgbWVyZ2VQcm9wcyhwcm9wcywgZGF0YS5hdHRycyk7IH1cbiAgICBpZiAoaXNEZWYoZGF0YS5wcm9wcykpIHsgbWVyZ2VQcm9wcyhwcm9wcywgZGF0YS5wcm9wcyk7IH1cbiAgfVxuXG4gIHZhciByZW5kZXJDb250ZXh0ID0gbmV3IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0KFxuICAgIGRhdGEsXG4gICAgcHJvcHMsXG4gICAgY2hpbGRyZW4sXG4gICAgY29udGV4dFZtLFxuICAgIEN0b3JcbiAgKTtcblxuICB2YXIgdm5vZGUgPSBvcHRpb25zLnJlbmRlci5jYWxsKG51bGwsIHJlbmRlckNvbnRleHQuX2MsIHJlbmRlckNvbnRleHQpO1xuXG4gIGlmICh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQodm5vZGUsIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zLCByZW5kZXJDb250ZXh0KVxuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgdmFyIHZub2RlcyA9IG5vcm1hbGl6ZUNoaWxkcmVuKHZub2RlKSB8fCBbXTtcbiAgICB2YXIgcmVzID0gbmV3IEFycmF5KHZub2Rlcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXNbaV0gPSBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2Rlc1tpXSwgZGF0YSwgcmVuZGVyQ29udGV4dC5wYXJlbnQsIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH1cbn1cblxuZnVuY3Rpb24gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCAodm5vZGUsIGRhdGEsIGNvbnRleHRWbSwgb3B0aW9ucywgcmVuZGVyQ29udGV4dCkge1xuICAvLyAjNzgxNyBjbG9uZSBub2RlIGJlZm9yZSBzZXR0aW5nIGZuQ29udGV4dCwgb3RoZXJ3aXNlIGlmIHRoZSBub2RlIGlzIHJldXNlZFxuICAvLyAoZS5nLiBpdCB3YXMgZnJvbSBhIGNhY2hlZCBub3JtYWwgc2xvdCkgdGhlIGZuQ29udGV4dCBjYXVzZXMgbmFtZWQgc2xvdHNcbiAgLy8gdGhhdCBzaG91bGQgbm90IGJlIG1hdGNoZWQgdG8gbWF0Y2guXG4gIHZhciBjbG9uZSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICBjbG9uZS5mbkNvbnRleHQgPSBjb250ZXh0Vm07XG4gIGNsb25lLmZuT3B0aW9ucyA9IG9wdGlvbnM7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgKGNsb25lLmRldnRvb2xzTWV0YSA9IGNsb25lLmRldnRvb2xzTWV0YSB8fCB7fSkucmVuZGVyQ29udGV4dCA9IHJlbmRlckNvbnRleHQ7XG4gIH1cbiAgaWYgKGRhdGEuc2xvdCkge1xuICAgIChjbG9uZS5kYXRhIHx8IChjbG9uZS5kYXRhID0ge30pKS5zbG90ID0gZGF0YS5zbG90O1xuICB9XG4gIHJldHVybiBjbG9uZVxufVxuXG5mdW5jdGlvbiBtZXJnZVByb3BzICh0bywgZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuICAgIHRvW2NhbWVsaXplKGtleSldID0gZnJvbVtrZXldO1xuICB9XG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vLyBpbmxpbmUgaG9va3MgdG8gYmUgaW52b2tlZCBvbiBjb21wb25lbnQgVk5vZGVzIGR1cmluZyBwYXRjaFxudmFyIGNvbXBvbmVudFZOb2RlSG9va3MgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQgKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICBpZiAoXG4gICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJlxuICAgICAgIXZub2RlLmNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCAmJlxuICAgICAgdm5vZGUuZGF0YS5rZWVwQWxpdmVcbiAgICApIHtcbiAgICAgIC8vIGtlcHQtYWxpdmUgY29tcG9uZW50cywgdHJlYXQgYXMgYSBwYXRjaFxuICAgICAgdmFyIG1vdW50ZWROb2RlID0gdm5vZGU7IC8vIHdvcmsgYXJvdW5kIGZsb3dcbiAgICAgIGNvbXBvbmVudFZOb2RlSG9va3MucHJlcGF0Y2gobW91bnRlZE5vZGUsIG1vdW50ZWROb2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNoaWxkID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlKFxuICAgICAgICB2bm9kZSxcbiAgICAgICAgYWN0aXZlSW5zdGFuY2VcbiAgICAgICk7XG4gICAgICBjaGlsZC4kbW91bnQoaHlkcmF0aW5nID8gdm5vZGUuZWxtIDogdW5kZWZpbmVkLCBoeWRyYXRpbmcpO1xuICAgIH1cbiAgfSxcblxuICBwcmVwYXRjaDogZnVuY3Rpb24gcHJlcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIHZhciBvcHRpb25zID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIHVwZGF0ZUNoaWxkQ29tcG9uZW50KFxuICAgICAgY2hpbGQsXG4gICAgICBvcHRpb25zLnByb3BzRGF0YSwgLy8gdXBkYXRlZCBwcm9wc1xuICAgICAgb3B0aW9ucy5saXN0ZW5lcnMsIC8vIHVwZGF0ZWQgbGlzdGVuZXJzXG4gICAgICB2bm9kZSwgLy8gbmV3IHBhcmVudCB2bm9kZVxuICAgICAgb3B0aW9ucy5jaGlsZHJlbiAvLyBuZXcgY2hpbGRyZW5cbiAgICApO1xuICB9LFxuXG4gIGluc2VydDogZnVuY3Rpb24gaW5zZXJ0ICh2bm9kZSkge1xuICAgIHZhciBjb250ZXh0ID0gdm5vZGUuY29udGV4dDtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQpIHtcbiAgICAgIGNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgY2FsbEhvb2soY29tcG9uZW50SW5zdGFuY2UsICdtb3VudGVkJyk7XG4gICAgfVxuICAgIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgaWYgKGNvbnRleHQuX2lzTW91bnRlZCkge1xuICAgICAgICAvLyB2dWUtcm91dGVyIzEyMTJcbiAgICAgICAgLy8gRHVyaW5nIHVwZGF0ZXMsIGEga2VwdC1hbGl2ZSBjb21wb25lbnQncyBjaGlsZCBjb21wb25lbnRzIG1heVxuICAgICAgICAvLyBjaGFuZ2UsIHNvIGRpcmVjdGx5IHdhbGtpbmcgdGhlIHRyZWUgaGVyZSBtYXkgY2FsbCBhY3RpdmF0ZWQgaG9va3NcbiAgICAgICAgLy8gb24gaW5jb3JyZWN0IGNoaWxkcmVuLiBJbnN0ZWFkIHdlIHB1c2ggdGhlbSBpbnRvIGEgcXVldWUgd2hpY2ggd2lsbFxuICAgICAgICAvLyBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIHdob2xlIHBhdGNoIHByb2Nlc3MgZW5kZWQuXG4gICAgICAgIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIHRydWUgLyogZGlyZWN0ICovKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgaWYgKCF2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgICBjb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG52YXIgaG9va3NUb01lcmdlID0gT2JqZWN0LmtleXMoY29tcG9uZW50Vk5vZGVIb29rcyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAoXG4gIEN0b3IsXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICBpZiAoaXNVbmRlZihDdG9yKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGJhc2VDdG9yID0gY29udGV4dC4kb3B0aW9ucy5fYmFzZTtcblxuICAvLyBwbGFpbiBvcHRpb25zIG9iamVjdDogdHVybiBpdCBpbnRvIGEgY29uc3RydWN0b3JcbiAgaWYgKGlzT2JqZWN0KEN0b3IpKSB7XG4gICAgQ3RvciA9IGJhc2VDdG9yLmV4dGVuZChDdG9yKTtcbiAgfVxuXG4gIC8vIGlmIGF0IHRoaXMgc3RhZ2UgaXQncyBub3QgYSBjb25zdHJ1Y3RvciBvciBhbiBhc3luYyBjb21wb25lbnQgZmFjdG9yeSxcbiAgLy8gcmVqZWN0LlxuICBpZiAodHlwZW9mIEN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybigoXCJJbnZhbGlkIENvbXBvbmVudCBkZWZpbml0aW9uOiBcIiArIChTdHJpbmcoQ3RvcikpKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG5cbiAgLy8gYXN5bmMgY29tcG9uZW50XG4gIHZhciBhc3luY0ZhY3Rvcnk7XG4gIGlmIChpc1VuZGVmKEN0b3IuY2lkKSkge1xuICAgIGFzeW5jRmFjdG9yeSA9IEN0b3I7XG4gICAgQ3RvciA9IHJlc29sdmVBc3luY0NvbXBvbmVudChhc3luY0ZhY3RvcnksIGJhc2VDdG9yKTtcbiAgICBpZiAoQ3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciBub2RlIGZvciBhc3luYyBjb21wb25lbnQsIHdoaWNoIGlzIHJlbmRlcmVkXG4gICAgICAvLyBhcyBhIGNvbW1lbnQgbm9kZSBidXQgcHJlc2VydmVzIGFsbCB0aGUgcmF3IGluZm9ybWF0aW9uIGZvciB0aGUgbm9kZS5cbiAgICAgIC8vIHRoZSBpbmZvcm1hdGlvbiB3aWxsIGJlIHVzZWQgZm9yIGFzeW5jIHNlcnZlci1yZW5kZXJpbmcgYW5kIGh5ZHJhdGlvbi5cbiAgICAgIHJldHVybiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyKFxuICAgICAgICBhc3luY0ZhY3RvcnksXG4gICAgICAgIGRhdGEsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICB0YWdcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICBkYXRhID0gZGF0YSB8fCB7fTtcblxuICAvLyByZXNvbHZlIGNvbnN0cnVjdG9yIG9wdGlvbnMgaW4gY2FzZSBnbG9iYWwgbWl4aW5zIGFyZSBhcHBsaWVkIGFmdGVyXG4gIC8vIGNvbXBvbmVudCBjb25zdHJ1Y3RvciBjcmVhdGlvblxuICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3IpO1xuXG4gIC8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBkYXRhIGludG8gcHJvcHMgJiBldmVudHNcbiAgaWYgKGlzRGVmKGRhdGEubW9kZWwpKSB7XG4gICAgdHJhbnNmb3JtTW9kZWwoQ3Rvci5vcHRpb25zLCBkYXRhKTtcbiAgfVxuXG4gIC8vIGV4dHJhY3QgcHJvcHNcbiAgdmFyIHByb3BzRGF0YSA9IGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEoZGF0YSwgQ3RvciwgdGFnKTtcblxuICAvLyBmdW5jdGlvbmFsIGNvbXBvbmVudFxuICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5mdW5jdGlvbmFsKSkge1xuICAgIHJldHVybiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50KEN0b3IsIHByb3BzRGF0YSwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pXG4gIH1cblxuICAvLyBleHRyYWN0IGxpc3RlbmVycywgc2luY2UgdGhlc2UgbmVlZHMgdG8gYmUgdHJlYXRlZCBhc1xuICAvLyBjaGlsZCBjb21wb25lbnQgbGlzdGVuZXJzIGluc3RlYWQgb2YgRE9NIGxpc3RlbmVyc1xuICB2YXIgbGlzdGVuZXJzID0gZGF0YS5vbjtcbiAgLy8gcmVwbGFjZSB3aXRoIGxpc3RlbmVycyB3aXRoIC5uYXRpdmUgbW9kaWZpZXJcbiAgLy8gc28gaXQgZ2V0cyBwcm9jZXNzZWQgZHVyaW5nIHBhcmVudCBjb21wb25lbnQgcGF0Y2guXG4gIGRhdGEub24gPSBkYXRhLm5hdGl2ZU9uO1xuXG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmFic3RyYWN0KSkge1xuICAgIC8vIGFic3RyYWN0IGNvbXBvbmVudHMgZG8gbm90IGtlZXAgYW55dGhpbmdcbiAgICAvLyBvdGhlciB0aGFuIHByb3BzICYgbGlzdGVuZXJzICYgc2xvdFxuXG4gICAgLy8gd29yayBhcm91bmQgZmxvd1xuICAgIHZhciBzbG90ID0gZGF0YS5zbG90O1xuICAgIGRhdGEgPSB7fTtcbiAgICBpZiAoc2xvdCkge1xuICAgICAgZGF0YS5zbG90ID0gc2xvdDtcbiAgICB9XG4gIH1cblxuICAvLyBpbnN0YWxsIGNvbXBvbmVudCBtYW5hZ2VtZW50IGhvb2tzIG9udG8gdGhlIHBsYWNlaG9sZGVyIG5vZGVcbiAgaW5zdGFsbENvbXBvbmVudEhvb2tzKGRhdGEpO1xuXG4gIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIHZub2RlXG4gIHZhciBuYW1lID0gQ3Rvci5vcHRpb25zLm5hbWUgfHwgdGFnO1xuICB2YXIgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgKFwidnVlLWNvbXBvbmVudC1cIiArIChDdG9yLmNpZCkgKyAobmFtZSA/IChcIi1cIiArIG5hbWUpIDogJycpKSxcbiAgICBkYXRhLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0LFxuICAgIHsgQ3RvcjogQ3RvciwgcHJvcHNEYXRhOiBwcm9wc0RhdGEsIGxpc3RlbmVyczogbGlzdGVuZXJzLCB0YWc6IHRhZywgY2hpbGRyZW46IGNoaWxkcmVuIH0sXG4gICAgYXN5bmNGYWN0b3J5XG4gICk7XG5cbiAgcmV0dXJuIHZub2RlXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUgKFxuICB2bm9kZSwgLy8gd2Uga25vdyBpdCdzIE1vdW50ZWRDb21wb25lbnRWTm9kZSBidXQgZmxvdyBkb2Vzbid0XG4gIHBhcmVudCAvLyBhY3RpdmVJbnN0YW5jZSBpbiBsaWZlY3ljbGUgc3RhdGVcbikge1xuICB2YXIgb3B0aW9ucyA9IHtcbiAgICBfaXNDb21wb25lbnQ6IHRydWUsXG4gICAgX3BhcmVudFZub2RlOiB2bm9kZSxcbiAgICBwYXJlbnQ6IHBhcmVudFxuICB9O1xuICAvLyBjaGVjayBpbmxpbmUtdGVtcGxhdGUgcmVuZGVyIGZ1bmN0aW9uc1xuICB2YXIgaW5saW5lVGVtcGxhdGUgPSB2bm9kZS5kYXRhLmlubGluZVRlbXBsYXRlO1xuICBpZiAoaXNEZWYoaW5saW5lVGVtcGxhdGUpKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSBpbmxpbmVUZW1wbGF0ZS5yZW5kZXI7XG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBpbmxpbmVUZW1wbGF0ZS5zdGF0aWNSZW5kZXJGbnM7XG4gIH1cbiAgcmV0dXJuIG5ldyB2bm9kZS5jb21wb25lbnRPcHRpb25zLkN0b3Iob3B0aW9ucylcbn1cblxuZnVuY3Rpb24gaW5zdGFsbENvbXBvbmVudEhvb2tzIChkYXRhKSB7XG4gIHZhciBob29rcyA9IGRhdGEuaG9vayB8fCAoZGF0YS5ob29rID0ge30pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzVG9NZXJnZS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBob29rc1RvTWVyZ2VbaV07XG4gICAgdmFyIGV4aXN0aW5nID0gaG9va3Nba2V5XTtcbiAgICB2YXIgdG9NZXJnZSA9IGNvbXBvbmVudFZOb2RlSG9va3Nba2V5XTtcbiAgICBpZiAoZXhpc3RpbmcgIT09IHRvTWVyZ2UgJiYgIShleGlzdGluZyAmJiBleGlzdGluZy5fbWVyZ2VkKSkge1xuICAgICAgaG9va3Nba2V5XSA9IGV4aXN0aW5nID8gbWVyZ2VIb29rJDEodG9NZXJnZSwgZXhpc3RpbmcpIDogdG9NZXJnZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbWVyZ2VIb29rJDEgKGYxLCBmMikge1xuICB2YXIgbWVyZ2VkID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAvLyBmbG93IGNvbXBsYWlucyBhYm91dCBleHRyYSBhcmdzIHdoaWNoIGlzIHdoeSB3ZSB1c2UgYW55XG4gICAgZjEoYSwgYik7XG4gICAgZjIoYSwgYik7XG4gIH07XG4gIG1lcmdlZC5fbWVyZ2VkID0gdHJ1ZTtcbiAgcmV0dXJuIG1lcmdlZFxufVxuXG4vLyB0cmFuc2Zvcm0gY29tcG9uZW50IHYtbW9kZWwgaW5mbyAodmFsdWUgYW5kIGNhbGxiYWNrKSBpbnRvXG4vLyBwcm9wIGFuZCBldmVudCBoYW5kbGVyIHJlc3BlY3RpdmVseS5cbmZ1bmN0aW9uIHRyYW5zZm9ybU1vZGVsIChvcHRpb25zLCBkYXRhKSB7XG4gIHZhciBwcm9wID0gKG9wdGlvbnMubW9kZWwgJiYgb3B0aW9ucy5tb2RlbC5wcm9wKSB8fCAndmFsdWUnO1xuICB2YXIgZXZlbnQgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLmV2ZW50KSB8fCAnaW5wdXQnXG4gIDsoZGF0YS5hdHRycyB8fCAoZGF0YS5hdHRycyA9IHt9KSlbcHJvcF0gPSBkYXRhLm1vZGVsLnZhbHVlO1xuICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xuICB2YXIgZXhpc3RpbmcgPSBvbltldmVudF07XG4gIHZhciBjYWxsYmFjayA9IGRhdGEubW9kZWwuY2FsbGJhY2s7XG4gIGlmIChpc0RlZihleGlzdGluZykpIHtcbiAgICBpZiAoXG4gICAgICBBcnJheS5pc0FycmF5KGV4aXN0aW5nKVxuICAgICAgICA/IGV4aXN0aW5nLmluZGV4T2YoY2FsbGJhY2spID09PSAtMVxuICAgICAgICA6IGV4aXN0aW5nICE9PSBjYWxsYmFja1xuICAgICkge1xuICAgICAgb25bZXZlbnRdID0gW2NhbGxiYWNrXS5jb25jYXQoZXhpc3RpbmcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBvbltldmVudF0gPSBjYWxsYmFjaztcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIFNJTVBMRV9OT1JNQUxJWkUgPSAxO1xudmFyIEFMV0FZU19OT1JNQUxJWkUgPSAyO1xuXG4vLyB3cmFwcGVyIGZ1bmN0aW9uIGZvciBwcm92aWRpbmcgYSBtb3JlIGZsZXhpYmxlIGludGVyZmFjZVxuLy8gd2l0aG91dCBnZXR0aW5nIHllbGxlZCBhdCBieSBmbG93XG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGUsXG4gIGFsd2F5c05vcm1hbGl6ZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGRhdGEpIHx8IGlzUHJpbWl0aXZlKGRhdGEpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBjaGlsZHJlbjtcbiAgICBjaGlsZHJlbiA9IGRhdGE7XG4gICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgfVxuICBpZiAoaXNUcnVlKGFsd2F5c05vcm1hbGl6ZSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IEFMV0FZU19OT1JNQUxJWkU7XG4gIH1cbiAgcmV0dXJuIF9jcmVhdGVFbGVtZW50KGNvbnRleHQsIHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlKVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlXG4pIHtcbiAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKChkYXRhKS5fX29iX18pKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCJBdm9pZCB1c2luZyBvYnNlcnZlZCBkYXRhIG9iamVjdCBhcyB2bm9kZSBkYXRhOiBcIiArIChKU09OLnN0cmluZ2lmeShkYXRhKSkgKyBcIlxcblwiICtcbiAgICAgICdBbHdheXMgY3JlYXRlIGZyZXNoIHZub2RlIGRhdGEgb2JqZWN0cyBpbiBlYWNoIHJlbmRlciEnLFxuICAgICAgY29udGV4dFxuICAgICk7XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIG9iamVjdCBzeW50YXggaW4gdi1iaW5kXG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmlzKSkge1xuICAgIHRhZyA9IGRhdGEuaXM7XG4gIH1cbiAgaWYgKCF0YWcpIHtcbiAgICAvLyBpbiBjYXNlIG9mIGNvbXBvbmVudCA6aXMgc2V0IHRvIGZhbHN5IHZhbHVlXG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tcHJpbWl0aXZlIGtleVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEua2V5KSAmJiAhaXNQcmltaXRpdmUoZGF0YS5rZXkpXG4gICkge1xuICAgIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCB1c2luZyBub24tcHJpbWl0aXZlIHZhbHVlIGFzIGtleSwgJyArXG4gICAgICAgICd1c2Ugc3RyaW5nL251bWJlciB2YWx1ZSBpbnN0ZWFkLicsXG4gICAgICAgIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIC8vIHN1cHBvcnQgc2luZ2xlIGZ1bmN0aW9uIGNoaWxkcmVuIGFzIGRlZmF1bHQgc2NvcGVkIHNsb3RcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmXG4gICAgdHlwZW9mIGNoaWxkcmVuWzBdID09PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIGRhdGEgPSBkYXRhIHx8IHt9O1xuICAgIGRhdGEuc2NvcGVkU2xvdHMgPSB7IGRlZmF1bHQ6IGNoaWxkcmVuWzBdIH07XG4gICAgY2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgfVxuICBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IEFMV0FZU19OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IG5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfSBlbHNlIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gU0lNUExFX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9XG4gIHZhciB2bm9kZSwgbnM7XG4gIGlmICh0eXBlb2YgdGFnID09PSAnc3RyaW5nJykge1xuICAgIHZhciBDdG9yO1xuICAgIG5zID0gKGNvbnRleHQuJHZub2RlICYmIGNvbnRleHQuJHZub2RlLm5zKSB8fCBjb25maWcuZ2V0VGFnTmFtZXNwYWNlKHRhZyk7XG4gICAgaWYgKGNvbmZpZy5pc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICAgIC8vIHBsYXRmb3JtIGJ1aWx0LWluIGVsZW1lbnRzXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLm5hdGl2ZU9uKSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIlRoZSAubmF0aXZlIG1vZGlmaWVyIGZvciB2LW9uIGlzIG9ubHkgdmFsaWQgb24gY29tcG9uZW50cyBidXQgaXQgd2FzIHVzZWQgb24gPFwiICsgdGFnICsgXCI+LlwiKSxcbiAgICAgICAgICBjb250ZXh0XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgY29uZmlnLnBhcnNlUGxhdGZvcm1UYWdOYW1lKHRhZyksIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKCghZGF0YSB8fCAhZGF0YS5wcmUpICYmIGlzRGVmKEN0b3IgPSByZXNvbHZlQXNzZXQoY29udGV4dC4kb3B0aW9ucywgJ2NvbXBvbmVudHMnLCB0YWcpKSkge1xuICAgICAgLy8gY29tcG9uZW50XG4gICAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudChDdG9yLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbiwgdGFnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdW5rbm93biBvciB1bmxpc3RlZCBuYW1lc3BhY2VkIGVsZW1lbnRzXG4gICAgICAvLyBjaGVjayBhdCBydW50aW1lIGJlY2F1c2UgaXQgbWF5IGdldCBhc3NpZ25lZCBhIG5hbWVzcGFjZSB3aGVuIGl0c1xuICAgICAgLy8gcGFyZW50IG5vcm1hbGl6ZXMgY2hpbGRyZW5cbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICB0YWcsIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gZGlyZWN0IGNvbXBvbmVudCBvcHRpb25zIC8gY29uc3RydWN0b3JcbiAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudCh0YWcsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIGlmIChpc0RlZih2bm9kZSkpIHtcbiAgICBpZiAoaXNEZWYobnMpKSB7IGFwcGx5TlModm5vZGUsIG5zKTsgfVxuICAgIGlmIChpc0RlZihkYXRhKSkgeyByZWdpc3RlckRlZXBCaW5kaW5ncyhkYXRhKTsgfVxuICAgIHJldHVybiB2bm9kZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseU5TICh2bm9kZSwgbnMsIGZvcmNlKSB7XG4gIHZub2RlLm5zID0gbnM7XG4gIGlmICh2bm9kZS50YWcgPT09ICdmb3JlaWduT2JqZWN0Jykge1xuICAgIC8vIHVzZSBkZWZhdWx0IG5hbWVzcGFjZSBpbnNpZGUgZm9yZWlnbk9iamVjdFxuICAgIG5zID0gdW5kZWZpbmVkO1xuICAgIGZvcmNlID0gdHJ1ZTtcbiAgfVxuICBpZiAoaXNEZWYodm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGNoaWxkLnRhZykgJiYgKFxuICAgICAgICBpc1VuZGVmKGNoaWxkLm5zKSB8fCAoaXNUcnVlKGZvcmNlKSAmJiBjaGlsZC50YWcgIT09ICdzdmcnKSkpIHtcbiAgICAgICAgYXBwbHlOUyhjaGlsZCwgbnMsIGZvcmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gcmVmICM1MzE4XG4vLyBuZWNlc3NhcnkgdG8gZW5zdXJlIHBhcmVudCByZS1yZW5kZXIgd2hlbiBkZWVwIGJpbmRpbmdzIGxpa2UgOnN0eWxlIGFuZFxuLy8gOmNsYXNzIGFyZSB1c2VkIG9uIHNsb3Qgbm9kZXNcbmZ1bmN0aW9uIHJlZ2lzdGVyRGVlcEJpbmRpbmdzIChkYXRhKSB7XG4gIGlmIChpc09iamVjdChkYXRhLnN0eWxlKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuc3R5bGUpO1xuICB9XG4gIGlmIChpc09iamVjdChkYXRhLmNsYXNzKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuY2xhc3MpO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UmVuZGVyICh2bSkge1xuICB2bS5fdm5vZGUgPSBudWxsOyAvLyB0aGUgcm9vdCBvZiB0aGUgY2hpbGQgdHJlZVxuICB2bS5fc3RhdGljVHJlZXMgPSBudWxsOyAvLyB2LW9uY2UgY2FjaGVkIHRyZWVzXG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gIHZhciBwYXJlbnRWbm9kZSA9IHZtLiR2bm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlOyAvLyB0aGUgcGxhY2Vob2xkZXIgbm9kZSBpbiBwYXJlbnQgdHJlZVxuICB2YXIgcmVuZGVyQ29udGV4dCA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmNvbnRleHQ7XG4gIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiwgcmVuZGVyQ29udGV4dCk7XG4gIHZtLiRzY29wZWRTbG90cyA9IGVtcHR5T2JqZWN0O1xuICAvLyBiaW5kIHRoZSBjcmVhdGVFbGVtZW50IGZuIHRvIHRoaXMgaW5zdGFuY2VcbiAgLy8gc28gdGhhdCB3ZSBnZXQgcHJvcGVyIHJlbmRlciBjb250ZXh0IGluc2lkZSBpdC5cbiAgLy8gYXJncyBvcmRlcjogdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUsIGFsd2F5c05vcm1hbGl6ZVxuICAvLyBpbnRlcm5hbCB2ZXJzaW9uIGlzIHVzZWQgYnkgcmVuZGVyIGZ1bmN0aW9ucyBjb21waWxlZCBmcm9tIHRlbXBsYXRlc1xuICB2bS5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCBmYWxzZSk7IH07XG4gIC8vIG5vcm1hbGl6YXRpb24gaXMgYWx3YXlzIGFwcGxpZWQgZm9yIHRoZSBwdWJsaWMgdmVyc2lvbiwgdXNlZCBpblxuICAvLyB1c2VyLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucy5cbiAgdm0uJGNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgdHJ1ZSk7IH07XG5cbiAgLy8gJGF0dHJzICYgJGxpc3RlbmVycyBhcmUgZXhwb3NlZCBmb3IgZWFzaWVyIEhPQyBjcmVhdGlvbi5cbiAgLy8gdGhleSBuZWVkIHRvIGJlIHJlYWN0aXZlIHNvIHRoYXQgSE9DcyB1c2luZyB0aGVtIGFyZSBhbHdheXMgdXBkYXRlZFxuICB2YXIgcGFyZW50RGF0YSA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmRhdGE7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRhdHRycycsIHBhcmVudERhdGEgJiYgcGFyZW50RGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGF0dHJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckbGlzdGVuZXJzJywgb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkbGlzdGVuZXJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIG51bGwsIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgbnVsbCwgdHJ1ZSk7XG4gIH1cbn1cblxudmFyIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IG51bGw7XG5cbmZ1bmN0aW9uIHJlbmRlck1peGluIChWdWUpIHtcbiAgLy8gaW5zdGFsbCBydW50aW1lIGNvbnZlbmllbmNlIGhlbHBlcnNcbiAgaW5zdGFsbFJlbmRlckhlbHBlcnMoVnVlLnByb3RvdHlwZSk7XG5cbiAgVnVlLnByb3RvdHlwZS4kbmV4dFRpY2sgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICByZXR1cm4gbmV4dFRpY2soZm4sIHRoaXMpXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS5fcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIHJlZiA9IHZtLiRvcHRpb25zO1xuICAgIHZhciByZW5kZXIgPSByZWYucmVuZGVyO1xuICAgIHZhciBfcGFyZW50Vm5vZGUgPSByZWYuX3BhcmVudFZub2RlO1xuXG4gICAgaWYgKF9wYXJlbnRWbm9kZSkge1xuICAgICAgdm0uJHNjb3BlZFNsb3RzID0gbm9ybWFsaXplU2NvcGVkU2xvdHMoXG4gICAgICAgIF9wYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzLFxuICAgICAgICB2bS4kc2xvdHMsXG4gICAgICAgIHZtLiRzY29wZWRTbG90c1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBzZXQgcGFyZW50IHZub2RlLiB0aGlzIGFsbG93cyByZW5kZXIgZnVuY3Rpb25zIHRvIGhhdmUgYWNjZXNzXG4gICAgLy8gdG8gdGhlIGRhdGEgb24gdGhlIHBsYWNlaG9sZGVyIG5vZGUuXG4gICAgdm0uJHZub2RlID0gX3BhcmVudFZub2RlO1xuICAgIC8vIHJlbmRlciBzZWxmXG4gICAgdmFyIHZub2RlO1xuICAgIHRyeSB7XG4gICAgICAvLyBUaGVyZSdzIG5vIG5lZWQgdG8gbWFpbnRhaW4gYSBzdGFjayBiZWNhdXNlIGFsbCByZW5kZXIgZm5zIGFyZSBjYWxsZWRcbiAgICAgIC8vIHNlcGFyYXRlbHkgZnJvbSBvbmUgYW5vdGhlci4gTmVzdGVkIGNvbXBvbmVudCdzIHJlbmRlciBmbnMgYXJlIGNhbGxlZFxuICAgICAgLy8gd2hlbiBwYXJlbnQgY29tcG9uZW50IGlzIHBhdGNoZWQuXG4gICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSB2bTtcbiAgICAgIHZub2RlID0gcmVuZGVyLmNhbGwodm0uX3JlbmRlclByb3h5LCB2bS4kY3JlYXRlRWxlbWVudCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwicmVuZGVyXCIpO1xuICAgICAgLy8gcmV0dXJuIGVycm9yIHJlbmRlciByZXN1bHQsXG4gICAgICAvLyBvciBwcmV2aW91cyB2bm9kZSB0byBwcmV2ZW50IHJlbmRlciBlcnJvciBjYXVzaW5nIGJsYW5rIGNvbXBvbmVudFxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHZtLiRvcHRpb25zLnJlbmRlckVycm9yKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdm5vZGUgPSB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQsIGUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwicmVuZGVyRXJyb3JcIik7XG4gICAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xuICAgIH1cbiAgICAvLyBpZiB0aGUgcmV0dXJuZWQgYXJyYXkgY29udGFpbnMgb25seSBhIHNpbmdsZSBub2RlLCBhbGxvdyBpdFxuICAgIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSAmJiB2bm9kZS5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZub2RlID0gdm5vZGVbMF07XG4gICAgfVxuICAgIC8vIHJldHVybiBlbXB0eSB2bm9kZSBpbiBjYXNlIHRoZSByZW5kZXIgZnVuY3Rpb24gZXJyb3JlZCBvdXRcbiAgICBpZiAoISh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnTXVsdGlwbGUgcm9vdCBub2RlcyByZXR1cm5lZCBmcm9tIHJlbmRlciBmdW5jdGlvbi4gUmVuZGVyIGZ1bmN0aW9uICcgK1xuICAgICAgICAgICdzaG91bGQgcmV0dXJuIGEgc2luZ2xlIHJvb3Qgbm9kZS4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB2bm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgICB9XG4gICAgLy8gc2V0IHBhcmVudFxuICAgIHZub2RlLnBhcmVudCA9IF9wYXJlbnRWbm9kZTtcbiAgICByZXR1cm4gdm5vZGVcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGVuc3VyZUN0b3IgKGNvbXAsIGJhc2UpIHtcbiAgaWYgKFxuICAgIGNvbXAuX19lc01vZHVsZSB8fFxuICAgIChoYXNTeW1ib2wgJiYgY29tcFtTeW1ib2wudG9TdHJpbmdUYWddID09PSAnTW9kdWxlJylcbiAgKSB7XG4gICAgY29tcCA9IGNvbXAuZGVmYXVsdDtcbiAgfVxuICByZXR1cm4gaXNPYmplY3QoY29tcClcbiAgICA/IGJhc2UuZXh0ZW5kKGNvbXApXG4gICAgOiBjb21wXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIgKFxuICBmYWN0b3J5LFxuICBkYXRhLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgdGFnXG4pIHtcbiAgdmFyIG5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gIG5vZGUuYXN5bmNGYWN0b3J5ID0gZmFjdG9yeTtcbiAgbm9kZS5hc3luY01ldGEgPSB7IGRhdGE6IGRhdGEsIGNvbnRleHQ6IGNvbnRleHQsIGNoaWxkcmVuOiBjaGlsZHJlbiwgdGFnOiB0YWcgfTtcbiAgcmV0dXJuIG5vZGVcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUFzeW5jQ29tcG9uZW50IChcbiAgZmFjdG9yeSxcbiAgYmFzZUN0b3Jcbikge1xuICBpZiAoaXNUcnVlKGZhY3RvcnkuZXJyb3IpICYmIGlzRGVmKGZhY3RvcnkuZXJyb3JDb21wKSkge1xuICAgIHJldHVybiBmYWN0b3J5LmVycm9yQ29tcFxuICB9XG5cbiAgaWYgKGlzRGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkucmVzb2x2ZWRcbiAgfVxuXG4gIHZhciBvd25lciA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcbiAgaWYgKG93bmVyICYmIGlzRGVmKGZhY3Rvcnkub3duZXJzKSAmJiBmYWN0b3J5Lm93bmVycy5pbmRleE9mKG93bmVyKSA9PT0gLTEpIHtcbiAgICAvLyBhbHJlYWR5IHBlbmRpbmdcbiAgICBmYWN0b3J5Lm93bmVycy5wdXNoKG93bmVyKTtcbiAgfVxuXG4gIGlmIChpc1RydWUoZmFjdG9yeS5sb2FkaW5nKSAmJiBpc0RlZihmYWN0b3J5LmxvYWRpbmdDb21wKSkge1xuICAgIHJldHVybiBmYWN0b3J5LmxvYWRpbmdDb21wXG4gIH1cblxuICBpZiAob3duZXIgJiYgIWlzRGVmKGZhY3Rvcnkub3duZXJzKSkge1xuICAgIHZhciBvd25lcnMgPSBmYWN0b3J5Lm93bmVycyA9IFtvd25lcl07XG4gICAgdmFyIHN5bmMgPSB0cnVlO1xuICAgIHZhciB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgIHZhciB0aW1lclRpbWVvdXQgPSBudWxsXG5cbiAgICA7KG93bmVyKS4kb24oJ2hvb2s6ZGVzdHJveWVkJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtb3ZlKG93bmVycywgb3duZXIpOyB9KTtcblxuICAgIHZhciBmb3JjZVJlbmRlciA9IGZ1bmN0aW9uIChyZW5kZXJDb21wbGV0ZWQpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gb3duZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAob3duZXJzW2ldKS4kZm9yY2VVcGRhdGUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlbmRlckNvbXBsZXRlZCkge1xuICAgICAgICBvd25lcnMubGVuZ3RoID0gMDtcbiAgICAgICAgaWYgKHRpbWVyTG9hZGluZyAhPT0gbnVsbCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lckxvYWRpbmcpO1xuICAgICAgICAgIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVyVGltZW91dCAhPT0gbnVsbCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lclRpbWVvdXQpO1xuICAgICAgICAgIHRpbWVyVGltZW91dCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHJlc29sdmUgPSBvbmNlKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgIC8vIGNhY2hlIHJlc29sdmVkXG4gICAgICBmYWN0b3J5LnJlc29sdmVkID0gZW5zdXJlQ3RvcihyZXMsIGJhc2VDdG9yKTtcbiAgICAgIC8vIGludm9rZSBjYWxsYmFja3Mgb25seSBpZiB0aGlzIGlzIG5vdCBhIHN5bmNocm9ub3VzIHJlc29sdmVcbiAgICAgIC8vIChhc3luYyByZXNvbHZlcyBhcmUgc2hpbW1lZCBhcyBzeW5jaHJvbm91cyBkdXJpbmcgU1NSKVxuICAgICAgaWYgKCFzeW5jKSB7XG4gICAgICAgIGZvcmNlUmVuZGVyKHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3duZXJzLmxlbmd0aCA9IDA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgcmVqZWN0ID0gb25jZShmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiRmFpbGVkIHRvIHJlc29sdmUgYXN5bmMgY29tcG9uZW50OiBcIiArIChTdHJpbmcoZmFjdG9yeSkpICtcbiAgICAgICAgKHJlYXNvbiA/IChcIlxcblJlYXNvbjogXCIgKyByZWFzb24pIDogJycpXG4gICAgICApO1xuICAgICAgaWYgKGlzRGVmKGZhY3RvcnkuZXJyb3JDb21wKSkge1xuICAgICAgICBmYWN0b3J5LmVycm9yID0gdHJ1ZTtcbiAgICAgICAgZm9yY2VSZW5kZXIodHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgcmVzID0gZmFjdG9yeShyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgaWYgKGlzT2JqZWN0KHJlcykpIHtcbiAgICAgIGlmIChpc1Byb21pc2UocmVzKSkge1xuICAgICAgICAvLyAoKSA9PiBQcm9taXNlXG4gICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgICAgcmVzLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc1Byb21pc2UocmVzLmNvbXBvbmVudCkpIHtcbiAgICAgICAgcmVzLmNvbXBvbmVudC50aGVuKHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5lcnJvcikpIHtcbiAgICAgICAgICBmYWN0b3J5LmVycm9yQ29tcCA9IGVuc3VyZUN0b3IocmVzLmVycm9yLCBiYXNlQ3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWYocmVzLmxvYWRpbmcpKSB7XG4gICAgICAgICAgZmFjdG9yeS5sb2FkaW5nQ29tcCA9IGVuc3VyZUN0b3IocmVzLmxvYWRpbmcsIGJhc2VDdG9yKTtcbiAgICAgICAgICBpZiAocmVzLmRlbGF5ID09PSAwKSB7XG4gICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aW1lckxvYWRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkgJiYgaXNVbmRlZihmYWN0b3J5LmVycm9yKSkge1xuICAgICAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9yY2VSZW5kZXIoZmFsc2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCByZXMuZGVsYXkgfHwgMjAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWYocmVzLnRpbWVvdXQpKSB7XG4gICAgICAgICAgdGltZXJUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aW1lclRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICAgICAgICAgICAgICAgID8gKFwidGltZW91dCAoXCIgKyAocmVzLnRpbWVvdXQpICsgXCJtcylcIilcbiAgICAgICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHJlcy50aW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHN5bmMgPSBmYWxzZTtcbiAgICAvLyByZXR1cm4gaW4gY2FzZSByZXNvbHZlZCBzeW5jaHJvbm91c2x5XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ1xuICAgICAgPyBmYWN0b3J5LmxvYWRpbmdDb21wXG4gICAgICA6IGZhY3RvcnkucmVzb2x2ZWRcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaXNBc3luY1BsYWNlaG9sZGVyIChub2RlKSB7XG4gIHJldHVybiBub2RlLmlzQ29tbWVudCAmJiBub2RlLmFzeW5jRmFjdG9yeVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZCAoY2hpbGRyZW4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSBjaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjKSAmJiAoaXNEZWYoYy5jb21wb25lbnRPcHRpb25zKSB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYykpKSB7XG4gICAgICAgIHJldHVybiBjXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV2ZW50cyAodm0pIHtcbiAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZtLl9oYXNIb29rRXZlbnQgPSBmYWxzZTtcbiAgLy8gaW5pdCBwYXJlbnQgYXR0YWNoZWQgZXZlbnRzXG4gIHZhciBsaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBpZiAobGlzdGVuZXJzKSB7XG4gICAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMpO1xuICB9XG59XG5cbnZhciB0YXJnZXQ7XG5cbmZ1bmN0aW9uIGFkZCAoZXZlbnQsIGZuKSB7XG4gIHRhcmdldC4kb24oZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlJDEgKGV2ZW50LCBmbikge1xuICB0YXJnZXQuJG9mZihldmVudCwgZm4pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPbmNlSGFuZGxlciAoZXZlbnQsIGZuKSB7XG4gIHZhciBfdGFyZ2V0ID0gdGFyZ2V0O1xuICByZXR1cm4gZnVuY3Rpb24gb25jZUhhbmRsZXIgKCkge1xuICAgIHZhciByZXMgPSBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgIF90YXJnZXQuJG9mZihldmVudCwgb25jZUhhbmRsZXIpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMgKFxuICB2bSxcbiAgbGlzdGVuZXJzLFxuICBvbGRMaXN0ZW5lcnNcbikge1xuICB0YXJnZXQgPSB2bTtcbiAgdXBkYXRlTGlzdGVuZXJzKGxpc3RlbmVycywgb2xkTGlzdGVuZXJzIHx8IHt9LCBhZGQsIHJlbW92ZSQxLCBjcmVhdGVPbmNlSGFuZGxlciwgdm0pO1xuICB0YXJnZXQgPSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGV2ZW50c01peGluIChWdWUpIHtcbiAgdmFyIGhvb2tSRSA9IC9eaG9vazovO1xuICBWdWUucHJvdG90eXBlLiRvbiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBldmVudC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdm0uJG9uKGV2ZW50W2ldLCBmbik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICh2bS5fZXZlbnRzW2V2ZW50XSB8fCAodm0uX2V2ZW50c1tldmVudF0gPSBbXSkpLnB1c2goZm4pO1xuICAgICAgLy8gb3B0aW1pemUgaG9vazpldmVudCBjb3N0IGJ5IHVzaW5nIGEgYm9vbGVhbiBmbGFnIG1hcmtlZCBhdCByZWdpc3RyYXRpb25cbiAgICAgIC8vIGluc3RlYWQgb2YgYSBoYXNoIGxvb2t1cFxuICAgICAgaWYgKGhvb2tSRS50ZXN0KGV2ZW50KSkge1xuICAgICAgICB2bS5faGFzSG9va0V2ZW50ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb25jZSA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGZ1bmN0aW9uIG9uICgpIHtcbiAgICAgIHZtLiRvZmYoZXZlbnQsIG9uKTtcbiAgICAgIGZuLmFwcGx5KHZtLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBvbi5mbiA9IGZuO1xuICAgIHZtLiRvbihldmVudCwgb24pO1xuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9mZiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIC8vIGFsbFxuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gYXJyYXkgb2YgZXZlbnRzXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICBmb3IgKHZhciBpJDEgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpJDEgPCBsOyBpJDErKykge1xuICAgICAgICB2bS4kb2ZmKGV2ZW50W2kkMV0sIGZuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBzcGVjaWZpYyBldmVudFxuICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoIWNicykge1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIGlmICghZm4pIHtcbiAgICAgIHZtLl9ldmVudHNbZXZlbnRdID0gbnVsbDtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBzcGVjaWZpYyBoYW5kbGVyXG4gICAgdmFyIGNiO1xuICAgIHZhciBpID0gY2JzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBjYiA9IGNic1tpXTtcbiAgICAgIGlmIChjYiA9PT0gZm4gfHwgY2IuZm4gPT09IGZuKSB7XG4gICAgICAgIGNicy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGVtaXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgbG93ZXJDYXNlRXZlbnQgPSBldmVudC50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKGxvd2VyQ2FzZUV2ZW50ICE9PSBldmVudCAmJiB2bS5fZXZlbnRzW2xvd2VyQ2FzZUV2ZW50XSkge1xuICAgICAgICB0aXAoXG4gICAgICAgICAgXCJFdmVudCBcXFwiXCIgKyBsb3dlckNhc2VFdmVudCArIFwiXFxcIiBpcyBlbWl0dGVkIGluIGNvbXBvbmVudCBcIiArXG4gICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSArIFwiIGJ1dCB0aGUgaGFuZGxlciBpcyByZWdpc3RlcmVkIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgeW91IGNhbm5vdCB1c2UgXCIgK1xuICAgICAgICAgIFwidi1vbiB0byBsaXN0ZW4gdG8gY2FtZWxDYXNlIGV2ZW50cyB3aGVuIHVzaW5nIGluLURPTSB0ZW1wbGF0ZXMuIFwiICtcbiAgICAgICAgICBcIllvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIChoeXBoZW5hdGUoZXZlbnQpKSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoY2JzKSB7XG4gICAgICBjYnMgPSBjYnMubGVuZ3RoID4gMSA/IHRvQXJyYXkoY2JzKSA6IGNicztcbiAgICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgICAgdmFyIGluZm8gPSBcImV2ZW50IGhhbmRsZXIgZm9yIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiXCI7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2JzW2ldLCB2bSwgYXJncywgdm0sIGluZm8pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBhY3RpdmVJbnN0YW5jZSA9IG51bGw7XG52YXIgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7XG5cbmZ1bmN0aW9uIHNldEFjdGl2ZUluc3RhbmNlKHZtKSB7XG4gIHZhciBwcmV2QWN0aXZlSW5zdGFuY2UgPSBhY3RpdmVJbnN0YW5jZTtcbiAgYWN0aXZlSW5zdGFuY2UgPSB2bTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBhY3RpdmVJbnN0YW5jZSA9IHByZXZBY3RpdmVJbnN0YW5jZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0TGlmZWN5Y2xlICh2bSkge1xuICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuXG4gIC8vIGxvY2F0ZSBmaXJzdCBub24tYWJzdHJhY3QgcGFyZW50XG4gIHZhciBwYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgaWYgKHBhcmVudCAmJiAhb3B0aW9ucy5hYnN0cmFjdCkge1xuICAgIHdoaWxlIChwYXJlbnQuJG9wdGlvbnMuYWJzdHJhY3QgJiYgcGFyZW50LiRwYXJlbnQpIHtcbiAgICAgIHBhcmVudCA9IHBhcmVudC4kcGFyZW50O1xuICAgIH1cbiAgICBwYXJlbnQuJGNoaWxkcmVuLnB1c2godm0pO1xuICB9XG5cbiAgdm0uJHBhcmVudCA9IHBhcmVudDtcbiAgdm0uJHJvb3QgPSBwYXJlbnQgPyBwYXJlbnQuJHJvb3QgOiB2bTtcblxuICB2bS4kY2hpbGRyZW4gPSBbXTtcbiAgdm0uJHJlZnMgPSB7fTtcblxuICB2bS5fd2F0Y2hlciA9IG51bGw7XG4gIHZtLl9pbmFjdGl2ZSA9IG51bGw7XG4gIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IGZhbHNlO1xuICB2bS5faXNNb3VudGVkID0gZmFsc2U7XG4gIHZtLl9pc0Rlc3Ryb3llZCA9IGZhbHNlO1xuICB2bS5faXNCZWluZ0Rlc3Ryb3llZCA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBsaWZlY3ljbGVNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgcHJldkVsID0gdm0uJGVsO1xuICAgIHZhciBwcmV2Vm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgdmFyIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSA9IHNldEFjdGl2ZUluc3RhbmNlKHZtKTtcbiAgICB2bS5fdm5vZGUgPSB2bm9kZTtcbiAgICAvLyBWdWUucHJvdG90eXBlLl9fcGF0Y2hfXyBpcyBpbmplY3RlZCBpbiBlbnRyeSBwb2ludHNcbiAgICAvLyBiYXNlZCBvbiB0aGUgcmVuZGVyaW5nIGJhY2tlbmQgdXNlZC5cbiAgICBpZiAoIXByZXZWbm9kZSkge1xuICAgICAgLy8gaW5pdGlhbCByZW5kZXJcbiAgICAgIHZtLiRlbCA9IHZtLl9fcGF0Y2hfXyh2bS4kZWwsIHZub2RlLCBoeWRyYXRpbmcsIGZhbHNlIC8qIHJlbW92ZU9ubHkgKi8pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1cGRhdGVzXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18ocHJldlZub2RlLCB2bm9kZSk7XG4gICAgfVxuICAgIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSgpO1xuICAgIC8vIHVwZGF0ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuICAgIGlmIChwcmV2RWwpIHtcbiAgICAgIHByZXZFbC5fX3Z1ZV9fID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHZtLiRlbCkge1xuICAgICAgdm0uJGVsLl9fdnVlX18gPSB2bTtcbiAgICB9XG4gICAgLy8gaWYgcGFyZW50IGlzIGFuIEhPQywgdXBkYXRlIGl0cyAkZWwgYXMgd2VsbFxuICAgIGlmICh2bS4kdm5vZGUgJiYgdm0uJHBhcmVudCAmJiB2bS4kdm5vZGUgPT09IHZtLiRwYXJlbnQuX3Zub2RlKSB7XG4gICAgICB2bS4kcGFyZW50LiRlbCA9IHZtLiRlbDtcbiAgICB9XG4gICAgLy8gdXBkYXRlZCBob29rIGlzIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyIHRvIGVuc3VyZSB0aGF0IGNoaWxkcmVuIGFyZVxuICAgIC8vIHVwZGF0ZWQgaW4gYSBwYXJlbnQncyB1cGRhdGVkIGhvb2suXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZm9yY2VVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAodm0uX3dhdGNoZXIpIHtcbiAgICAgIHZtLl93YXRjaGVyLnVwZGF0ZSgpO1xuICAgIH1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRkZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl9pc0JlaW5nRGVzdHJveWVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdiZWZvcmVEZXN0cm95Jyk7XG4gICAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSB0cnVlO1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gcGFyZW50XG4gICAgdmFyIHBhcmVudCA9IHZtLiRwYXJlbnQ7XG4gICAgaWYgKHBhcmVudCAmJiAhcGFyZW50Ll9pc0JlaW5nRGVzdHJveWVkICYmICF2bS4kb3B0aW9ucy5hYnN0cmFjdCkge1xuICAgICAgcmVtb3ZlKHBhcmVudC4kY2hpbGRyZW4sIHZtKTtcbiAgICB9XG4gICAgLy8gdGVhcmRvd24gd2F0Y2hlcnNcbiAgICBpZiAodm0uX3dhdGNoZXIpIHtcbiAgICAgIHZtLl93YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIHZhciBpID0gdm0uX3dhdGNoZXJzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2bS5fd2F0Y2hlcnNbaV0udGVhcmRvd24oKTtcbiAgICB9XG4gICAgLy8gcmVtb3ZlIHJlZmVyZW5jZSBmcm9tIGRhdGEgb2JcbiAgICAvLyBmcm96ZW4gb2JqZWN0IG1heSBub3QgaGF2ZSBvYnNlcnZlci5cbiAgICBpZiAodm0uX2RhdGEuX19vYl9fKSB7XG4gICAgICB2bS5fZGF0YS5fX29iX18udm1Db3VudC0tO1xuICAgIH1cbiAgICAvLyBjYWxsIHRoZSBsYXN0IGhvb2suLi5cbiAgICB2bS5faXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgIC8vIGludm9rZSBkZXN0cm95IGhvb2tzIG9uIGN1cnJlbnQgcmVuZGVyZWQgdHJlZVxuICAgIHZtLl9fcGF0Y2hfXyh2bS5fdm5vZGUsIG51bGwpO1xuICAgIC8vIGZpcmUgZGVzdHJveWVkIGhvb2tcbiAgICBjYWxsSG9vayh2bSwgJ2Rlc3Ryb3llZCcpO1xuICAgIC8vIHR1cm4gb2ZmIGFsbCBpbnN0YW5jZSBsaXN0ZW5lcnMuXG4gICAgdm0uJG9mZigpO1xuICAgIC8vIHJlbW92ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gbnVsbDtcbiAgICB9XG4gICAgLy8gcmVsZWFzZSBjaXJjdWxhciByZWZlcmVuY2UgKCM2NzU5KVxuICAgIGlmICh2bS4kdm5vZGUpIHtcbiAgICAgIHZtLiR2bm9kZS5wYXJlbnQgPSBudWxsO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gbW91bnRDb21wb25lbnQgKFxuICB2bSxcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIHZtLiRlbCA9IGVsO1xuICBpZiAoIXZtLiRvcHRpb25zLnJlbmRlcikge1xuICAgIHZtLiRvcHRpb25zLnJlbmRlciA9IGNyZWF0ZUVtcHR5Vk5vZGU7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCh2bS4kb3B0aW9ucy50ZW1wbGF0ZSAmJiB2bS4kb3B0aW9ucy50ZW1wbGF0ZS5jaGFyQXQoMCkgIT09ICcjJykgfHxcbiAgICAgICAgdm0uJG9wdGlvbnMuZWwgfHwgZWwpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IGFyZSB1c2luZyB0aGUgcnVudGltZS1vbmx5IGJ1aWxkIG9mIFZ1ZSB3aGVyZSB0aGUgdGVtcGxhdGUgJyArXG4gICAgICAgICAgJ2NvbXBpbGVyIGlzIG5vdCBhdmFpbGFibGUuIEVpdGhlciBwcmUtY29tcGlsZSB0aGUgdGVtcGxhdGVzIGludG8gJyArXG4gICAgICAgICAgJ3JlbmRlciBmdW5jdGlvbnMsIG9yIHVzZSB0aGUgY29tcGlsZXItaW5jbHVkZWQgYnVpbGQuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnRmFpbGVkIHRvIG1vdW50IGNvbXBvbmVudDogdGVtcGxhdGUgb3IgcmVuZGVyIGZ1bmN0aW9uIG5vdCBkZWZpbmVkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY2FsbEhvb2sodm0sICdiZWZvcmVNb3VudCcpO1xuXG4gIHZhciB1cGRhdGVDb21wb25lbnQ7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBuYW1lID0gdm0uX25hbWU7XG4gICAgICB2YXIgaWQgPSB2bS5fdWlkO1xuICAgICAgdmFyIHN0YXJ0VGFnID0gXCJ2dWUtcGVyZi1zdGFydDpcIiArIGlkO1xuICAgICAgdmFyIGVuZFRhZyA9IFwidnVlLXBlcmYtZW5kOlwiICsgaWQ7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdmFyIHZub2RlID0gdm0uX3JlbmRlcigpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyBuYW1lICsgXCIgcmVuZGVyXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcblxuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgICB2bS5fdXBkYXRlKHZub2RlLCBoeWRyYXRpbmcpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyBuYW1lICsgXCIgcGF0Y2hcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdXBkYXRlQ29tcG9uZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdm0uX3VwZGF0ZSh2bS5fcmVuZGVyKCksIGh5ZHJhdGluZyk7XG4gICAgfTtcbiAgfVxuXG4gIC8vIHdlIHNldCB0aGlzIHRvIHZtLl93YXRjaGVyIGluc2lkZSB0aGUgd2F0Y2hlcidzIGNvbnN0cnVjdG9yXG4gIC8vIHNpbmNlIHRoZSB3YXRjaGVyJ3MgaW5pdGlhbCBwYXRjaCBtYXkgY2FsbCAkZm9yY2VVcGRhdGUgKGUuZy4gaW5zaWRlIGNoaWxkXG4gIC8vIGNvbXBvbmVudCdzIG1vdW50ZWQgaG9vayksIHdoaWNoIHJlbGllcyBvbiB2bS5fd2F0Y2hlciBiZWluZyBhbHJlYWR5IGRlZmluZWRcbiAgbmV3IFdhdGNoZXIodm0sIHVwZGF0ZUNvbXBvbmVudCwgbm9vcCwge1xuICAgIGJlZm9yZTogZnVuY3Rpb24gYmVmb3JlICgpIHtcbiAgICAgIGlmICh2bS5faXNNb3VudGVkICYmICF2bS5faXNEZXN0cm95ZWQpIHtcbiAgICAgICAgY2FsbEhvb2sodm0sICdiZWZvcmVVcGRhdGUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHRydWUgLyogaXNSZW5kZXJXYXRjaGVyICovKTtcbiAgaHlkcmF0aW5nID0gZmFsc2U7XG5cbiAgLy8gbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSwgY2FsbCBtb3VudGVkIG9uIHNlbGZcbiAgLy8gbW91bnRlZCBpcyBjYWxsZWQgZm9yIHJlbmRlci1jcmVhdGVkIGNoaWxkIGNvbXBvbmVudHMgaW4gaXRzIGluc2VydGVkIGhvb2tcbiAgaWYgKHZtLiR2bm9kZSA9PSBudWxsKSB7XG4gICAgdm0uX2lzTW91bnRlZCA9IHRydWU7XG4gICAgY2FsbEhvb2sodm0sICdtb3VudGVkJyk7XG4gIH1cbiAgcmV0dXJuIHZtXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNoaWxkQ29tcG9uZW50IChcbiAgdm0sXG4gIHByb3BzRGF0YSxcbiAgbGlzdGVuZXJzLFxuICBwYXJlbnRWbm9kZSxcbiAgcmVuZGVyQ2hpbGRyZW5cbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IHRydWU7XG4gIH1cblxuICAvLyBkZXRlcm1pbmUgd2hldGhlciBjb21wb25lbnQgaGFzIHNsb3QgY2hpbGRyZW5cbiAgLy8gd2UgbmVlZCB0byBkbyB0aGlzIGJlZm9yZSBvdmVyd3JpdGluZyAkb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4uXG5cbiAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIGR5bmFtaWMgc2NvcGVkU2xvdHMgKGhhbmQtd3JpdHRlbiBvciBjb21waWxlZCBidXQgd2l0aFxuICAvLyBkeW5hbWljIHNsb3QgbmFtZXMpLiBTdGF0aWMgc2NvcGVkIHNsb3RzIGNvbXBpbGVkIGZyb20gdGVtcGxhdGUgaGFzIHRoZVxuICAvLyBcIiRzdGFibGVcIiBtYXJrZXIuXG4gIHZhciBuZXdTY29wZWRTbG90cyA9IHBhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHM7XG4gIHZhciBvbGRTY29wZWRTbG90cyA9IHZtLiRzY29wZWRTbG90cztcbiAgdmFyIGhhc0R5bmFtaWNTY29wZWRTbG90ID0gISEoXG4gICAgKG5ld1Njb3BlZFNsb3RzICYmICFuZXdTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgIChvbGRTY29wZWRTbG90cyAhPT0gZW1wdHlPYmplY3QgJiYgIW9sZFNjb3BlZFNsb3RzLiRzdGFibGUpIHx8XG4gICAgKG5ld1Njb3BlZFNsb3RzICYmIHZtLiRzY29wZWRTbG90cy4ka2V5ICE9PSBuZXdTY29wZWRTbG90cy4ka2V5KVxuICApO1xuXG4gIC8vIEFueSBzdGF0aWMgc2xvdCBjaGlsZHJlbiBmcm9tIHRoZSBwYXJlbnQgbWF5IGhhdmUgY2hhbmdlZCBkdXJpbmcgcGFyZW50J3NcbiAgLy8gdXBkYXRlLiBEeW5hbWljIHNjb3BlZCBzbG90cyBtYXkgYWxzbyBoYXZlIGNoYW5nZWQuIEluIHN1Y2ggY2FzZXMsIGEgZm9yY2VkXG4gIC8vIHVwZGF0ZSBpcyBuZWNlc3NhcnkgdG8gZW5zdXJlIGNvcnJlY3RuZXNzLlxuICB2YXIgbmVlZHNGb3JjZVVwZGF0ZSA9ICEhKFxuICAgIHJlbmRlckNoaWxkcmVuIHx8ICAgICAgICAgICAgICAgLy8gaGFzIG5ldyBzdGF0aWMgc2xvdHNcbiAgICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gfHwgIC8vIGhhcyBvbGQgc3RhdGljIHNsb3RzXG4gICAgaGFzRHluYW1pY1Njb3BlZFNsb3RcbiAgKTtcblxuICB2bS4kb3B0aW9ucy5fcGFyZW50Vm5vZGUgPSBwYXJlbnRWbm9kZTtcbiAgdm0uJHZub2RlID0gcGFyZW50Vm5vZGU7IC8vIHVwZGF0ZSB2bSdzIHBsYWNlaG9sZGVyIG5vZGUgd2l0aG91dCByZS1yZW5kZXJcblxuICBpZiAodm0uX3Zub2RlKSB7IC8vIHVwZGF0ZSBjaGlsZCB0cmVlJ3MgcGFyZW50XG4gICAgdm0uX3Zub2RlLnBhcmVudCA9IHBhcmVudFZub2RlO1xuICB9XG4gIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiA9IHJlbmRlckNoaWxkcmVuO1xuXG4gIC8vIHVwZGF0ZSAkYXR0cnMgYW5kICRsaXN0ZW5lcnMgaGFzaFxuICAvLyB0aGVzZSBhcmUgYWxzbyByZWFjdGl2ZSBzbyB0aGV5IG1heSB0cmlnZ2VyIGNoaWxkIHVwZGF0ZSBpZiB0aGUgY2hpbGRcbiAgLy8gdXNlZCB0aGVtIGR1cmluZyByZW5kZXJcbiAgdm0uJGF0dHJzID0gcGFyZW50Vm5vZGUuZGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdDtcbiAgdm0uJGxpc3RlbmVycyA9IGxpc3RlbmVycyB8fCBlbXB0eU9iamVjdDtcblxuICAvLyB1cGRhdGUgcHJvcHNcbiAgaWYgKHByb3BzRGF0YSAmJiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XG4gICAgdmFyIHByb3BzID0gdm0uX3Byb3BzO1xuICAgIHZhciBwcm9wS2V5cyA9IHZtLiRvcHRpb25zLl9wcm9wS2V5cyB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0gcHJvcEtleXNbaV07XG4gICAgICB2YXIgcHJvcE9wdGlvbnMgPSB2bS4kb3B0aW9ucy5wcm9wczsgLy8gd3RmIGZsb3c/XG4gICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcE9wdGlvbnMsIHByb3BzRGF0YSwgdm0pO1xuICAgIH1cbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gICAgLy8ga2VlcCBhIGNvcHkgb2YgcmF3IHByb3BzRGF0YVxuICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YSA9IHByb3BzRGF0YTtcbiAgfVxuXG4gIC8vIHVwZGF0ZSBsaXN0ZW5lcnNcbiAgbGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0O1xuICB2YXIgb2xkTGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyk7XG5cbiAgLy8gcmVzb2x2ZSBzbG90cyArIGZvcmNlIHVwZGF0ZSBpZiBoYXMgY2hpbGRyZW5cbiAgaWYgKG5lZWRzRm9yY2VVcGRhdGUpIHtcbiAgICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMocmVuZGVyQ2hpbGRyZW4sIHBhcmVudFZub2RlLmNvbnRleHQpO1xuICAgIHZtLiRmb3JjZVVwZGF0ZSgpO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0luSW5hY3RpdmVUcmVlICh2bSkge1xuICB3aGlsZSAodm0gJiYgKHZtID0gdm0uJHBhcmVudCkpIHtcbiAgICBpZiAodm0uX2luYWN0aXZlKSB7IHJldHVybiB0cnVlIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH0gZWxzZSBpZiAodm0uX2RpcmVjdEluYWN0aXZlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZtLl9pbmFjdGl2ZSB8fCB2bS5faW5hY3RpdmUgPT09IG51bGwpIHtcbiAgICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2FjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gdHJ1ZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfVxuICBpZiAoIXZtLl9pbmFjdGl2ZSkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2RlYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbEhvb2sgKHZtLCBob29rKSB7XG4gIC8vICM3NTczIGRpc2FibGUgZGVwIGNvbGxlY3Rpb24gd2hlbiBpbnZva2luZyBsaWZlY3ljbGUgaG9va3NcbiAgcHVzaFRhcmdldCgpO1xuICB2YXIgaGFuZGxlcnMgPSB2bS4kb3B0aW9uc1tob29rXTtcbiAgdmFyIGluZm8gPSBob29rICsgXCIgaG9va1wiO1xuICBpZiAoaGFuZGxlcnMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IGhhbmRsZXJzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoaGFuZGxlcnNbaV0sIHZtLCBudWxsLCB2bSwgaW5mbyk7XG4gICAgfVxuICB9XG4gIGlmICh2bS5faGFzSG9va0V2ZW50KSB7XG4gICAgdm0uJGVtaXQoJ2hvb2s6JyArIGhvb2spO1xuICB9XG4gIHBvcFRhcmdldCgpO1xufVxuXG4vKiAgKi9cblxudmFyIE1BWF9VUERBVEVfQ09VTlQgPSAxMDA7XG5cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGFjdGl2YXRlZENoaWxkcmVuID0gW107XG52YXIgaGFzID0ge307XG52YXIgY2lyY3VsYXIgPSB7fTtcbnZhciB3YWl0aW5nID0gZmFsc2U7XG52YXIgZmx1c2hpbmcgPSBmYWxzZTtcbnZhciBpbmRleCA9IDA7XG5cbi8qKlxuICogUmVzZXQgdGhlIHNjaGVkdWxlcidzIHN0YXRlLlxuICovXG5mdW5jdGlvbiByZXNldFNjaGVkdWxlclN0YXRlICgpIHtcbiAgaW5kZXggPSBxdWV1ZS5sZW5ndGggPSBhY3RpdmF0ZWRDaGlsZHJlbi5sZW5ndGggPSAwO1xuICBoYXMgPSB7fTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaXJjdWxhciA9IHt9O1xuICB9XG4gIHdhaXRpbmcgPSBmbHVzaGluZyA9IGZhbHNlO1xufVxuXG4vLyBBc3luYyBlZGdlIGNhc2UgIzY1NjYgcmVxdWlyZXMgc2F2aW5nIHRoZSB0aW1lc3RhbXAgd2hlbiBldmVudCBsaXN0ZW5lcnMgYXJlXG4vLyBhdHRhY2hlZC4gSG93ZXZlciwgY2FsbGluZyBwZXJmb3JtYW5jZS5ub3coKSBoYXMgYSBwZXJmIG92ZXJoZWFkIGVzcGVjaWFsbHlcbi8vIGlmIHRoZSBwYWdlIGhhcyB0aG91c2FuZHMgb2YgZXZlbnQgbGlzdGVuZXJzLiBJbnN0ZWFkLCB3ZSB0YWtlIGEgdGltZXN0YW1wXG4vLyBldmVyeSB0aW1lIHRoZSBzY2hlZHVsZXIgZmx1c2hlcyBhbmQgdXNlIHRoYXQgZm9yIGFsbCBldmVudCBsaXN0ZW5lcnNcbi8vIGF0dGFjaGVkIGR1cmluZyB0aGF0IGZsdXNoLlxudmFyIGN1cnJlbnRGbHVzaFRpbWVzdGFtcCA9IDA7XG5cbi8vIEFzeW5jIGVkZ2UgY2FzZSBmaXggcmVxdWlyZXMgc3RvcmluZyBhbiBldmVudCBsaXN0ZW5lcidzIGF0dGFjaCB0aW1lc3RhbXAuXG52YXIgZ2V0Tm93ID0gRGF0ZS5ub3c7XG5cbi8vIERldGVybWluZSB3aGF0IGV2ZW50IHRpbWVzdGFtcCB0aGUgYnJvd3NlciBpcyB1c2luZy4gQW5ub3lpbmdseSwgdGhlXG4vLyB0aW1lc3RhbXAgY2FuIGVpdGhlciBiZSBoaS1yZXMgKHJlbGF0aXZlIHRvIHBhZ2UgbG9hZCkgb3IgbG93LXJlc1xuLy8gKHJlbGF0aXZlIHRvIFVOSVggZXBvY2gpLCBzbyBpbiBvcmRlciB0byBjb21wYXJlIHRpbWUgd2UgaGF2ZSB0byB1c2UgdGhlXG4vLyBzYW1lIHRpbWVzdGFtcCB0eXBlIHdoZW4gc2F2aW5nIHRoZSBmbHVzaCB0aW1lc3RhbXAuXG4vLyBBbGwgSUUgdmVyc2lvbnMgdXNlIGxvdy1yZXMgZXZlbnQgdGltZXN0YW1wcywgYW5kIGhhdmUgcHJvYmxlbWF0aWMgY2xvY2tcbi8vIGltcGxlbWVudGF0aW9ucyAoIzk2MzIpXG5pZiAoaW5Ccm93c2VyICYmICFpc0lFKSB7XG4gIHZhciBwZXJmb3JtYW5jZSA9IHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgaWYgKFxuICAgIHBlcmZvcm1hbmNlICYmXG4gICAgdHlwZW9mIHBlcmZvcm1hbmNlLm5vdyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIGdldE5vdygpID4gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50JykudGltZVN0YW1wXG4gICkge1xuICAgIC8vIGlmIHRoZSBldmVudCB0aW1lc3RhbXAsIGFsdGhvdWdoIGV2YWx1YXRlZCBBRlRFUiB0aGUgRGF0ZS5ub3coKSwgaXNcbiAgICAvLyBzbWFsbGVyIHRoYW4gaXQsIGl0IG1lYW5zIHRoZSBldmVudCBpcyB1c2luZyBhIGhpLXJlcyB0aW1lc3RhbXAsXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gdXNlIHRoZSBoaS1yZXMgdmVyc2lvbiBmb3IgZXZlbnQgbGlzdGVuZXIgdGltZXN0YW1wcyBhc1xuICAgIC8vIHdlbGwuXG4gICAgZ2V0Tm93ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCk7IH07XG4gIH1cbn1cblxuLyoqXG4gKiBGbHVzaCBib3RoIHF1ZXVlcyBhbmQgcnVuIHRoZSB3YXRjaGVycy5cbiAqL1xuZnVuY3Rpb24gZmx1c2hTY2hlZHVsZXJRdWV1ZSAoKSB7XG4gIGN1cnJlbnRGbHVzaFRpbWVzdGFtcCA9IGdldE5vdygpO1xuICBmbHVzaGluZyA9IHRydWU7XG4gIHZhciB3YXRjaGVyLCBpZDtcblxuICAvLyBTb3J0IHF1ZXVlIGJlZm9yZSBmbHVzaC5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQ6XG4gIC8vIDEuIENvbXBvbmVudHMgYXJlIHVwZGF0ZWQgZnJvbSBwYXJlbnQgdG8gY2hpbGQuIChiZWNhdXNlIHBhcmVudCBpcyBhbHdheXNcbiAgLy8gICAgY3JlYXRlZCBiZWZvcmUgdGhlIGNoaWxkKVxuICAvLyAyLiBBIGNvbXBvbmVudCdzIHVzZXIgd2F0Y2hlcnMgYXJlIHJ1biBiZWZvcmUgaXRzIHJlbmRlciB3YXRjaGVyIChiZWNhdXNlXG4gIC8vICAgIHVzZXIgd2F0Y2hlcnMgYXJlIGNyZWF0ZWQgYmVmb3JlIHRoZSByZW5kZXIgd2F0Y2hlcilcbiAgLy8gMy4gSWYgYSBjb21wb25lbnQgaXMgZGVzdHJveWVkIGR1cmluZyBhIHBhcmVudCBjb21wb25lbnQncyB3YXRjaGVyIHJ1bixcbiAgLy8gICAgaXRzIHdhdGNoZXJzIGNhbiBiZSBza2lwcGVkLlxuICBxdWV1ZS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG5cbiAgLy8gZG8gbm90IGNhY2hlIGxlbmd0aCBiZWNhdXNlIG1vcmUgd2F0Y2hlcnMgbWlnaHQgYmUgcHVzaGVkXG4gIC8vIGFzIHdlIHJ1biBleGlzdGluZyB3YXRjaGVyc1xuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBxdWV1ZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICB3YXRjaGVyID0gcXVldWVbaW5kZXhdO1xuICAgIGlmICh3YXRjaGVyLmJlZm9yZSkge1xuICAgICAgd2F0Y2hlci5iZWZvcmUoKTtcbiAgICB9XG4gICAgaWQgPSB3YXRjaGVyLmlkO1xuICAgIGhhc1tpZF0gPSBudWxsO1xuICAgIHdhdGNoZXIucnVuKCk7XG4gICAgLy8gaW4gZGV2IGJ1aWxkLCBjaGVjayBhbmQgc3RvcCBjaXJjdWxhciB1cGRhdGVzLlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGhhc1tpZF0gIT0gbnVsbCkge1xuICAgICAgY2lyY3VsYXJbaWRdID0gKGNpcmN1bGFyW2lkXSB8fCAwKSArIDE7XG4gICAgICBpZiAoY2lyY3VsYXJbaWRdID4gTUFYX1VQREFURV9DT1VOVCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdZb3UgbWF5IGhhdmUgYW4gaW5maW5pdGUgdXBkYXRlIGxvb3AgJyArIChcbiAgICAgICAgICAgIHdhdGNoZXIudXNlclxuICAgICAgICAgICAgICA/IChcImluIHdhdGNoZXIgd2l0aCBleHByZXNzaW9uIFxcXCJcIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpXG4gICAgICAgICAgICAgIDogXCJpbiBhIGNvbXBvbmVudCByZW5kZXIgZnVuY3Rpb24uXCJcbiAgICAgICAgICApLFxuICAgICAgICAgIHdhdGNoZXIudm1cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBrZWVwIGNvcGllcyBvZiBwb3N0IHF1ZXVlcyBiZWZvcmUgcmVzZXR0aW5nIHN0YXRlXG4gIHZhciBhY3RpdmF0ZWRRdWV1ZSA9IGFjdGl2YXRlZENoaWxkcmVuLnNsaWNlKCk7XG4gIHZhciB1cGRhdGVkUXVldWUgPSBxdWV1ZS5zbGljZSgpO1xuXG4gIHJlc2V0U2NoZWR1bGVyU3RhdGUoKTtcblxuICAvLyBjYWxsIGNvbXBvbmVudCB1cGRhdGVkIGFuZCBhY3RpdmF0ZWQgaG9va3NcbiAgY2FsbEFjdGl2YXRlZEhvb2tzKGFjdGl2YXRlZFF1ZXVlKTtcbiAgY2FsbFVwZGF0ZWRIb29rcyh1cGRhdGVkUXVldWUpO1xuXG4gIC8vIGRldnRvb2wgaG9va1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGRldnRvb2xzICYmIGNvbmZpZy5kZXZ0b29scykge1xuICAgIGRldnRvb2xzLmVtaXQoJ2ZsdXNoJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbFVwZGF0ZWRIb29rcyAocXVldWUpIHtcbiAgdmFyIGkgPSBxdWV1ZS5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgd2F0Y2hlciA9IHF1ZXVlW2ldO1xuICAgIHZhciB2bSA9IHdhdGNoZXIudm07XG4gICAgaWYgKHZtLl93YXRjaGVyID09PSB3YXRjaGVyICYmIHZtLl9pc01vdW50ZWQgJiYgIXZtLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgY2FsbEhvb2sodm0sICd1cGRhdGVkJyk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUXVldWUgYSBrZXB0LWFsaXZlIGNvbXBvbmVudCB0aGF0IHdhcyBhY3RpdmF0ZWQgZHVyaW5nIHBhdGNoLlxuICogVGhlIHF1ZXVlIHdpbGwgYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSBlbnRpcmUgdHJlZSBoYXMgYmVlbiBwYXRjaGVkLlxuICovXG5mdW5jdGlvbiBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudCAodm0pIHtcbiAgLy8gc2V0dGluZyBfaW5hY3RpdmUgdG8gZmFsc2UgaGVyZSBzbyB0aGF0IGEgcmVuZGVyIGZ1bmN0aW9uIGNhblxuICAvLyByZWx5IG9uIGNoZWNraW5nIHdoZXRoZXIgaXQncyBpbiBhbiBpbmFjdGl2ZSB0cmVlIChlLmcuIHJvdXRlci12aWV3KVxuICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgYWN0aXZhdGVkQ2hpbGRyZW4ucHVzaCh2bSk7XG59XG5cbmZ1bmN0aW9uIGNhbGxBY3RpdmF0ZWRIb29rcyAocXVldWUpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgIHF1ZXVlW2ldLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudChxdWV1ZVtpXSwgdHJ1ZSAvKiB0cnVlICovKTtcbiAgfVxufVxuXG4vKipcbiAqIFB1c2ggYSB3YXRjaGVyIGludG8gdGhlIHdhdGNoZXIgcXVldWUuXG4gKiBKb2JzIHdpdGggZHVwbGljYXRlIElEcyB3aWxsIGJlIHNraXBwZWQgdW5sZXNzIGl0J3NcbiAqIHB1c2hlZCB3aGVuIHRoZSBxdWV1ZSBpcyBiZWluZyBmbHVzaGVkLlxuICovXG5mdW5jdGlvbiBxdWV1ZVdhdGNoZXIgKHdhdGNoZXIpIHtcbiAgdmFyIGlkID0gd2F0Y2hlci5pZDtcbiAgaWYgKGhhc1tpZF0gPT0gbnVsbCkge1xuICAgIGhhc1tpZF0gPSB0cnVlO1xuICAgIGlmICghZmx1c2hpbmcpIHtcbiAgICAgIHF1ZXVlLnB1c2god2F0Y2hlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGlmIGFscmVhZHkgZmx1c2hpbmcsIHNwbGljZSB0aGUgd2F0Y2hlciBiYXNlZCBvbiBpdHMgaWRcbiAgICAgIC8vIGlmIGFscmVhZHkgcGFzdCBpdHMgaWQsIGl0IHdpbGwgYmUgcnVuIG5leHQgaW1tZWRpYXRlbHkuXG4gICAgICB2YXIgaSA9IHF1ZXVlLmxlbmd0aCAtIDE7XG4gICAgICB3aGlsZSAoaSA+IGluZGV4ICYmIHF1ZXVlW2ldLmlkID4gd2F0Y2hlci5pZCkge1xuICAgICAgICBpLS07XG4gICAgICB9XG4gICAgICBxdWV1ZS5zcGxpY2UoaSArIDEsIDAsIHdhdGNoZXIpO1xuICAgIH1cbiAgICAvLyBxdWV1ZSB0aGUgZmx1c2hcbiAgICBpZiAoIXdhaXRpbmcpIHtcbiAgICAgIHdhaXRpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29uZmlnLmFzeW5jKSB7XG4gICAgICAgIGZsdXNoU2NoZWR1bGVyUXVldWUoKTtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBuZXh0VGljayhmbHVzaFNjaGVkdWxlclF1ZXVlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cblxuXG52YXIgdWlkJDIgPSAwO1xuXG4vKipcbiAqIEEgd2F0Y2hlciBwYXJzZXMgYW4gZXhwcmVzc2lvbiwgY29sbGVjdHMgZGVwZW5kZW5jaWVzLFxuICogYW5kIGZpcmVzIGNhbGxiYWNrIHdoZW4gdGhlIGV4cHJlc3Npb24gdmFsdWUgY2hhbmdlcy5cbiAqIFRoaXMgaXMgdXNlZCBmb3IgYm90aCB0aGUgJHdhdGNoKCkgYXBpIGFuZCBkaXJlY3RpdmVzLlxuICovXG52YXIgV2F0Y2hlciA9IGZ1bmN0aW9uIFdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgY2IsXG4gIG9wdGlvbnMsXG4gIGlzUmVuZGVyV2F0Y2hlclxuKSB7XG4gIHRoaXMudm0gPSB2bTtcbiAgaWYgKGlzUmVuZGVyV2F0Y2hlcikge1xuICAgIHZtLl93YXRjaGVyID0gdGhpcztcbiAgfVxuICB2bS5fd2F0Y2hlcnMucHVzaCh0aGlzKTtcbiAgLy8gb3B0aW9uc1xuICBpZiAob3B0aW9ucykge1xuICAgIHRoaXMuZGVlcCA9ICEhb3B0aW9ucy5kZWVwO1xuICAgIHRoaXMudXNlciA9ICEhb3B0aW9ucy51c2VyO1xuICAgIHRoaXMubGF6eSA9ICEhb3B0aW9ucy5sYXp5O1xuICAgIHRoaXMuc3luYyA9ICEhb3B0aW9ucy5zeW5jO1xuICAgIHRoaXMuYmVmb3JlID0gb3B0aW9ucy5iZWZvcmU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5kZWVwID0gdGhpcy51c2VyID0gdGhpcy5sYXp5ID0gdGhpcy5zeW5jID0gZmFsc2U7XG4gIH1cbiAgdGhpcy5jYiA9IGNiO1xuICB0aGlzLmlkID0gKyt1aWQkMjsgLy8gdWlkIGZvciBiYXRjaGluZ1xuICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gIHRoaXMuZGlydHkgPSB0aGlzLmxhenk7IC8vIGZvciBsYXp5IHdhdGNoZXJzXG4gIHRoaXMuZGVwcyA9IFtdO1xuICB0aGlzLm5ld0RlcHMgPSBbXTtcbiAgdGhpcy5kZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLm5ld0RlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMuZXhwcmVzc2lvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICA/IGV4cE9yRm4udG9TdHJpbmcoKVxuICAgIDogJyc7XG4gIC8vIHBhcnNlIGV4cHJlc3Npb24gZm9yIGdldHRlclxuICBpZiAodHlwZW9mIGV4cE9yRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLmdldHRlciA9IGV4cE9yRm47XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5nZXR0ZXIgPSBwYXJzZVBhdGgoZXhwT3JGbik7XG4gICAgaWYgKCF0aGlzLmdldHRlcikge1xuICAgICAgdGhpcy5nZXR0ZXIgPSBub29wO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB3YXRjaGluZyBwYXRoOiBcXFwiXCIgKyBleHBPckZuICsgXCJcXFwiIFwiICtcbiAgICAgICAgJ1dhdGNoZXIgb25seSBhY2NlcHRzIHNpbXBsZSBkb3QtZGVsaW1pdGVkIHBhdGhzLiAnICtcbiAgICAgICAgJ0ZvciBmdWxsIGNvbnRyb2wsIHVzZSBhIGZ1bmN0aW9uIGluc3RlYWQuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHRoaXMudmFsdWUgPSB0aGlzLmxhenlcbiAgICA/IHVuZGVmaW5lZFxuICAgIDogdGhpcy5nZXQoKTtcbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIGdldHRlciwgYW5kIHJlLWNvbGxlY3QgZGVwZW5kZW5jaWVzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKCkge1xuICBwdXNoVGFyZ2V0KHRoaXMpO1xuICB2YXIgdmFsdWU7XG4gIHZhciB2bSA9IHRoaXMudm07XG4gIHRyeSB7XG4gICAgdmFsdWUgPSB0aGlzLmdldHRlci5jYWxsKHZtLCB2bSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgKFwiZ2V0dGVyIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBcInRvdWNoXCIgZXZlcnkgcHJvcGVydHkgc28gdGhleSBhcmUgYWxsIHRyYWNrZWQgYXNcbiAgICAvLyBkZXBlbmRlbmNpZXMgZm9yIGRlZXAgd2F0Y2hpbmdcbiAgICBpZiAodGhpcy5kZWVwKSB7XG4gICAgICB0cmF2ZXJzZSh2YWx1ZSk7XG4gICAgfVxuICAgIHBvcFRhcmdldCgpO1xuICAgIHRoaXMuY2xlYW51cERlcHMoKTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn07XG5cbi8qKlxuICogQWRkIGEgZGVwZW5kZW5jeSB0byB0aGlzIGRpcmVjdGl2ZS5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuYWRkRGVwID0gZnVuY3Rpb24gYWRkRGVwIChkZXApIHtcbiAgdmFyIGlkID0gZGVwLmlkO1xuICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhpZCkpIHtcbiAgICB0aGlzLm5ld0RlcElkcy5hZGQoaWQpO1xuICAgIHRoaXMubmV3RGVwcy5wdXNoKGRlcCk7XG4gICAgaWYgKCF0aGlzLmRlcElkcy5oYXMoaWQpKSB7XG4gICAgICBkZXAuYWRkU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCBmb3IgZGVwZW5kZW5jeSBjb2xsZWN0aW9uLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5jbGVhbnVwRGVwcyA9IGZ1bmN0aW9uIGNsZWFudXBEZXBzICgpIHtcbiAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIGRlcCA9IHRoaXMuZGVwc1tpXTtcbiAgICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhkZXAuaWQpKSB7XG4gICAgICBkZXAucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxuICB2YXIgdG1wID0gdGhpcy5kZXBJZHM7XG4gIHRoaXMuZGVwSWRzID0gdGhpcy5uZXdEZXBJZHM7XG4gIHRoaXMubmV3RGVwSWRzID0gdG1wO1xuICB0aGlzLm5ld0RlcElkcy5jbGVhcigpO1xuICB0bXAgPSB0aGlzLmRlcHM7XG4gIHRoaXMuZGVwcyA9IHRoaXMubmV3RGVwcztcbiAgdGhpcy5uZXdEZXBzID0gdG1wO1xuICB0aGlzLm5ld0RlcHMubGVuZ3RoID0gMDtcbn07XG5cbi8qKlxuICogU3Vic2NyaWJlciBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCB3aGVuIGEgZGVwZW5kZW5jeSBjaGFuZ2VzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodGhpcy5sYXp5KSB7XG4gICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gIH0gZWxzZSBpZiAodGhpcy5zeW5jKSB7XG4gICAgdGhpcy5ydW4oKTtcbiAgfSBlbHNlIHtcbiAgICBxdWV1ZVdhdGNoZXIodGhpcyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2NoZWR1bGVyIGpvYiBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiBydW4gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLmdldCgpO1xuICAgIGlmIChcbiAgICAgIHZhbHVlICE9PSB0aGlzLnZhbHVlIHx8XG4gICAgICAvLyBEZWVwIHdhdGNoZXJzIGFuZCB3YXRjaGVycyBvbiBPYmplY3QvQXJyYXlzIHNob3VsZCBmaXJlIGV2ZW5cbiAgICAgIC8vIHdoZW4gdGhlIHZhbHVlIGlzIHRoZSBzYW1lLCBiZWNhdXNlIHRoZSB2YWx1ZSBtYXlcbiAgICAgIC8vIGhhdmUgbXV0YXRlZC5cbiAgICAgIGlzT2JqZWN0KHZhbHVlKSB8fFxuICAgICAgdGhpcy5kZWVwXG4gICAgKSB7XG4gICAgICAvLyBzZXQgbmV3IHZhbHVlXG4gICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdGhpcy52bSwgKFwiY2FsbGJhY2sgZm9yIHdhdGNoZXIgXFxcIlwiICsgKHRoaXMuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIHZhbHVlIG9mIHRoZSB3YXRjaGVyLlxuICogVGhpcyBvbmx5IGdldHMgY2FsbGVkIGZvciBsYXp5IHdhdGNoZXJzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlICgpIHtcbiAgdGhpcy52YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gIHRoaXMuZGlydHkgPSBmYWxzZTtcbn07XG5cbi8qKlxuICogRGVwZW5kIG9uIGFsbCBkZXBzIGNvbGxlY3RlZCBieSB0aGlzIHdhdGNoZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHRoaXMuZGVwc1tpXS5kZXBlbmQoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgc2VsZiBmcm9tIGFsbCBkZXBlbmRlbmNpZXMnIHN1YnNjcmliZXIgbGlzdC5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gdm0ncyB3YXRjaGVyIGxpc3RcbiAgICAvLyB0aGlzIGlzIGEgc29tZXdoYXQgZXhwZW5zaXZlIG9wZXJhdGlvbiBzbyB3ZSBza2lwIGl0XG4gICAgLy8gaWYgdGhlIHZtIGlzIGJlaW5nIGRlc3Ryb3llZC5cbiAgICBpZiAoIXRoaXMudm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJlbW92ZSh0aGlzLnZtLl93YXRjaGVycywgdGhpcyk7XG4gICAgfVxuICAgIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLmRlcHNbaV0ucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiA9IHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IG5vb3AsXG4gIHNldDogbm9vcFxufTtcblxuZnVuY3Rpb24gcHJveHkgKHRhcmdldCwgc291cmNlS2V5LCBrZXkpIHtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IGZ1bmN0aW9uIHByb3h5R2V0dGVyICgpIHtcbiAgICByZXR1cm4gdGhpc1tzb3VyY2VLZXldW2tleV1cbiAgfTtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uIHByb3h5U2V0dGVyICh2YWwpIHtcbiAgICB0aGlzW3NvdXJjZUtleV1ba2V5XSA9IHZhbDtcbiAgfTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBpbml0U3RhdGUgKHZtKSB7XG4gIHZtLl93YXRjaGVycyA9IFtdO1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zO1xuICBpZiAob3B0cy5wcm9wcykgeyBpbml0UHJvcHModm0sIG9wdHMucHJvcHMpOyB9XG4gIGlmIChvcHRzLm1ldGhvZHMpIHsgaW5pdE1ldGhvZHModm0sIG9wdHMubWV0aG9kcyk7IH1cbiAgaWYgKG9wdHMuZGF0YSkge1xuICAgIGluaXREYXRhKHZtKTtcbiAgfSBlbHNlIHtcbiAgICBvYnNlcnZlKHZtLl9kYXRhID0ge30sIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG4gIH1cbiAgaWYgKG9wdHMuY29tcHV0ZWQpIHsgaW5pdENvbXB1dGVkKHZtLCBvcHRzLmNvbXB1dGVkKTsgfVxuICBpZiAob3B0cy53YXRjaCAmJiBvcHRzLndhdGNoICE9PSBuYXRpdmVXYXRjaCkge1xuICAgIGluaXRXYXRjaCh2bSwgb3B0cy53YXRjaCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzICh2bSwgcHJvcHNPcHRpb25zKSB7XG4gIHZhciBwcm9wc0RhdGEgPSB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgfHwge307XG4gIHZhciBwcm9wcyA9IHZtLl9wcm9wcyA9IHt9O1xuICAvLyBjYWNoZSBwcm9wIGtleXMgc28gdGhhdCBmdXR1cmUgcHJvcHMgdXBkYXRlcyBjYW4gaXRlcmF0ZSB1c2luZyBBcnJheVxuICAvLyBpbnN0ZWFkIG9mIGR5bmFtaWMgb2JqZWN0IGtleSBlbnVtZXJhdGlvbi5cbiAgdmFyIGtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgPSBbXTtcbiAgdmFyIGlzUm9vdCA9ICF2bS4kcGFyZW50O1xuICAvLyByb290IGluc3RhbmNlIHByb3BzIHNob3VsZCBiZSBjb252ZXJ0ZWRcbiAgaWYgKCFpc1Jvb3QpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICB9XG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gICAgdmFyIHZhbHVlID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcHNPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgaWYgKGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoaHlwaGVuYXRlZEtleSkgfHxcbiAgICAgICAgICBjb25maWcuaXNSZXNlcnZlZEF0dHIoaHlwaGVuYXRlZEtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJcXFwiXCIgKyBoeXBoZW5hdGVkS2V5ICsgXCJcXFwiIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlIGFuZCBjYW5ub3QgYmUgdXNlZCBhcyBjb21wb25lbnQgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghaXNSb290ICYmICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhIHByb3AgZGlyZWN0bHkgc2luY2UgdGhlIHZhbHVlIHdpbGwgYmUgXCIgK1xuICAgICAgICAgICAgXCJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcGFyZW50IGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcIkluc3RlYWQsIHVzZSBhIGRhdGEgb3IgY29tcHV0ZWQgcHJvcGVydHkgYmFzZWQgb24gdGhlIHByb3AncyBcIiArXG4gICAgICAgICAgICBcInZhbHVlLiBQcm9wIGJlaW5nIG11dGF0ZWQ6IFxcXCJcIiArIGtleSArIFwiXFxcIlwiLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVmaW5lUmVhY3RpdmUkJDEocHJvcHMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICAvLyBzdGF0aWMgcHJvcHMgYXJlIGFscmVhZHkgcHJveGllZCBvbiB0aGUgY29tcG9uZW50J3MgcHJvdG90eXBlXG4gICAgLy8gZHVyaW5nIFZ1ZS5leHRlbmQoKS4gV2Ugb25seSBuZWVkIHRvIHByb3h5IHByb3BzIGRlZmluZWQgYXRcbiAgICAvLyBpbnN0YW50aWF0aW9uIGhlcmUuXG4gICAgaWYgKCEoa2V5IGluIHZtKSkge1xuICAgICAgcHJveHkodm0sIFwiX3Byb3BzXCIsIGtleSk7XG4gICAgfVxuICB9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wc09wdGlvbnMpIGxvb3AoIGtleSApO1xuICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGluaXREYXRhICh2bSkge1xuICB2YXIgZGF0YSA9IHZtLiRvcHRpb25zLmRhdGE7XG4gIGRhdGEgPSB2bS5fZGF0YSA9IHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nXG4gICAgPyBnZXREYXRhKGRhdGEsIHZtKVxuICAgIDogZGF0YSB8fCB7fTtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KGRhdGEpKSB7XG4gICAgZGF0YSA9IHt9O1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdkYXRhIGZ1bmN0aW9ucyBzaG91bGQgcmV0dXJuIGFuIG9iamVjdDpcXG4nICtcbiAgICAgICdodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9jb21wb25lbnRzLmh0bWwjZGF0YS1NdXN0LUJlLWEtRnVuY3Rpb24nLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIC8vIHByb3h5IGRhdGEgb24gaW5zdGFuY2VcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhkYXRhKTtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIHZhciBtZXRob2RzID0gdm0uJG9wdGlvbnMubWV0aG9kcztcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAobWV0aG9kcyAmJiBoYXNPd24obWV0aG9kcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgZGF0YSBwcm9wZXJ0eS5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIlRoZSBkYXRhIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlY2xhcmVkIGFzIGEgcHJvcC4gXCIgK1xuICAgICAgICBcIlVzZSBwcm9wIGRlZmF1bHQgdmFsdWUgaW5zdGVhZC5cIixcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICghaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICBwcm94eSh2bSwgXCJfZGF0YVwiLCBrZXkpO1xuICAgIH1cbiAgfVxuICAvLyBvYnNlcnZlIGRhdGFcbiAgb2JzZXJ2ZShkYXRhLCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xufVxuXG5mdW5jdGlvbiBnZXREYXRhIChkYXRhLCB2bSkge1xuICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgZGF0YSBnZXR0ZXJzXG4gIHB1c2hUYXJnZXQoKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGF0YS5jYWxsKHZtLCB2bSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcImRhdGEoKVwiKTtcbiAgICByZXR1cm4ge31cbiAgfSBmaW5hbGx5IHtcbiAgICBwb3BUYXJnZXQoKTtcbiAgfVxufVxuXG52YXIgY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyA9IHsgbGF6eTogdHJ1ZSB9O1xuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQgKHZtLCBjb21wdXRlZCkge1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgdmFyIHdhdGNoZXJzID0gdm0uX2NvbXB1dGVkV2F0Y2hlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyBjb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSBqdXN0IGdldHRlcnMgZHVyaW5nIFNTUlxuICB2YXIgaXNTU1IgPSBpc1NlcnZlclJlbmRlcmluZygpO1xuXG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIHZhciB1c2VyRGVmID0gY29tcHV0ZWRba2V5XTtcbiAgICB2YXIgZ2V0dGVyID0gdHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicgPyB1c2VyRGVmIDogdXNlckRlZi5nZXQ7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZ2V0dGVyID09IG51bGwpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkdldHRlciBpcyBtaXNzaW5nIGZvciBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuXCIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzU1NSKSB7XG4gICAgICAvLyBjcmVhdGUgaW50ZXJuYWwgd2F0Y2hlciBmb3IgdGhlIGNvbXB1dGVkIHByb3BlcnR5LlxuICAgICAgd2F0Y2hlcnNba2V5XSA9IG5ldyBXYXRjaGVyKFxuICAgICAgICB2bSxcbiAgICAgICAgZ2V0dGVyIHx8IG5vb3AsXG4gICAgICAgIG5vb3AsXG4gICAgICAgIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gY29tcG9uZW50LWRlZmluZWQgY29tcHV0ZWQgcHJvcGVydGllcyBhcmUgYWxyZWFkeSBkZWZpbmVkIG9uIHRoZVxuICAgIC8vIGNvbXBvbmVudCBwcm90b3R5cGUuIFdlIG9ubHkgbmVlZCB0byBkZWZpbmUgY29tcHV0ZWQgcHJvcGVydGllcyBkZWZpbmVkXG4gICAgLy8gYXQgaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIGRlZmluZUNvbXB1dGVkKHZtLCBrZXksIHVzZXJEZWYpO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGtleSBpbiB2bS4kZGF0YSkge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGluIGRhdGEuXCIpLCB2bSk7XG4gICAgICB9IGVsc2UgaWYgKHZtLiRvcHRpb25zLnByb3BzICYmIGtleSBpbiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGFzIGEgcHJvcC5cIiksIHZtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmaW5lQ29tcHV0ZWQgKFxuICB0YXJnZXQsXG4gIGtleSxcbiAgdXNlckRlZlxuKSB7XG4gIHZhciBzaG91bGRDYWNoZSA9ICFpc1NlcnZlclJlbmRlcmluZygpO1xuICBpZiAodHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gc2hvdWxkQ2FjaGVcbiAgICAgID8gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIoa2V5KVxuICAgICAgOiBjcmVhdGVHZXR0ZXJJbnZva2VyKHVzZXJEZWYpO1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBub29wO1xuICB9IGVsc2Uge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSB1c2VyRGVmLmdldFxuICAgICAgPyBzaG91bGRDYWNoZSAmJiB1c2VyRGVmLmNhY2hlICE9PSBmYWxzZVxuICAgICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgICAgOiBjcmVhdGVHZXR0ZXJJbnZva2VyKHVzZXJEZWYuZ2V0KVxuICAgICAgOiBub29wO1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSB1c2VyRGVmLnNldCB8fCBub29wO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID09PSBub29wKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiB3YXMgYXNzaWduZWQgdG8gYnV0IGl0IGhhcyBubyBzZXR0ZXIuXCIpLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wdXRlZEdldHRlciAoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgdmFyIHdhdGNoZXIgPSB0aGlzLl9jb21wdXRlZFdhdGNoZXJzICYmIHRoaXMuX2NvbXB1dGVkV2F0Y2hlcnNba2V5XTtcbiAgICBpZiAod2F0Y2hlcikge1xuICAgICAgaWYgKHdhdGNoZXIuZGlydHkpIHtcbiAgICAgICAgd2F0Y2hlci5ldmFsdWF0ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgd2F0Y2hlci5kZXBlbmQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3YXRjaGVyLnZhbHVlXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUdldHRlckludm9rZXIoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVkR2V0dGVyICgpIHtcbiAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCB0aGlzKVxuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRNZXRob2RzICh2bSwgbWV0aG9kcykge1xuICB2YXIgcHJvcHMgPSB2bS4kb3B0aW9ucy5wcm9wcztcbiAgZm9yICh2YXIga2V5IGluIG1ldGhvZHMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiBtZXRob2RzW2tleV0gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIHR5cGUgXFxcIlwiICsgKHR5cGVvZiBtZXRob2RzW2tleV0pICsgXCJcXFwiIGluIHRoZSBjb21wb25lbnQgZGVmaW5pdGlvbi4gXCIgK1xuICAgICAgICAgIFwiRGlkIHlvdSByZWZlcmVuY2UgdGhlIGZ1bmN0aW9uIGNvcnJlY3RseT9cIixcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmICgoa2V5IGluIHZtKSAmJiBpc1Jlc2VydmVkKGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgY29uZmxpY3RzIHdpdGggYW4gZXhpc3RpbmcgVnVlIGluc3RhbmNlIG1ldGhvZC4gXCIgK1xuICAgICAgICAgIFwiQXZvaWQgZGVmaW5pbmcgY29tcG9uZW50IG1ldGhvZHMgdGhhdCBzdGFydCB3aXRoIF8gb3IgJC5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2bVtrZXldID0gdHlwZW9mIG1ldGhvZHNba2V5XSAhPT0gJ2Z1bmN0aW9uJyA/IG5vb3AgOiBiaW5kKG1ldGhvZHNba2V5XSwgdm0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRXYXRjaCAodm0sIHdhdGNoKSB7XG4gIGZvciAodmFyIGtleSBpbiB3YXRjaCkge1xuICAgIHZhciBoYW5kbGVyID0gd2F0Y2hba2V5XTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVyKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYW5kbGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcltpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgaGFuZGxlcixcbiAgb3B0aW9uc1xuKSB7XG4gIGlmIChpc1BsYWluT2JqZWN0KGhhbmRsZXIpKSB7XG4gICAgb3B0aW9ucyA9IGhhbmRsZXI7XG4gICAgaGFuZGxlciA9IGhhbmRsZXIuaGFuZGxlcjtcbiAgfVxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgaGFuZGxlciA9IHZtW2hhbmRsZXJdO1xuICB9XG4gIHJldHVybiB2bS4kd2F0Y2goZXhwT3JGbiwgaGFuZGxlciwgb3B0aW9ucylcbn1cblxuZnVuY3Rpb24gc3RhdGVNaXhpbiAoVnVlKSB7XG4gIC8vIGZsb3cgc29tZWhvdyBoYXMgcHJvYmxlbXMgd2l0aCBkaXJlY3RseSBkZWNsYXJlZCBkZWZpbml0aW9uIG9iamVjdFxuICAvLyB3aGVuIHVzaW5nIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgc28gd2UgaGF2ZSB0byBwcm9jZWR1cmFsbHkgYnVpbGQgdXBcbiAgLy8gdGhlIG9iamVjdCBoZXJlLlxuICB2YXIgZGF0YURlZiA9IHt9O1xuICBkYXRhRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RhdGEgfTtcbiAgdmFyIHByb3BzRGVmID0ge307XG4gIHByb3BzRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3Byb3BzIH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZGF0YURlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnQXZvaWQgcmVwbGFjaW5nIGluc3RhbmNlIHJvb3QgJGRhdGEuICcgK1xuICAgICAgICAnVXNlIG5lc3RlZCBkYXRhIHByb3BlcnRpZXMgaW5zdGVhZC4nLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH07XG4gICAgcHJvcHNEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcIiRwcm9wcyBpcyByZWFkb25seS5cIiwgdGhpcyk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRkYXRhJywgZGF0YURlZik7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHByb3BzJywgcHJvcHNEZWYpO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJHNldCA9IHNldDtcbiAgVnVlLnByb3RvdHlwZS4kZGVsZXRlID0gZGVsO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJHdhdGNoID0gZnVuY3Rpb24gKFxuICAgIGV4cE9yRm4sXG4gICAgY2IsXG4gICAgb3B0aW9uc1xuICApIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChpc1BsYWluT2JqZWN0KGNiKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdhdGNoZXIodm0sIGV4cE9yRm4sIGNiLCBvcHRpb25zKVxuICAgIH1cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBvcHRpb25zLnVzZXIgPSB0cnVlO1xuICAgIHZhciB3YXRjaGVyID0gbmV3IFdhdGNoZXIodm0sIGV4cE9yRm4sIGNiLCBvcHRpb25zKTtcbiAgICBpZiAob3B0aW9ucy5pbW1lZGlhdGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNiLmNhbGwodm0sIHdhdGNoZXIudmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaGFuZGxlRXJyb3IoZXJyb3IsIHZtLCAoXCJjYWxsYmFjayBmb3IgaW1tZWRpYXRlIHdhdGNoZXIgXFxcIlwiICsgKHdhdGNoZXIuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gdW53YXRjaEZuICgpIHtcbiAgICAgIHdhdGNoZXIudGVhcmRvd24oKTtcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgdWlkJDMgPSAwO1xuXG5mdW5jdGlvbiBpbml0TWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIC8vIGEgdWlkXG4gICAgdm0uX3VpZCA9IHVpZCQzKys7XG5cbiAgICB2YXIgc3RhcnRUYWcsIGVuZFRhZztcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgc3RhcnRUYWcgPSBcInZ1ZS1wZXJmLXN0YXJ0OlwiICsgKHZtLl91aWQpO1xuICAgICAgZW5kVGFnID0gXCJ2dWUtcGVyZi1lbmQ6XCIgKyAodm0uX3VpZCk7XG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICB9XG5cbiAgICAvLyBhIGZsYWcgdG8gYXZvaWQgdGhpcyBiZWluZyBvYnNlcnZlZFxuICAgIHZtLl9pc1Z1ZSA9IHRydWU7XG4gICAgLy8gbWVyZ2Ugb3B0aW9uc1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuX2lzQ29tcG9uZW50KSB7XG4gICAgICAvLyBvcHRpbWl6ZSBpbnRlcm5hbCBjb21wb25lbnQgaW5zdGFudGlhdGlvblxuICAgICAgLy8gc2luY2UgZHluYW1pYyBvcHRpb25zIG1lcmdpbmcgaXMgcHJldHR5IHNsb3csIGFuZCBub25lIG9mIHRoZVxuICAgICAgLy8gaW50ZXJuYWwgY29tcG9uZW50IG9wdGlvbnMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQuXG4gICAgICBpbml0SW50ZXJuYWxDb21wb25lbnQodm0sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS4kb3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgICAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyh2bS5jb25zdHJ1Y3RvciksXG4gICAgICAgIG9wdGlvbnMgfHwge30sXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpbml0UHJveHkodm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTtcbiAgICB9XG4gICAgLy8gZXhwb3NlIHJlYWwgc2VsZlxuICAgIHZtLl9zZWxmID0gdm07XG4gICAgaW5pdExpZmVjeWNsZSh2bSk7XG4gICAgaW5pdEV2ZW50cyh2bSk7XG4gICAgaW5pdFJlbmRlcih2bSk7XG4gICAgY2FsbEhvb2sodm0sICdiZWZvcmVDcmVhdGUnKTtcbiAgICBpbml0SW5qZWN0aW9ucyh2bSk7IC8vIHJlc29sdmUgaW5qZWN0aW9ucyBiZWZvcmUgZGF0YS9wcm9wc1xuICAgIGluaXRTdGF0ZSh2bSk7XG4gICAgaW5pdFByb3ZpZGUodm0pOyAvLyByZXNvbHZlIHByb3ZpZGUgYWZ0ZXIgZGF0YS9wcm9wc1xuICAgIGNhbGxIb29rKHZtLCAnY3JlYXRlZCcpO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgIHZtLl9uYW1lID0gZm9ybWF0Q29tcG9uZW50TmFtZSh2bSwgZmFsc2UpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyAodm0uX25hbWUpICsgXCIgaW5pdFwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgfVxuXG4gICAgaWYgKHZtLiRvcHRpb25zLmVsKSB7XG4gICAgICB2bS4kbW91bnQodm0uJG9wdGlvbnMuZWwpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5pdEludGVybmFsQ29tcG9uZW50ICh2bSwgb3B0aW9ucykge1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zID0gT2JqZWN0LmNyZWF0ZSh2bS5jb25zdHJ1Y3Rvci5vcHRpb25zKTtcbiAgLy8gZG9pbmcgdGhpcyBiZWNhdXNlIGl0J3MgZmFzdGVyIHRoYW4gZHluYW1pYyBlbnVtZXJhdGlvbi5cbiAgdmFyIHBhcmVudFZub2RlID0gb3B0aW9ucy5fcGFyZW50Vm5vZGU7XG4gIG9wdHMucGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIG9wdHMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG5cbiAgdmFyIHZub2RlQ29tcG9uZW50T3B0aW9ucyA9IHBhcmVudFZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIG9wdHMucHJvcHNEYXRhID0gdm5vZGVDb21wb25lbnRPcHRpb25zLnByb3BzRGF0YTtcbiAgb3B0cy5fcGFyZW50TGlzdGVuZXJzID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmxpc3RlbmVycztcbiAgb3B0cy5fcmVuZGVyQ2hpbGRyZW4gPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMuY2hpbGRyZW47XG4gIG9wdHMuX2NvbXBvbmVudFRhZyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy50YWc7XG5cbiAgaWYgKG9wdGlvbnMucmVuZGVyKSB7XG4gICAgb3B0cy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlcjtcbiAgICBvcHRzLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIGlmIChDdG9yLnN1cGVyKSB7XG4gICAgdmFyIHN1cGVyT3B0aW9ucyA9IHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvci5zdXBlcik7XG4gICAgdmFyIGNhY2hlZFN1cGVyT3B0aW9ucyA9IEN0b3Iuc3VwZXJPcHRpb25zO1xuICAgIGlmIChzdXBlck9wdGlvbnMgIT09IGNhY2hlZFN1cGVyT3B0aW9ucykge1xuICAgICAgLy8gc3VwZXIgb3B0aW9uIGNoYW5nZWQsXG4gICAgICAvLyBuZWVkIHRvIHJlc29sdmUgbmV3IG9wdGlvbnMuXG4gICAgICBDdG9yLnN1cGVyT3B0aW9ucyA9IHN1cGVyT3B0aW9ucztcbiAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBhbnkgbGF0ZS1tb2RpZmllZC9hdHRhY2hlZCBvcHRpb25zICgjNDk3NilcbiAgICAgIHZhciBtb2RpZmllZE9wdGlvbnMgPSByZXNvbHZlTW9kaWZpZWRPcHRpb25zKEN0b3IpO1xuICAgICAgLy8gdXBkYXRlIGJhc2UgZXh0ZW5kIG9wdGlvbnNcbiAgICAgIGlmIChtb2RpZmllZE9wdGlvbnMpIHtcbiAgICAgICAgZXh0ZW5kKEN0b3IuZXh0ZW5kT3B0aW9ucywgbW9kaWZpZWRPcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoc3VwZXJPcHRpb25zLCBDdG9yLmV4dGVuZE9wdGlvbnMpO1xuICAgICAgaWYgKG9wdGlvbnMubmFtZSkge1xuICAgICAgICBvcHRpb25zLmNvbXBvbmVudHNbb3B0aW9ucy5uYW1lXSA9IEN0b3I7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVNb2RpZmllZE9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG1vZGlmaWVkO1xuICB2YXIgbGF0ZXN0ID0gQ3Rvci5vcHRpb25zO1xuICB2YXIgc2VhbGVkID0gQ3Rvci5zZWFsZWRPcHRpb25zO1xuICBmb3IgKHZhciBrZXkgaW4gbGF0ZXN0KSB7XG4gICAgaWYgKGxhdGVzdFtrZXldICE9PSBzZWFsZWRba2V5XSkge1xuICAgICAgaWYgKCFtb2RpZmllZCkgeyBtb2RpZmllZCA9IHt9OyB9XG4gICAgICBtb2RpZmllZFtrZXldID0gbGF0ZXN0W2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiBtb2RpZmllZFxufVxuXG5mdW5jdGlvbiBWdWUgKG9wdGlvbnMpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAhKHRoaXMgaW5zdGFuY2VvZiBWdWUpXG4gICkge1xuICAgIHdhcm4oJ1Z1ZSBpcyBhIGNvbnN0cnVjdG9yIGFuZCBzaG91bGQgYmUgY2FsbGVkIHdpdGggdGhlIGBuZXdgIGtleXdvcmQnKTtcbiAgfVxuICB0aGlzLl9pbml0KG9wdGlvbnMpO1xufVxuXG5pbml0TWl4aW4oVnVlKTtcbnN0YXRlTWl4aW4oVnVlKTtcbmV2ZW50c01peGluKFZ1ZSk7XG5saWZlY3ljbGVNaXhpbihWdWUpO1xucmVuZGVyTWl4aW4oVnVlKTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRVc2UgKFZ1ZSkge1xuICBWdWUudXNlID0gZnVuY3Rpb24gKHBsdWdpbikge1xuICAgIHZhciBpbnN0YWxsZWRQbHVnaW5zID0gKHRoaXMuX2luc3RhbGxlZFBsdWdpbnMgfHwgKHRoaXMuX2luc3RhbGxlZFBsdWdpbnMgPSBbXSkpO1xuICAgIGlmIChpbnN0YWxsZWRQbHVnaW5zLmluZGV4T2YocGx1Z2luKSA+IC0xKSB7XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8vIGFkZGl0aW9uYWwgcGFyYW1ldGVyc1xuICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgIGFyZ3MudW5zaGlmdCh0aGlzKTtcbiAgICBpZiAodHlwZW9mIHBsdWdpbi5pbnN0YWxsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwbHVnaW4uaW5zdGFsbC5hcHBseShwbHVnaW4sIGFyZ3MpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHBsdWdpbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH1cbiAgICBpbnN0YWxsZWRQbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgICByZXR1cm4gdGhpc1xuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdE1peGluJDEgKFZ1ZSkge1xuICBWdWUubWl4aW4gPSBmdW5jdGlvbiAobWl4aW4pIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnModGhpcy5vcHRpb25zLCBtaXhpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFeHRlbmQgKFZ1ZSkge1xuICAvKipcbiAgICogRWFjaCBpbnN0YW5jZSBjb25zdHJ1Y3RvciwgaW5jbHVkaW5nIFZ1ZSwgaGFzIGEgdW5pcXVlXG4gICAqIGNpZC4gVGhpcyBlbmFibGVzIHVzIHRvIGNyZWF0ZSB3cmFwcGVkIFwiY2hpbGRcbiAgICogY29uc3RydWN0b3JzXCIgZm9yIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UgYW5kIGNhY2hlIHRoZW0uXG4gICAqL1xuICBWdWUuY2lkID0gMDtcbiAgdmFyIGNpZCA9IDE7XG5cbiAgLyoqXG4gICAqIENsYXNzIGluaGVyaXRhbmNlXG4gICAqL1xuICBWdWUuZXh0ZW5kID0gZnVuY3Rpb24gKGV4dGVuZE9wdGlvbnMpIHtcbiAgICBleHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgU3VwZXIgPSB0aGlzO1xuICAgIHZhciBTdXBlcklkID0gU3VwZXIuY2lkO1xuICAgIHZhciBjYWNoZWRDdG9ycyA9IGV4dGVuZE9wdGlvbnMuX0N0b3IgfHwgKGV4dGVuZE9wdGlvbnMuX0N0b3IgPSB7fSk7XG4gICAgaWYgKGNhY2hlZEN0b3JzW1N1cGVySWRdKSB7XG4gICAgICByZXR1cm4gY2FjaGVkQ3RvcnNbU3VwZXJJZF1cbiAgICB9XG5cbiAgICB2YXIgbmFtZSA9IGV4dGVuZE9wdGlvbnMubmFtZSB8fCBTdXBlci5vcHRpb25zLm5hbWU7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgbmFtZSkge1xuICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWUpO1xuICAgIH1cblxuICAgIHZhciBTdWIgPSBmdW5jdGlvbiBWdWVDb21wb25lbnQgKG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuX2luaXQob3B0aW9ucyk7XG4gICAgfTtcbiAgICBTdWIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTdXBlci5wcm90b3R5cGUpO1xuICAgIFN1Yi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTdWI7XG4gICAgU3ViLmNpZCA9IGNpZCsrO1xuICAgIFN1Yi5vcHRpb25zID0gbWVyZ2VPcHRpb25zKFxuICAgICAgU3VwZXIub3B0aW9ucyxcbiAgICAgIGV4dGVuZE9wdGlvbnNcbiAgICApO1xuICAgIFN1Ylsnc3VwZXInXSA9IFN1cGVyO1xuXG4gICAgLy8gRm9yIHByb3BzIGFuZCBjb21wdXRlZCBwcm9wZXJ0aWVzLCB3ZSBkZWZpbmUgdGhlIHByb3h5IGdldHRlcnMgb25cbiAgICAvLyB0aGUgVnVlIGluc3RhbmNlcyBhdCBleHRlbnNpb24gdGltZSwgb24gdGhlIGV4dGVuZGVkIHByb3RvdHlwZS4gVGhpc1xuICAgIC8vIGF2b2lkcyBPYmplY3QuZGVmaW5lUHJvcGVydHkgY2FsbHMgZm9yIGVhY2ggaW5zdGFuY2UgY3JlYXRlZC5cbiAgICBpZiAoU3ViLm9wdGlvbnMucHJvcHMpIHtcbiAgICAgIGluaXRQcm9wcyQxKFN1Yik7XG4gICAgfVxuICAgIGlmIChTdWIub3B0aW9ucy5jb21wdXRlZCkge1xuICAgICAgaW5pdENvbXB1dGVkJDEoU3ViKTtcbiAgICB9XG5cbiAgICAvLyBhbGxvdyBmdXJ0aGVyIGV4dGVuc2lvbi9taXhpbi9wbHVnaW4gdXNhZ2VcbiAgICBTdWIuZXh0ZW5kID0gU3VwZXIuZXh0ZW5kO1xuICAgIFN1Yi5taXhpbiA9IFN1cGVyLm1peGluO1xuICAgIFN1Yi51c2UgPSBTdXBlci51c2U7XG5cbiAgICAvLyBjcmVhdGUgYXNzZXQgcmVnaXN0ZXJzLCBzbyBleHRlbmRlZCBjbGFzc2VzXG4gICAgLy8gY2FuIGhhdmUgdGhlaXIgcHJpdmF0ZSBhc3NldHMgdG9vLlxuICAgIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIFN1Ylt0eXBlXSA9IFN1cGVyW3R5cGVdO1xuICAgIH0pO1xuICAgIC8vIGVuYWJsZSByZWN1cnNpdmUgc2VsZi1sb29rdXBcbiAgICBpZiAobmFtZSkge1xuICAgICAgU3ViLm9wdGlvbnMuY29tcG9uZW50c1tuYW1lXSA9IFN1YjtcbiAgICB9XG5cbiAgICAvLyBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBzdXBlciBvcHRpb25zIGF0IGV4dGVuc2lvbiB0aW1lLlxuICAgIC8vIGxhdGVyIGF0IGluc3RhbnRpYXRpb24gd2UgY2FuIGNoZWNrIGlmIFN1cGVyJ3Mgb3B0aW9ucyBoYXZlXG4gICAgLy8gYmVlbiB1cGRhdGVkLlxuICAgIFN1Yi5zdXBlck9wdGlvbnMgPSBTdXBlci5vcHRpb25zO1xuICAgIFN1Yi5leHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucztcbiAgICBTdWIuc2VhbGVkT3B0aW9ucyA9IGV4dGVuZCh7fSwgU3ViLm9wdGlvbnMpO1xuXG4gICAgLy8gY2FjaGUgY29uc3RydWN0b3JcbiAgICBjYWNoZWRDdG9yc1tTdXBlcklkXSA9IFN1YjtcbiAgICByZXR1cm4gU3ViXG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyQxIChDb21wKSB7XG4gIHZhciBwcm9wcyA9IENvbXAub3B0aW9ucy5wcm9wcztcbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgcHJveHkoQ29tcC5wcm90b3R5cGUsIFwiX3Byb3BzXCIsIGtleSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkJDEgKENvbXApIHtcbiAgdmFyIGNvbXB1dGVkID0gQ29tcC5vcHRpb25zLmNvbXB1dGVkO1xuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICBkZWZpbmVDb21wdXRlZChDb21wLnByb3RvdHlwZSwga2V5LCBjb21wdXRlZFtrZXldKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEFzc2V0UmVnaXN0ZXJzIChWdWUpIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhc3NldCByZWdpc3RyYXRpb24gbWV0aG9kcy5cbiAgICovXG4gIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBWdWVbdHlwZV0gPSBmdW5jdGlvbiAoXG4gICAgICBpZCxcbiAgICAgIGRlZmluaXRpb25cbiAgICApIHtcbiAgICAgIGlmICghZGVmaW5pdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGUgPT09ICdjb21wb25lbnQnKSB7XG4gICAgICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGlkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2NvbXBvbmVudCcgJiYgaXNQbGFpbk9iamVjdChkZWZpbml0aW9uKSkge1xuICAgICAgICAgIGRlZmluaXRpb24ubmFtZSA9IGRlZmluaXRpb24ubmFtZSB8fCBpZDtcbiAgICAgICAgICBkZWZpbml0aW9uID0gdGhpcy5vcHRpb25zLl9iYXNlLmV4dGVuZChkZWZpbml0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2RpcmVjdGl2ZScgJiYgdHlwZW9mIGRlZmluaXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBkZWZpbml0aW9uID0geyBiaW5kOiBkZWZpbml0aW9uLCB1cGRhdGU6IGRlZmluaXRpb24gfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdID0gZGVmaW5pdGlvbjtcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb25cbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbn1cblxuLyogICovXG5cblxuXG5mdW5jdGlvbiBnZXRDb21wb25lbnROYW1lIChvcHRzKSB7XG4gIHJldHVybiBvcHRzICYmIChvcHRzLkN0b3Iub3B0aW9ucy5uYW1lIHx8IG9wdHMudGFnKVxufVxuXG5mdW5jdGlvbiBtYXRjaGVzIChwYXR0ZXJuLCBuYW1lKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHBhdHRlcm4pKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4uaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAodHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4uc3BsaXQoJywnKS5pbmRleE9mKG5hbWUpID4gLTFcbiAgfSBlbHNlIGlmIChpc1JlZ0V4cChwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobmFtZSlcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gcHJ1bmVDYWNoZSAoa2VlcEFsaXZlSW5zdGFuY2UsIGZpbHRlcikge1xuICB2YXIgY2FjaGUgPSBrZWVwQWxpdmVJbnN0YW5jZS5jYWNoZTtcbiAgdmFyIGtleXMgPSBrZWVwQWxpdmVJbnN0YW5jZS5rZXlzO1xuICB2YXIgX3Zub2RlID0ga2VlcEFsaXZlSW5zdGFuY2UuX3Zub2RlO1xuICBmb3IgKHZhciBrZXkgaW4gY2FjaGUpIHtcbiAgICB2YXIgY2FjaGVkTm9kZSA9IGNhY2hlW2tleV07XG4gICAgaWYgKGNhY2hlZE5vZGUpIHtcbiAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjYWNoZWROb2RlLmNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgaWYgKG5hbWUgJiYgIWZpbHRlcihuYW1lKSkge1xuICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleSwga2V5cywgX3Zub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJ1bmVDYWNoZUVudHJ5IChcbiAgY2FjaGUsXG4gIGtleSxcbiAga2V5cyxcbiAgY3VycmVudFxuKSB7XG4gIHZhciBjYWNoZWQkJDEgPSBjYWNoZVtrZXldO1xuICBpZiAoY2FjaGVkJCQxICYmICghY3VycmVudCB8fCBjYWNoZWQkJDEudGFnICE9PSBjdXJyZW50LnRhZykpIHtcbiAgICBjYWNoZWQkJDEuY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgfVxuICBjYWNoZVtrZXldID0gbnVsbDtcbiAgcmVtb3ZlKGtleXMsIGtleSk7XG59XG5cbnZhciBwYXR0ZXJuVHlwZXMgPSBbU3RyaW5nLCBSZWdFeHAsIEFycmF5XTtcblxudmFyIEtlZXBBbGl2ZSA9IHtcbiAgbmFtZTogJ2tlZXAtYWxpdmUnLFxuICBhYnN0cmFjdDogdHJ1ZSxcblxuICBwcm9wczoge1xuICAgIGluY2x1ZGU6IHBhdHRlcm5UeXBlcyxcbiAgICBleGNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgbWF4OiBbU3RyaW5nLCBOdW1iZXJdXG4gIH0sXG5cbiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCAoKSB7XG4gICAgdGhpcy5jYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5rZXlzID0gW107XG4gIH0sXG5cbiAgZGVzdHJveWVkOiBmdW5jdGlvbiBkZXN0cm95ZWQgKCkge1xuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLmNhY2hlKSB7XG4gICAgICBwcnVuZUNhY2hlRW50cnkodGhpcy5jYWNoZSwga2V5LCB0aGlzLmtleXMpO1xuICAgIH1cbiAgfSxcblxuICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHRoaXMuJHdhdGNoKCdpbmNsdWRlJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzJDEsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBtYXRjaGVzKHZhbCwgbmFtZSk7IH0pO1xuICAgIH0pO1xuICAgIHRoaXMuJHdhdGNoKCdleGNsdWRlJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzJDEsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiAhbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoKSB7XG4gICAgdmFyIHNsb3QgPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgIHZhciB2bm9kZSA9IGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoc2xvdCk7XG4gICAgdmFyIGNvbXBvbmVudE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIGlmIChjb21wb25lbnRPcHRpb25zKSB7XG4gICAgICAvLyBjaGVjayBwYXR0ZXJuXG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50T3B0aW9ucyk7XG4gICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgIHZhciBpbmNsdWRlID0gcmVmLmluY2x1ZGU7XG4gICAgICB2YXIgZXhjbHVkZSA9IHJlZi5leGNsdWRlO1xuICAgICAgaWYgKFxuICAgICAgICAvLyBub3QgaW5jbHVkZWRcbiAgICAgICAgKGluY2x1ZGUgJiYgKCFuYW1lIHx8ICFtYXRjaGVzKGluY2x1ZGUsIG5hbWUpKSkgfHxcbiAgICAgICAgLy8gZXhjbHVkZWRcbiAgICAgICAgKGV4Y2x1ZGUgJiYgbmFtZSAmJiBtYXRjaGVzKGV4Y2x1ZGUsIG5hbWUpKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB2bm9kZVxuICAgICAgfVxuXG4gICAgICB2YXIgcmVmJDEgPSB0aGlzO1xuICAgICAgdmFyIGNhY2hlID0gcmVmJDEuY2FjaGU7XG4gICAgICB2YXIga2V5cyA9IHJlZiQxLmtleXM7XG4gICAgICB2YXIga2V5ID0gdm5vZGUua2V5ID09IG51bGxcbiAgICAgICAgLy8gc2FtZSBjb25zdHJ1Y3RvciBtYXkgZ2V0IHJlZ2lzdGVyZWQgYXMgZGlmZmVyZW50IGxvY2FsIGNvbXBvbmVudHNcbiAgICAgICAgLy8gc28gY2lkIGFsb25lIGlzIG5vdCBlbm91Z2ggKCMzMjY5KVxuICAgICAgICA/IGNvbXBvbmVudE9wdGlvbnMuQ3Rvci5jaWQgKyAoY29tcG9uZW50T3B0aW9ucy50YWcgPyAoXCI6OlwiICsgKGNvbXBvbmVudE9wdGlvbnMudGFnKSkgOiAnJylcbiAgICAgICAgOiB2bm9kZS5rZXk7XG4gICAgICBpZiAoY2FjaGVba2V5XSkge1xuICAgICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNhY2hlW2tleV0uY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICAgIC8vIG1ha2UgY3VycmVudCBrZXkgZnJlc2hlc3RcbiAgICAgICAgcmVtb3ZlKGtleXMsIGtleSk7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FjaGVba2V5XSA9IHZub2RlO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgLy8gcHJ1bmUgb2xkZXN0IGVudHJ5XG4gICAgICAgIGlmICh0aGlzLm1heCAmJiBrZXlzLmxlbmd0aCA+IHBhcnNlSW50KHRoaXMubWF4KSkge1xuICAgICAgICAgIHBydW5lQ2FjaGVFbnRyeShjYWNoZSwga2V5c1swXSwga2V5cywgdGhpcy5fdm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZub2RlIHx8IChzbG90ICYmIHNsb3RbMF0pXG4gIH1cbn07XG5cbnZhciBidWlsdEluQ29tcG9uZW50cyA9IHtcbiAgS2VlcEFsaXZlOiBLZWVwQWxpdmVcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0R2xvYmFsQVBJIChWdWUpIHtcbiAgLy8gY29uZmlnXG4gIHZhciBjb25maWdEZWYgPSB7fTtcbiAgY29uZmlnRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbmZpZzsgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjb25maWdEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0RvIG5vdCByZXBsYWNlIHRoZSBWdWUuY29uZmlnIG9iamVjdCwgc2V0IGluZGl2aWR1YWwgZmllbGRzIGluc3RlYWQuJ1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdjb25maWcnLCBjb25maWdEZWYpO1xuXG4gIC8vIGV4cG9zZWQgdXRpbCBtZXRob2RzLlxuICAvLyBOT1RFOiB0aGVzZSBhcmUgbm90IGNvbnNpZGVyZWQgcGFydCBvZiB0aGUgcHVibGljIEFQSSAtIGF2b2lkIHJlbHlpbmcgb25cbiAgLy8gdGhlbSB1bmxlc3MgeW91IGFyZSBhd2FyZSBvZiB0aGUgcmlzay5cbiAgVnVlLnV0aWwgPSB7XG4gICAgd2Fybjogd2FybixcbiAgICBleHRlbmQ6IGV4dGVuZCxcbiAgICBtZXJnZU9wdGlvbnM6IG1lcmdlT3B0aW9ucyxcbiAgICBkZWZpbmVSZWFjdGl2ZTogZGVmaW5lUmVhY3RpdmUkJDFcbiAgfTtcblxuICBWdWUuc2V0ID0gc2V0O1xuICBWdWUuZGVsZXRlID0gZGVsO1xuICBWdWUubmV4dFRpY2sgPSBuZXh0VGljaztcblxuICAvLyAyLjYgZXhwbGljaXQgb2JzZXJ2YWJsZSBBUElcbiAgVnVlLm9ic2VydmFibGUgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgb2JzZXJ2ZShvYmopO1xuICAgIHJldHVybiBvYmpcbiAgfTtcblxuICBWdWUub3B0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBWdWUub3B0aW9uc1t0eXBlICsgJ3MnXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH0pO1xuXG4gIC8vIHRoaXMgaXMgdXNlZCB0byBpZGVudGlmeSB0aGUgXCJiYXNlXCIgY29uc3RydWN0b3IgdG8gZXh0ZW5kIGFsbCBwbGFpbi1vYmplY3RcbiAgLy8gY29tcG9uZW50cyB3aXRoIGluIFdlZXgncyBtdWx0aS1pbnN0YW5jZSBzY2VuYXJpb3MuXG4gIFZ1ZS5vcHRpb25zLl9iYXNlID0gVnVlO1xuXG4gIGV4dGVuZChWdWUub3B0aW9ucy5jb21wb25lbnRzLCBidWlsdEluQ29tcG9uZW50cyk7XG5cbiAgaW5pdFVzZShWdWUpO1xuICBpbml0TWl4aW4kMShWdWUpO1xuICBpbml0RXh0ZW5kKFZ1ZSk7XG4gIGluaXRBc3NldFJlZ2lzdGVycyhWdWUpO1xufVxuXG5pbml0R2xvYmFsQVBJKFZ1ZSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGlzU2VydmVyJywge1xuICBnZXQ6IGlzU2VydmVyUmVuZGVyaW5nXG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckc3NyQ29udGV4dCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcmV0dXJuIHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHRcbiAgfVxufSk7XG5cbi8vIGV4cG9zZSBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCBmb3Igc3NyIHJ1bnRpbWUgaGVscGVyIGluc3RhbGxhdGlvblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZSwgJ0Z1bmN0aW9uYWxSZW5kZXJDb250ZXh0Jywge1xuICB2YWx1ZTogRnVuY3Rpb25hbFJlbmRlckNvbnRleHRcbn0pO1xuXG5WdWUudmVyc2lvbiA9ICcyLjYuMTInO1xuXG4vKiAgKi9cblxuLy8gdGhlc2UgYXJlIHJlc2VydmVkIGZvciB3ZWIgYmVjYXVzZSB0aGV5IGFyZSBkaXJlY3RseSBjb21waWxlZCBhd2F5XG4vLyBkdXJpbmcgdGVtcGxhdGUgY29tcGlsYXRpb25cbnZhciBpc1Jlc2VydmVkQXR0ciA9IG1ha2VNYXAoJ3N0eWxlLGNsYXNzJyk7XG5cbi8vIGF0dHJpYnV0ZXMgdGhhdCBzaG91bGQgYmUgdXNpbmcgcHJvcHMgZm9yIGJpbmRpbmdcbnZhciBhY2NlcHRWYWx1ZSA9IG1ha2VNYXAoJ2lucHV0LHRleHRhcmVhLG9wdGlvbixzZWxlY3QscHJvZ3Jlc3MnKTtcbnZhciBtdXN0VXNlUHJvcCA9IGZ1bmN0aW9uICh0YWcsIHR5cGUsIGF0dHIpIHtcbiAgcmV0dXJuIChcbiAgICAoYXR0ciA9PT0gJ3ZhbHVlJyAmJiBhY2NlcHRWYWx1ZSh0YWcpKSAmJiB0eXBlICE9PSAnYnV0dG9uJyB8fFxuICAgIChhdHRyID09PSAnc2VsZWN0ZWQnICYmIHRhZyA9PT0gJ29wdGlvbicpIHx8XG4gICAgKGF0dHIgPT09ICdjaGVja2VkJyAmJiB0YWcgPT09ICdpbnB1dCcpIHx8XG4gICAgKGF0dHIgPT09ICdtdXRlZCcgJiYgdGFnID09PSAndmlkZW8nKVxuICApXG59O1xuXG52YXIgaXNFbnVtZXJhdGVkQXR0ciA9IG1ha2VNYXAoJ2NvbnRlbnRlZGl0YWJsZSxkcmFnZ2FibGUsc3BlbGxjaGVjaycpO1xuXG52YXIgaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlID0gbWFrZU1hcCgnZXZlbnRzLGNhcmV0LHR5cGluZyxwbGFpbnRleHQtb25seScpO1xuXG52YXIgY29udmVydEVudW1lcmF0ZWRWYWx1ZSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSB8fCB2YWx1ZSA9PT0gJ2ZhbHNlJ1xuICAgID8gJ2ZhbHNlJ1xuICAgIC8vIGFsbG93IGFyYml0cmFyeSBzdHJpbmcgdmFsdWUgZm9yIGNvbnRlbnRlZGl0YWJsZVxuICAgIDoga2V5ID09PSAnY29udGVudGVkaXRhYmxlJyAmJiBpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUodmFsdWUpXG4gICAgICA/IHZhbHVlXG4gICAgICA6ICd0cnVlJ1xufTtcblxudmFyIGlzQm9vbGVhbkF0dHIgPSBtYWtlTWFwKFxuICAnYWxsb3dmdWxsc2NyZWVuLGFzeW5jLGF1dG9mb2N1cyxhdXRvcGxheSxjaGVja2VkLGNvbXBhY3QsY29udHJvbHMsZGVjbGFyZSwnICtcbiAgJ2RlZmF1bHQsZGVmYXVsdGNoZWNrZWQsZGVmYXVsdG11dGVkLGRlZmF1bHRzZWxlY3RlZCxkZWZlcixkaXNhYmxlZCwnICtcbiAgJ2VuYWJsZWQsZm9ybW5vdmFsaWRhdGUsaGlkZGVuLGluZGV0ZXJtaW5hdGUsaW5lcnQsaXNtYXAsaXRlbXNjb3BlLGxvb3AsbXVsdGlwbGUsJyArXG4gICdtdXRlZCxub2hyZWYsbm9yZXNpemUsbm9zaGFkZSxub3ZhbGlkYXRlLG5vd3JhcCxvcGVuLHBhdXNlb25leGl0LHJlYWRvbmx5LCcgK1xuICAncmVxdWlyZWQscmV2ZXJzZWQsc2NvcGVkLHNlYW1sZXNzLHNlbGVjdGVkLHNvcnRhYmxlLHRyYW5zbGF0ZSwnICtcbiAgJ3RydWVzcGVlZCx0eXBlbXVzdG1hdGNoLHZpc2libGUnXG4pO1xuXG52YXIgeGxpbmtOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJztcblxudmFyIGlzWGxpbmsgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gbmFtZS5jaGFyQXQoNSkgPT09ICc6JyAmJiBuYW1lLnNsaWNlKDAsIDUpID09PSAneGxpbmsnXG59O1xuXG52YXIgZ2V0WGxpbmtQcm9wID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIGlzWGxpbmsobmFtZSkgPyBuYW1lLnNsaWNlKDYsIG5hbWUubGVuZ3RoKSA6ICcnXG59O1xuXG52YXIgaXNGYWxzeUF0dHJWYWx1ZSA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PSBudWxsIHx8IHZhbCA9PT0gZmFsc2Vcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBnZW5DbGFzc0ZvclZub2RlICh2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBwYXJlbnROb2RlID0gdm5vZGU7XG4gIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKGlzRGVmKGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIGlmIChjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShjaGlsZE5vZGUuZGF0YSwgZGF0YSk7XG4gICAgfVxuICB9XG4gIHdoaWxlIChpc0RlZihwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUgJiYgcGFyZW50Tm9kZS5kYXRhKSB7XG4gICAgICBkYXRhID0gbWVyZ2VDbGFzc0RhdGEoZGF0YSwgcGFyZW50Tm9kZS5kYXRhKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlbmRlckNsYXNzKGRhdGEuc3RhdGljQ2xhc3MsIGRhdGEuY2xhc3MpXG59XG5cbmZ1bmN0aW9uIG1lcmdlQ2xhc3NEYXRhIChjaGlsZCwgcGFyZW50KSB7XG4gIHJldHVybiB7XG4gICAgc3RhdGljQ2xhc3M6IGNvbmNhdChjaGlsZC5zdGF0aWNDbGFzcywgcGFyZW50LnN0YXRpY0NsYXNzKSxcbiAgICBjbGFzczogaXNEZWYoY2hpbGQuY2xhc3MpXG4gICAgICA/IFtjaGlsZC5jbGFzcywgcGFyZW50LmNsYXNzXVxuICAgICAgOiBwYXJlbnQuY2xhc3NcbiAgfVxufVxuXG5mdW5jdGlvbiByZW5kZXJDbGFzcyAoXG4gIHN0YXRpY0NsYXNzLFxuICBkeW5hbWljQ2xhc3Ncbikge1xuICBpZiAoaXNEZWYoc3RhdGljQ2xhc3MpIHx8IGlzRGVmKGR5bmFtaWNDbGFzcykpIHtcbiAgICByZXR1cm4gY29uY2F0KHN0YXRpY0NsYXNzLCBzdHJpbmdpZnlDbGFzcyhkeW5hbWljQ2xhc3MpKVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiAnJ1xufVxuXG5mdW5jdGlvbiBjb25jYXQgKGEsIGIpIHtcbiAgcmV0dXJuIGEgPyBiID8gKGEgKyAnICcgKyBiKSA6IGEgOiAoYiB8fCAnJylcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5Q2xhc3MgKHZhbHVlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlBcnJheSh2YWx1ZSlcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeU9iamVjdCh2YWx1ZSlcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiAnJ1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlBcnJheSAodmFsdWUpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgc3RyaW5naWZpZWQ7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKGlzRGVmKHN0cmluZ2lmaWVkID0gc3RyaW5naWZ5Q2xhc3ModmFsdWVbaV0pKSAmJiBzdHJpbmdpZmllZCAhPT0gJycpIHtcbiAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgcmVzICs9IHN0cmluZ2lmaWVkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeU9iamVjdCAodmFsdWUpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAodmFsdWVba2V5XSkge1xuICAgICAgaWYgKHJlcykgeyByZXMgKz0gJyAnOyB9XG4gICAgICByZXMgKz0ga2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgbmFtZXNwYWNlTWFwID0ge1xuICBzdmc6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsXG4gIG1hdGg6ICdodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MJ1xufTtcblxudmFyIGlzSFRNTFRhZyA9IG1ha2VNYXAoXG4gICdodG1sLGJvZHksYmFzZSxoZWFkLGxpbmssbWV0YSxzdHlsZSx0aXRsZSwnICtcbiAgJ2FkZHJlc3MsYXJ0aWNsZSxhc2lkZSxmb290ZXIsaGVhZGVyLGgxLGgyLGgzLGg0LGg1LGg2LGhncm91cCxuYXYsc2VjdGlvbiwnICtcbiAgJ2RpdixkZCxkbCxkdCxmaWdjYXB0aW9uLGZpZ3VyZSxwaWN0dXJlLGhyLGltZyxsaSxtYWluLG9sLHAscHJlLHVsLCcgK1xuICAnYSxiLGFiYnIsYmRpLGJkbyxicixjaXRlLGNvZGUsZGF0YSxkZm4sZW0saSxrYmQsbWFyayxxLHJwLHJ0LHJ0YyxydWJ5LCcgK1xuICAncyxzYW1wLHNtYWxsLHNwYW4sc3Ryb25nLHN1YixzdXAsdGltZSx1LHZhcix3YnIsYXJlYSxhdWRpbyxtYXAsdHJhY2ssdmlkZW8sJyArXG4gICdlbWJlZCxvYmplY3QscGFyYW0sc291cmNlLGNhbnZhcyxzY3JpcHQsbm9zY3JpcHQsZGVsLGlucywnICtcbiAgJ2NhcHRpb24sY29sLGNvbGdyb3VwLHRhYmxlLHRoZWFkLHRib2R5LHRkLHRoLHRyLCcgK1xuICAnYnV0dG9uLGRhdGFsaXN0LGZpZWxkc2V0LGZvcm0saW5wdXQsbGFiZWwsbGVnZW5kLG1ldGVyLG9wdGdyb3VwLG9wdGlvbiwnICtcbiAgJ291dHB1dCxwcm9ncmVzcyxzZWxlY3QsdGV4dGFyZWEsJyArXG4gICdkZXRhaWxzLGRpYWxvZyxtZW51LG1lbnVpdGVtLHN1bW1hcnksJyArXG4gICdjb250ZW50LGVsZW1lbnQsc2hhZG93LHRlbXBsYXRlLGJsb2NrcXVvdGUsaWZyYW1lLHRmb290J1xuKTtcblxuLy8gdGhpcyBtYXAgaXMgaW50ZW50aW9uYWxseSBzZWxlY3RpdmUsIG9ubHkgY292ZXJpbmcgU1ZHIGVsZW1lbnRzIHRoYXQgbWF5XG4vLyBjb250YWluIGNoaWxkIGVsZW1lbnRzLlxudmFyIGlzU1ZHID0gbWFrZU1hcChcbiAgJ3N2ZyxhbmltYXRlLGNpcmNsZSxjbGlwcGF0aCxjdXJzb3IsZGVmcyxkZXNjLGVsbGlwc2UsZmlsdGVyLGZvbnQtZmFjZSwnICtcbiAgJ2ZvcmVpZ25PYmplY3QsZyxnbHlwaCxpbWFnZSxsaW5lLG1hcmtlcixtYXNrLG1pc3NpbmctZ2x5cGgscGF0aCxwYXR0ZXJuLCcgK1xuICAncG9seWdvbixwb2x5bGluZSxyZWN0LHN3aXRjaCxzeW1ib2wsdGV4dCx0ZXh0cGF0aCx0c3Bhbix1c2UsdmlldycsXG4gIHRydWVcbik7XG5cbnZhciBpc1Jlc2VydmVkVGFnID0gZnVuY3Rpb24gKHRhZykge1xuICByZXR1cm4gaXNIVE1MVGFnKHRhZykgfHwgaXNTVkcodGFnKVxufTtcblxuZnVuY3Rpb24gZ2V0VGFnTmFtZXNwYWNlICh0YWcpIHtcbiAgaWYgKGlzU1ZHKHRhZykpIHtcbiAgICByZXR1cm4gJ3N2ZydcbiAgfVxuICAvLyBiYXNpYyBzdXBwb3J0IGZvciBNYXRoTUxcbiAgLy8gbm90ZSBpdCBkb2Vzbid0IHN1cHBvcnQgb3RoZXIgTWF0aE1MIGVsZW1lbnRzIGJlaW5nIGNvbXBvbmVudCByb290c1xuICBpZiAodGFnID09PSAnbWF0aCcpIHtcbiAgICByZXR1cm4gJ21hdGgnXG4gIH1cbn1cblxudmFyIHVua25vd25FbGVtZW50Q2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCAodGFnKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWluQnJvd3Nlcikge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgaWYgKGlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHRhZyA9IHRhZy50b0xvd2VyQ2FzZSgpO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHVua25vd25FbGVtZW50Q2FjaGVbdGFnXVxuICB9XG4gIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtcbiAgaWYgKHRhZy5pbmRleE9mKCctJykgPiAtMSkge1xuICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI4MjEwMzY0LzEwNzAyNDRcbiAgICByZXR1cm4gKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSA9IChcbiAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTFVua25vd25FbGVtZW50IHx8XG4gICAgICBlbC5jb25zdHJ1Y3RvciA9PT0gd2luZG93LkhUTUxFbGVtZW50XG4gICAgKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSA9IC9IVE1MVW5rbm93bkVsZW1lbnQvLnRlc3QoZWwudG9TdHJpbmcoKSkpXG4gIH1cbn1cblxudmFyIGlzVGV4dElucHV0VHlwZSA9IG1ha2VNYXAoJ3RleHQsbnVtYmVyLHBhc3N3b3JkLHNlYXJjaCxlbWFpbCx0ZWwsdXJsJyk7XG5cbi8qICAqL1xuXG4vKipcbiAqIFF1ZXJ5IGFuIGVsZW1lbnQgc2VsZWN0b3IgaWYgaXQncyBub3QgYW4gZWxlbWVudCBhbHJlYWR5LlxuICovXG5mdW5jdGlvbiBxdWVyeSAoZWwpIHtcbiAgaWYgKHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgc2VsZWN0ZWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsKTtcbiAgICBpZiAoIXNlbGVjdGVkKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICdDYW5ub3QgZmluZCBlbGVtZW50OiAnICsgZWxcbiAgICAgICk7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICB9XG4gICAgcmV0dXJuIHNlbGVjdGVkXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGVsXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQkMSAodGFnTmFtZSwgdm5vZGUpIHtcbiAgdmFyIGVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gIGlmICh0YWdOYW1lICE9PSAnc2VsZWN0Jykge1xuICAgIHJldHVybiBlbG1cbiAgfVxuICAvLyBmYWxzZSBvciBudWxsIHdpbGwgcmVtb3ZlIHRoZSBhdHRyaWJ1dGUgYnV0IHVuZGVmaW5lZCB3aWxsIG5vdFxuICBpZiAodm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLmF0dHJzICYmIHZub2RlLmRhdGEuYXR0cnMubXVsdGlwbGUgIT09IHVuZGVmaW5lZCkge1xuICAgIGVsbS5zZXRBdHRyaWJ1dGUoJ211bHRpcGxlJywgJ211bHRpcGxlJyk7XG4gIH1cbiAgcmV0dXJuIGVsbVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50TlMgKG5hbWVzcGFjZSwgdGFnTmFtZSkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZU1hcFtuYW1lc3BhY2VdLCB0YWdOYW1lKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVUZXh0Tm9kZSAodGV4dCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dClcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tbWVudCAodGV4dCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCh0ZXh0KVxufVxuXG5mdW5jdGlvbiBpbnNlcnRCZWZvcmUgKHBhcmVudE5vZGUsIG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpIHtcbiAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLnJlbW92ZUNoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gYXBwZW5kQ2hpbGQgKG5vZGUsIGNoaWxkKSB7XG4gIG5vZGUuYXBwZW5kQ2hpbGQoY2hpbGQpO1xufVxuXG5mdW5jdGlvbiBwYXJlbnROb2RlIChub2RlKSB7XG4gIHJldHVybiBub2RlLnBhcmVudE5vZGVcbn1cblxuZnVuY3Rpb24gbmV4dFNpYmxpbmcgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmdcbn1cblxuZnVuY3Rpb24gdGFnTmFtZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS50YWdOYW1lXG59XG5cbmZ1bmN0aW9uIHNldFRleHRDb250ZW50IChub2RlLCB0ZXh0KSB7XG4gIG5vZGUudGV4dENvbnRlbnQgPSB0ZXh0O1xufVxuXG5mdW5jdGlvbiBzZXRTdHlsZVNjb3BlIChub2RlLCBzY29wZUlkKSB7XG4gIG5vZGUuc2V0QXR0cmlidXRlKHNjb3BlSWQsICcnKTtcbn1cblxudmFyIG5vZGVPcHMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnQkMSxcbiAgY3JlYXRlRWxlbWVudE5TOiBjcmVhdGVFbGVtZW50TlMsXG4gIGNyZWF0ZVRleHROb2RlOiBjcmVhdGVUZXh0Tm9kZSxcbiAgY3JlYXRlQ29tbWVudDogY3JlYXRlQ29tbWVudCxcbiAgaW5zZXJ0QmVmb3JlOiBpbnNlcnRCZWZvcmUsXG4gIHJlbW92ZUNoaWxkOiByZW1vdmVDaGlsZCxcbiAgYXBwZW5kQ2hpbGQ6IGFwcGVuZENoaWxkLFxuICBwYXJlbnROb2RlOiBwYXJlbnROb2RlLFxuICBuZXh0U2libGluZzogbmV4dFNpYmxpbmcsXG4gIHRhZ05hbWU6IHRhZ05hbWUsXG4gIHNldFRleHRDb250ZW50OiBzZXRUZXh0Q29udGVudCxcbiAgc2V0U3R5bGVTY29wZTogc2V0U3R5bGVTY29wZVxufSk7XG5cbi8qICAqL1xuXG52YXIgcmVmID0ge1xuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSAoXywgdm5vZGUpIHtcbiAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICBpZiAob2xkVm5vZGUuZGF0YS5yZWYgIT09IHZub2RlLmRhdGEucmVmKSB7XG4gICAgICByZWdpc3RlclJlZihvbGRWbm9kZSwgdHJ1ZSk7XG4gICAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gICAgfVxuICB9LFxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95ICh2bm9kZSkge1xuICAgIHJlZ2lzdGVyUmVmKHZub2RlLCB0cnVlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gcmVnaXN0ZXJSZWYgKHZub2RlLCBpc1JlbW92YWwpIHtcbiAgdmFyIGtleSA9IHZub2RlLmRhdGEucmVmO1xuICBpZiAoIWlzRGVmKGtleSkpIHsgcmV0dXJuIH1cblxuICB2YXIgdm0gPSB2bm9kZS5jb250ZXh0O1xuICB2YXIgcmVmID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgfHwgdm5vZGUuZWxtO1xuICB2YXIgcmVmcyA9IHZtLiRyZWZzO1xuICBpZiAoaXNSZW1vdmFsKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmVmc1trZXldKSkge1xuICAgICAgcmVtb3ZlKHJlZnNba2V5XSwgcmVmKTtcbiAgICB9IGVsc2UgaWYgKHJlZnNba2V5XSA9PT0gcmVmKSB7XG4gICAgICByZWZzW2tleV0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh2bm9kZS5kYXRhLnJlZkluRm9yKSB7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVmc1trZXldKSkge1xuICAgICAgICByZWZzW2tleV0gPSBbcmVmXTtcbiAgICAgIH0gZWxzZSBpZiAocmVmc1trZXldLmluZGV4T2YocmVmKSA8IDApIHtcbiAgICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICAgIHJlZnNba2V5XS5wdXNoKHJlZik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZnNba2V5XSA9IHJlZjtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBWaXJ0dWFsIERPTSBwYXRjaGluZyBhbGdvcml0aG0gYmFzZWQgb24gU25hYmJkb20gYnlcbiAqIFNpbW9uIEZyaWlzIFZpbmR1bSAoQHBhbGRlcGluZClcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICogaHR0cHM6Ly9naXRodWIuY29tL3BhbGRlcGluZC9zbmFiYmRvbS9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKlxuICogbW9kaWZpZWQgYnkgRXZhbiBZb3UgKEB5eXg5OTA4MDMpXG4gKlxuICogTm90IHR5cGUtY2hlY2tpbmcgdGhpcyBiZWNhdXNlIHRoaXMgZmlsZSBpcyBwZXJmLWNyaXRpY2FsIGFuZCB0aGUgY29zdFxuICogb2YgbWFraW5nIGZsb3cgdW5kZXJzdGFuZCBpdCBpcyBub3Qgd29ydGggaXQuXG4gKi9cblxudmFyIGVtcHR5Tm9kZSA9IG5ldyBWTm9kZSgnJywge30sIFtdKTtcblxudmFyIGhvb2tzID0gWydjcmVhdGUnLCAnYWN0aXZhdGUnLCAndXBkYXRlJywgJ3JlbW92ZScsICdkZXN0cm95J107XG5cbmZ1bmN0aW9uIHNhbWVWbm9kZSAoYSwgYikge1xuICByZXR1cm4gKFxuICAgIGEua2V5ID09PSBiLmtleSAmJiAoXG4gICAgICAoXG4gICAgICAgIGEudGFnID09PSBiLnRhZyAmJlxuICAgICAgICBhLmlzQ29tbWVudCA9PT0gYi5pc0NvbW1lbnQgJiZcbiAgICAgICAgaXNEZWYoYS5kYXRhKSA9PT0gaXNEZWYoYi5kYXRhKSAmJlxuICAgICAgICBzYW1lSW5wdXRUeXBlKGEsIGIpXG4gICAgICApIHx8IChcbiAgICAgICAgaXNUcnVlKGEuaXNBc3luY1BsYWNlaG9sZGVyKSAmJlxuICAgICAgICBhLmFzeW5jRmFjdG9yeSA9PT0gYi5hc3luY0ZhY3RvcnkgJiZcbiAgICAgICAgaXNVbmRlZihiLmFzeW5jRmFjdG9yeS5lcnJvcilcbiAgICAgIClcbiAgICApXG4gIClcbn1cblxuZnVuY3Rpb24gc2FtZUlucHV0VHlwZSAoYSwgYikge1xuICBpZiAoYS50YWcgIT09ICdpbnB1dCcpIHsgcmV0dXJuIHRydWUgfVxuICB2YXIgaTtcbiAgdmFyIHR5cGVBID0gaXNEZWYoaSA9IGEuZGF0YSkgJiYgaXNEZWYoaSA9IGkuYXR0cnMpICYmIGkudHlwZTtcbiAgdmFyIHR5cGVCID0gaXNEZWYoaSA9IGIuZGF0YSkgJiYgaXNEZWYoaSA9IGkuYXR0cnMpICYmIGkudHlwZTtcbiAgcmV0dXJuIHR5cGVBID09PSB0eXBlQiB8fCBpc1RleHRJbnB1dFR5cGUodHlwZUEpICYmIGlzVGV4dElucHV0VHlwZSh0eXBlQilcbn1cblxuZnVuY3Rpb24gY3JlYXRlS2V5VG9PbGRJZHggKGNoaWxkcmVuLCBiZWdpbklkeCwgZW5kSWR4KSB7XG4gIHZhciBpLCBrZXk7XG4gIHZhciBtYXAgPSB7fTtcbiAgZm9yIChpID0gYmVnaW5JZHg7IGkgPD0gZW5kSWR4OyArK2kpIHtcbiAgICBrZXkgPSBjaGlsZHJlbltpXS5rZXk7XG4gICAgaWYgKGlzRGVmKGtleSkpIHsgbWFwW2tleV0gPSBpOyB9XG4gIH1cbiAgcmV0dXJuIG1hcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVQYXRjaEZ1bmN0aW9uIChiYWNrZW5kKSB7XG4gIHZhciBpLCBqO1xuICB2YXIgY2JzID0ge307XG5cbiAgdmFyIG1vZHVsZXMgPSBiYWNrZW5kLm1vZHVsZXM7XG4gIHZhciBub2RlT3BzID0gYmFja2VuZC5ub2RlT3BzO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7ICsraSkge1xuICAgIGNic1tob29rc1tpXV0gPSBbXTtcbiAgICBmb3IgKGogPSAwOyBqIDwgbW9kdWxlcy5sZW5ndGg7ICsraikge1xuICAgICAgaWYgKGlzRGVmKG1vZHVsZXNbal1baG9va3NbaV1dKSkge1xuICAgICAgICBjYnNbaG9va3NbaV1dLnB1c2gobW9kdWxlc1tqXVtob29rc1tpXV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVtcHR5Tm9kZUF0IChlbG0pIHtcbiAgICByZXR1cm4gbmV3IFZOb2RlKG5vZGVPcHMudGFnTmFtZShlbG0pLnRvTG93ZXJDYXNlKCksIHt9LCBbXSwgdW5kZWZpbmVkLCBlbG0pXG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVSbUNiIChjaGlsZEVsbSwgbGlzdGVuZXJzKSB7XG4gICAgZnVuY3Rpb24gcmVtb3ZlJCQxICgpIHtcbiAgICAgIGlmICgtLXJlbW92ZSQkMS5saXN0ZW5lcnMgPT09IDApIHtcbiAgICAgICAgcmVtb3ZlTm9kZShjaGlsZEVsbSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlbW92ZSQkMS5saXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gICAgcmV0dXJuIHJlbW92ZSQkMVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlTm9kZSAoZWwpIHtcbiAgICB2YXIgcGFyZW50ID0gbm9kZU9wcy5wYXJlbnROb2RlKGVsKTtcbiAgICAvLyBlbGVtZW50IG1heSBoYXZlIGFscmVhZHkgYmVlbiByZW1vdmVkIGR1ZSB0byB2LWh0bWwgLyB2LXRleHRcbiAgICBpZiAoaXNEZWYocGFyZW50KSkge1xuICAgICAgbm9kZU9wcy5yZW1vdmVDaGlsZChwYXJlbnQsIGVsKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1Vua25vd25FbGVtZW50JCQxICh2bm9kZSwgaW5WUHJlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICFpblZQcmUgJiZcbiAgICAgICF2bm9kZS5ucyAmJlxuICAgICAgIShcbiAgICAgICAgY29uZmlnLmlnbm9yZWRFbGVtZW50cy5sZW5ndGggJiZcbiAgICAgICAgY29uZmlnLmlnbm9yZWRFbGVtZW50cy5zb21lKGZ1bmN0aW9uIChpZ25vcmUpIHtcbiAgICAgICAgICByZXR1cm4gaXNSZWdFeHAoaWdub3JlKVxuICAgICAgICAgICAgPyBpZ25vcmUudGVzdCh2bm9kZS50YWcpXG4gICAgICAgICAgICA6IGlnbm9yZSA9PT0gdm5vZGUudGFnXG4gICAgICAgIH0pXG4gICAgICApICYmXG4gICAgICBjb25maWcuaXNVbmtub3duRWxlbWVudCh2bm9kZS50YWcpXG4gICAgKVxuICB9XG5cbiAgdmFyIGNyZWF0aW5nRWxtSW5WUHJlID0gMDtcblxuICBmdW5jdGlvbiBjcmVhdGVFbG0gKFxuICAgIHZub2RlLFxuICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICBwYXJlbnRFbG0sXG4gICAgcmVmRWxtLFxuICAgIG5lc3RlZCxcbiAgICBvd25lckFycmF5LFxuICAgIGluZGV4XG4gICkge1xuICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7XG4gICAgICAvLyBUaGlzIHZub2RlIHdhcyB1c2VkIGluIGEgcHJldmlvdXMgcmVuZGVyIVxuICAgICAgLy8gbm93IGl0J3MgdXNlZCBhcyBhIG5ldyBub2RlLCBvdmVyd3JpdGluZyBpdHMgZWxtIHdvdWxkIGNhdXNlXG4gICAgICAvLyBwb3RlbnRpYWwgcGF0Y2ggZXJyb3JzIGRvd24gdGhlIHJvYWQgd2hlbiBpdCdzIHVzZWQgYXMgYW4gaW5zZXJ0aW9uXG4gICAgICAvLyByZWZlcmVuY2Ugbm9kZS4gSW5zdGVhZCwgd2UgY2xvbmUgdGhlIG5vZGUgb24tZGVtYW5kIGJlZm9yZSBjcmVhdGluZ1xuICAgICAgLy8gYXNzb2NpYXRlZCBET00gZWxlbWVudCBmb3IgaXQuXG4gICAgICB2bm9kZSA9IG93bmVyQXJyYXlbaW5kZXhdID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgfVxuXG4gICAgdm5vZGUuaXNSb290SW5zZXJ0ID0gIW5lc3RlZDsgLy8gZm9yIHRyYW5zaXRpb24gZW50ZXIgY2hlY2tcbiAgICBpZiAoY3JlYXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIHZhciBjaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xuICAgIHZhciB0YWcgPSB2bm9kZS50YWc7XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChkYXRhICYmIGRhdGEucHJlKSB7XG4gICAgICAgICAgY3JlYXRpbmdFbG1JblZQcmUrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNVbmtub3duRWxlbWVudCQkMSh2bm9kZSwgY3JlYXRpbmdFbG1JblZQcmUpKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgICdVbmtub3duIGN1c3RvbSBlbGVtZW50OiA8JyArIHRhZyArICc+IC0gZGlkIHlvdSAnICtcbiAgICAgICAgICAgICdyZWdpc3RlciB0aGUgY29tcG9uZW50IGNvcnJlY3RseT8gRm9yIHJlY3Vyc2l2ZSBjb21wb25lbnRzLCAnICtcbiAgICAgICAgICAgICdtYWtlIHN1cmUgdG8gcHJvdmlkZSB0aGUgXCJuYW1lXCIgb3B0aW9uLicsXG4gICAgICAgICAgICB2bm9kZS5jb250ZXh0XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2bm9kZS5lbG0gPSB2bm9kZS5uc1xuICAgICAgICA/IG5vZGVPcHMuY3JlYXRlRWxlbWVudE5TKHZub2RlLm5zLCB0YWcpXG4gICAgICAgIDogbm9kZU9wcy5jcmVhdGVFbGVtZW50KHRhZywgdm5vZGUpO1xuICAgICAgc2V0U2NvcGUodm5vZGUpO1xuXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIHtcbiAgICAgICAgY3JlYXRlQ2hpbGRyZW4odm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGRhdGEgJiYgZGF0YS5wcmUpIHtcbiAgICAgICAgY3JlYXRpbmdFbG1JblZQcmUtLTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzVHJ1ZSh2bm9kZS5pc0NvbW1lbnQpKSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZUNvbW1lbnQodm5vZGUudGV4dCk7XG4gICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZub2RlLmVsbSA9IG5vZGVPcHMuY3JlYXRlVGV4dE5vZGUodm5vZGUudGV4dCk7XG4gICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIHZhciBpID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgIHZhciBpc1JlYWN0aXZhdGVkID0gaXNEZWYodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpICYmIGkua2VlcEFsaXZlO1xuICAgICAgaWYgKGlzRGVmKGkgPSBpLmhvb2spICYmIGlzRGVmKGkgPSBpLmluaXQpKSB7XG4gICAgICAgIGkodm5vZGUsIGZhbHNlIC8qIGh5ZHJhdGluZyAqLyk7XG4gICAgICB9XG4gICAgICAvLyBhZnRlciBjYWxsaW5nIHRoZSBpbml0IGhvb2ssIGlmIHRoZSB2bm9kZSBpcyBhIGNoaWxkIGNvbXBvbmVudFxuICAgICAgLy8gaXQgc2hvdWxkJ3ZlIGNyZWF0ZWQgYSBjaGlsZCBpbnN0YW5jZSBhbmQgbW91bnRlZCBpdC4gdGhlIGNoaWxkXG4gICAgICAvLyBjb21wb25lbnQgYWxzbyBoYXMgc2V0IHRoZSBwbGFjZWhvbGRlciB2bm9kZSdzIGVsbS5cbiAgICAgIC8vIGluIHRoYXQgY2FzZSB3ZSBjYW4ganVzdCByZXR1cm4gdGhlIGVsZW1lbnQgYW5kIGJlIGRvbmUuXG4gICAgICBpZiAoaXNEZWYodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgICAgIGluaXRDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICAgICAgaWYgKGlzVHJ1ZShpc1JlYWN0aXZhdGVkKSkge1xuICAgICAgICAgIHJlYWN0aXZhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdENvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChpc0RlZih2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpKSB7XG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaC5hcHBseShpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmRhdGEucGVuZGluZ0luc2VydCk7XG4gICAgICB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQgPSBudWxsO1xuICAgIH1cbiAgICB2bm9kZS5lbG0gPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS4kZWw7XG4gICAgaWYgKGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVtcHR5IGNvbXBvbmVudCByb290LlxuICAgICAgLy8gc2tpcCBhbGwgZWxlbWVudC1yZWxhdGVkIG1vZHVsZXMgZXhjZXB0IGZvciByZWYgKCMzNDU1KVxuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgICAgLy8gbWFrZSBzdXJlIHRvIGludm9rZSB0aGUgaW5zZXJ0IGhvb2tcbiAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFjdGl2YXRlQ29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIHZhciBpO1xuICAgIC8vIGhhY2sgZm9yICM0MzM5OiBhIHJlYWN0aXZhdGVkIGNvbXBvbmVudCB3aXRoIGlubmVyIHRyYW5zaXRpb25cbiAgICAvLyBkb2VzIG5vdCB0cmlnZ2VyIGJlY2F1c2UgdGhlIGlubmVyIG5vZGUncyBjcmVhdGVkIGhvb2tzIGFyZSBub3QgY2FsbGVkXG4gICAgLy8gYWdhaW4uIEl0J3Mgbm90IGlkZWFsIHRvIGludm9sdmUgbW9kdWxlLXNwZWNpZmljIGxvZ2ljIGluIGhlcmUgYnV0XG4gICAgLy8gdGhlcmUgZG9lc24ndCBzZWVtIHRvIGJlIGEgYmV0dGVyIHdheSB0byBkbyBpdC5cbiAgICB2YXIgaW5uZXJOb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgaW5uZXJOb2RlID0gaW5uZXJOb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICAgIGlmIChpc0RlZihpID0gaW5uZXJOb2RlLmRhdGEpICYmIGlzRGVmKGkgPSBpLnRyYW5zaXRpb24pKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuYWN0aXZhdGUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBjYnMuYWN0aXZhdGVbaV0oZW1wdHlOb2RlLCBpbm5lck5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKGlubmVyTm9kZSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVubGlrZSBhIG5ld2x5IGNyZWF0ZWQgY29tcG9uZW50LFxuICAgIC8vIGEgcmVhY3RpdmF0ZWQga2VlcC1hbGl2ZSBjb21wb25lbnQgZG9lc24ndCBpbnNlcnQgaXRzZWxmXG4gICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5zZXJ0IChwYXJlbnQsIGVsbSwgcmVmJCQxKSB7XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIGlmIChpc0RlZihyZWYkJDEpKSB7XG4gICAgICAgIGlmIChub2RlT3BzLnBhcmVudE5vZGUocmVmJCQxKSA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50LCBlbG0sIHJlZiQkMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQocGFyZW50LCBlbG0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkcmVuICh2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKGNoaWxkcmVuKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY3JlYXRlRWxtKGNoaWxkcmVuW2ldLCBpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmVsbSwgbnVsbCwgdHJ1ZSwgY2hpbGRyZW4sIGkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUodm5vZGUudGV4dCkpIHtcbiAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQodm5vZGUuZWxtLCBub2RlT3BzLmNyZWF0ZVRleHROb2RlKFN0cmluZyh2bm9kZS50ZXh0KSkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzUGF0Y2hhYmxlICh2bm9kZSkge1xuICAgIHdoaWxlICh2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgdm5vZGUgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgfVxuICAgIHJldHVybiBpc0RlZih2bm9kZS50YWcpXG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VDcmVhdGVIb29rcyAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgY2JzLmNyZWF0ZVtpJDFdKGVtcHR5Tm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICBpID0gdm5vZGUuZGF0YS5ob29rOyAvLyBSZXVzZSB2YXJpYWJsZVxuICAgIGlmIChpc0RlZihpKSkge1xuICAgICAgaWYgKGlzRGVmKGkuY3JlYXRlKSkgeyBpLmNyZWF0ZShlbXB0eU5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGlzRGVmKGkuaW5zZXJ0KSkgeyBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7IH1cbiAgICB9XG4gIH1cblxuICAvLyBzZXQgc2NvcGUgaWQgYXR0cmlidXRlIGZvciBzY29wZWQgQ1NTLlxuICAvLyB0aGlzIGlzIGltcGxlbWVudGVkIGFzIGEgc3BlY2lhbCBjYXNlIHRvIGF2b2lkIHRoZSBvdmVyaGVhZFxuICAvLyBvZiBnb2luZyB0aHJvdWdoIHRoZSBub3JtYWwgYXR0cmlidXRlIHBhdGNoaW5nIHByb2Nlc3MuXG4gIGZ1bmN0aW9uIHNldFNjb3BlICh2bm9kZSkge1xuICAgIHZhciBpO1xuICAgIGlmIChpc0RlZihpID0gdm5vZGUuZm5TY29wZUlkKSkge1xuICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlO1xuICAgICAgd2hpbGUgKGFuY2VzdG9yKSB7XG4gICAgICAgIGlmIChpc0RlZihpID0gYW5jZXN0b3IuY29udGV4dCkgJiYgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpKSB7XG4gICAgICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgICAgIH1cbiAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGZvciBzbG90IGNvbnRlbnQgdGhleSBzaG91bGQgYWxzbyBnZXQgdGhlIHNjb3BlSWQgZnJvbSB0aGUgaG9zdCBpbnN0YW5jZS5cbiAgICBpZiAoaXNEZWYoaSA9IGFjdGl2ZUluc3RhbmNlKSAmJlxuICAgICAgaSAhPT0gdm5vZGUuY29udGV4dCAmJlxuICAgICAgaSAhPT0gdm5vZGUuZm5Db250ZXh0ICYmXG4gICAgICBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZClcbiAgICApIHtcbiAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZFZub2RlcyAocGFyZW50RWxtLCByZWZFbG0sIHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgY3JlYXRlRWxtKHZub2Rlc1tzdGFydElkeF0sIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0sIGZhbHNlLCB2bm9kZXMsIHN0YXJ0SWR4KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VEZXN0cm95SG9vayAodm5vZGUpIHtcbiAgICB2YXIgaSwgajtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuZGVzdHJveSkpIHsgaSh2bm9kZSk7IH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkgeyBjYnMuZGVzdHJveVtpXSh2bm9kZSk7IH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jaGlsZHJlbikpIHtcbiAgICAgIGZvciAoaiA9IDA7IGogPCB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7ICsraikge1xuICAgICAgICBpbnZva2VEZXN0cm95SG9vayh2bm9kZS5jaGlsZHJlbltqXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlVm5vZGVzICh2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgpIHtcbiAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICB2YXIgY2ggPSB2bm9kZXNbc3RhcnRJZHhdO1xuICAgICAgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAoaXNEZWYoY2gudGFnKSkge1xuICAgICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soY2gpO1xuICAgICAgICAgIGludm9rZURlc3Ryb3lIb29rKGNoKTtcbiAgICAgICAgfSBlbHNlIHsgLy8gVGV4dCBub2RlXG4gICAgICAgICAgcmVtb3ZlTm9kZShjaC5lbG0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayAodm5vZGUsIHJtKSB7XG4gICAgaWYgKGlzRGVmKHJtKSB8fCBpc0RlZih2bm9kZS5kYXRhKSkge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gY2JzLnJlbW92ZS5sZW5ndGggKyAxO1xuICAgICAgaWYgKGlzRGVmKHJtKSkge1xuICAgICAgICAvLyB3ZSBoYXZlIGEgcmVjdXJzaXZlbHkgcGFzc2VkIGRvd24gcm0gY2FsbGJhY2tcbiAgICAgICAgLy8gaW5jcmVhc2UgdGhlIGxpc3RlbmVycyBjb3VudFxuICAgICAgICBybS5saXN0ZW5lcnMgKz0gbGlzdGVuZXJzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGlyZWN0bHkgcmVtb3ZpbmdcbiAgICAgICAgcm0gPSBjcmVhdGVSbUNiKHZub2RlLmVsbSwgbGlzdGVuZXJzKTtcbiAgICAgIH1cbiAgICAgIC8vIHJlY3Vyc2l2ZWx5IGludm9rZSBob29rcyBvbiBjaGlsZCBjb21wb25lbnQgcm9vdCBub2RlXG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpc0RlZihpID0gaS5fdm5vZGUpICYmIGlzRGVmKGkuZGF0YSkpIHtcbiAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhpLCBybSk7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnJlbW92ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBjYnMucmVtb3ZlW2ldKHZub2RlLCBybSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucmVtb3ZlKSkge1xuICAgICAgICBpKHZub2RlLCBybSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBybSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmVOb2RlKHZub2RlLmVsbSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQ2hpbGRyZW4gKHBhcmVudEVsbSwgb2xkQ2gsIG5ld0NoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpIHtcbiAgICB2YXIgb2xkU3RhcnRJZHggPSAwO1xuICAgIHZhciBuZXdTdGFydElkeCA9IDA7XG4gICAgdmFyIG9sZEVuZElkeCA9IG9sZENoLmxlbmd0aCAtIDE7XG4gICAgdmFyIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFswXTtcbiAgICB2YXIgb2xkRW5kVm5vZGUgPSBvbGRDaFtvbGRFbmRJZHhdO1xuICAgIHZhciBuZXdFbmRJZHggPSBuZXdDaC5sZW5ndGggLSAxO1xuICAgIHZhciBuZXdTdGFydFZub2RlID0gbmV3Q2hbMF07XG4gICAgdmFyIG5ld0VuZFZub2RlID0gbmV3Q2hbbmV3RW5kSWR4XTtcbiAgICB2YXIgb2xkS2V5VG9JZHgsIGlkeEluT2xkLCB2bm9kZVRvTW92ZSwgcmVmRWxtO1xuXG4gICAgLy8gcmVtb3ZlT25seSBpcyBhIHNwZWNpYWwgZmxhZyB1c2VkIG9ubHkgYnkgPHRyYW5zaXRpb24tZ3JvdXA+XG4gICAgLy8gdG8gZW5zdXJlIHJlbW92ZWQgZWxlbWVudHMgc3RheSBpbiBjb3JyZWN0IHJlbGF0aXZlIHBvc2l0aW9uc1xuICAgIC8vIGR1cmluZyBsZWF2aW5nIHRyYW5zaXRpb25zXG4gICAgdmFyIGNhbk1vdmUgPSAhcmVtb3ZlT25seTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjaGVja0R1cGxpY2F0ZUtleXMobmV3Q2gpO1xuICAgIH1cblxuICAgIHdoaWxlIChvbGRTdGFydElkeCA8PSBvbGRFbmRJZHggJiYgbmV3U3RhcnRJZHggPD0gbmV3RW5kSWR4KSB7XG4gICAgICBpZiAoaXNVbmRlZihvbGRTdGFydFZub2RlKSkge1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07IC8vIFZub2RlIGhhcyBiZWVuIG1vdmVkIGxlZnRcbiAgICAgIH0gZWxzZSBpZiAoaXNVbmRlZihvbGRFbmRWbm9kZSkpIHtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlKSkge1xuICAgICAgICBwYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdFbmRJZHgpO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSkpIHsgLy8gVm5vZGUgbW92ZWQgcmlnaHRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3RW5kSWR4KTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVuZFZub2RlLmVsbSkpO1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIGxlZnRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgb2xkRW5kVm5vZGUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNVbmRlZihvbGRLZXlUb0lkeCkpIHsgb2xkS2V5VG9JZHggPSBjcmVhdGVLZXlUb09sZElkeChvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7IH1cbiAgICAgICAgaWR4SW5PbGQgPSBpc0RlZihuZXdTdGFydFZub2RlLmtleSlcbiAgICAgICAgICA/IG9sZEtleVRvSWR4W25ld1N0YXJ0Vm5vZGUua2V5XVxuICAgICAgICAgIDogZmluZElkeEluT2xkKG5ld1N0YXJ0Vm5vZGUsIG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICAgICAgaWYgKGlzVW5kZWYoaWR4SW5PbGQpKSB7IC8vIE5ldyBlbGVtZW50XG4gICAgICAgICAgY3JlYXRlRWxtKG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgZmFsc2UsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdm5vZGVUb01vdmUgPSBvbGRDaFtpZHhJbk9sZF07XG4gICAgICAgICAgaWYgKHNhbWVWbm9kZSh2bm9kZVRvTW92ZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgICAgIHBhdGNoVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgICAgIG9sZENoW2lkeEluT2xkXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCB2bm9kZVRvTW92ZS5lbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gc2FtZSBrZXkgYnV0IGRpZmZlcmVudCBlbGVtZW50LiB0cmVhdCBhcyBuZXcgZWxlbWVudFxuICAgICAgICAgICAgY3JlYXRlRWxtKG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgZmFsc2UsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9sZFN0YXJ0SWR4ID4gb2xkRW5kSWR4KSB7XG4gICAgICByZWZFbG0gPSBpc1VuZGVmKG5ld0NoW25ld0VuZElkeCArIDFdKSA/IG51bGwgOiBuZXdDaFtuZXdFbmRJZHggKyAxXS5lbG07XG4gICAgICBhZGRWbm9kZXMocGFyZW50RWxtLCByZWZFbG0sIG5ld0NoLCBuZXdTdGFydElkeCwgbmV3RW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgIH0gZWxzZSBpZiAobmV3U3RhcnRJZHggPiBuZXdFbmRJZHgpIHtcbiAgICAgIHJlbW92ZVZub2RlcyhvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tEdXBsaWNhdGVLZXlzIChjaGlsZHJlbikge1xuICAgIHZhciBzZWVuS2V5cyA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB2bm9kZSA9IGNoaWxkcmVuW2ldO1xuICAgICAgdmFyIGtleSA9IHZub2RlLmtleTtcbiAgICAgIGlmIChpc0RlZihrZXkpKSB7XG4gICAgICAgIGlmIChzZWVuS2V5c1trZXldKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIChcIkR1cGxpY2F0ZSBrZXlzIGRldGVjdGVkOiAnXCIgKyBrZXkgKyBcIicuIFRoaXMgbWF5IGNhdXNlIGFuIHVwZGF0ZSBlcnJvci5cIiksXG4gICAgICAgICAgICB2bm9kZS5jb250ZXh0XG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWVuS2V5c1trZXldID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbmRJZHhJbk9sZCAobm9kZSwgb2xkQ2gsIHN0YXJ0LCBlbmQpIHtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgdmFyIGMgPSBvbGRDaFtpXTtcbiAgICAgIGlmIChpc0RlZihjKSAmJiBzYW1lVm5vZGUobm9kZSwgYykpIHsgcmV0dXJuIGkgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhdGNoVm5vZGUgKFxuICAgIG9sZFZub2RlLFxuICAgIHZub2RlLFxuICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICBvd25lckFycmF5LFxuICAgIGluZGV4LFxuICAgIHJlbW92ZU9ubHlcbiAgKSB7XG4gICAgaWYgKG9sZFZub2RlID09PSB2bm9kZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGlzRGVmKHZub2RlLmVsbSkgJiYgaXNEZWYob3duZXJBcnJheSkpIHtcbiAgICAgIC8vIGNsb25lIHJldXNlZCB2bm9kZVxuICAgICAgdm5vZGUgPSBvd25lckFycmF5W2luZGV4XSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgIH1cblxuICAgIHZhciBlbG0gPSB2bm9kZS5lbG0gPSBvbGRWbm9kZS5lbG07XG5cbiAgICBpZiAoaXNUcnVlKG9sZFZub2RlLmlzQXN5bmNQbGFjZWhvbGRlcikpIHtcbiAgICAgIGlmIChpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgIGh5ZHJhdGUob2xkVm5vZGUuZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlLmlzQXN5bmNQbGFjZWhvbGRlciA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyByZXVzZSBlbGVtZW50IGZvciBzdGF0aWMgdHJlZXMuXG4gICAgLy8gbm90ZSB3ZSBvbmx5IGRvIHRoaXMgaWYgdGhlIHZub2RlIGlzIGNsb25lZCAtXG4gICAgLy8gaWYgdGhlIG5ldyBub2RlIGlzIG5vdCBjbG9uZWQgaXQgbWVhbnMgdGhlIHJlbmRlciBmdW5jdGlvbnMgaGF2ZSBiZWVuXG4gICAgLy8gcmVzZXQgYnkgdGhlIGhvdC1yZWxvYWQtYXBpIGFuZCB3ZSBuZWVkIHRvIGRvIGEgcHJvcGVyIHJlLXJlbmRlci5cbiAgICBpZiAoaXNUcnVlKHZub2RlLmlzU3RhdGljKSAmJlxuICAgICAgaXNUcnVlKG9sZFZub2RlLmlzU3RhdGljKSAmJlxuICAgICAgdm5vZGUua2V5ID09PSBvbGRWbm9kZS5rZXkgJiZcbiAgICAgIChpc1RydWUodm5vZGUuaXNDbG9uZWQpIHx8IGlzVHJ1ZSh2bm9kZS5pc09uY2UpKVxuICAgICkge1xuICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucHJlcGF0Y2gpKSB7XG4gICAgICBpKG9sZFZub2RlLCB2bm9kZSk7XG4gICAgfVxuXG4gICAgdmFyIG9sZENoID0gb2xkVm5vZGUuY2hpbGRyZW47XG4gICAgdmFyIGNoID0gdm5vZGUuY2hpbGRyZW47XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy51cGRhdGUubGVuZ3RoOyArK2kpIHsgY2JzLnVwZGF0ZVtpXShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkudXBkYXRlKSkgeyBpKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICB9XG4gICAgaWYgKGlzVW5kZWYodm5vZGUudGV4dCkpIHtcbiAgICAgIGlmIChpc0RlZihvbGRDaCkgJiYgaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChvbGRDaCAhPT0gY2gpIHsgdXBkYXRlQ2hpbGRyZW4oZWxtLCBvbGRDaCwgY2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSk7IH1cbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKGNoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNEZWYob2xkVm5vZGUudGV4dCkpIHsgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sICcnKTsgfVxuICAgICAgICBhZGRWbm9kZXMoZWxtLCBudWxsLCBjaCwgMCwgY2gubGVuZ3RoIC0gMSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkQ2gpKSB7XG4gICAgICAgIHJlbW92ZVZub2RlcyhvbGRDaCwgMCwgb2xkQ2gubGVuZ3RoIC0gMSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7XG4gICAgICAgIG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvbGRWbm9kZS50ZXh0ICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgdm5vZGUudGV4dCk7XG4gICAgfVxuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnBvc3RwYXRjaCkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlSW5zZXJ0SG9vayAodm5vZGUsIHF1ZXVlLCBpbml0aWFsKSB7XG4gICAgLy8gZGVsYXkgaW5zZXJ0IGhvb2tzIGZvciBjb21wb25lbnQgcm9vdCBub2RlcywgaW52b2tlIHRoZW0gYWZ0ZXIgdGhlXG4gICAgLy8gZWxlbWVudCBpcyByZWFsbHkgaW5zZXJ0ZWRcbiAgICBpZiAoaXNUcnVlKGluaXRpYWwpICYmIGlzRGVmKHZub2RlLnBhcmVudCkpIHtcbiAgICAgIHZub2RlLnBhcmVudC5kYXRhLnBlbmRpbmdJbnNlcnQgPSBxdWV1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBxdWV1ZVtpXS5kYXRhLmhvb2suaW5zZXJ0KHF1ZXVlW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgaHlkcmF0aW9uQmFpbGVkID0gZmFsc2U7XG4gIC8vIGxpc3Qgb2YgbW9kdWxlcyB0aGF0IGNhbiBza2lwIGNyZWF0ZSBob29rIGR1cmluZyBoeWRyYXRpb24gYmVjYXVzZSB0aGV5XG4gIC8vIGFyZSBhbHJlYWR5IHJlbmRlcmVkIG9uIHRoZSBjbGllbnQgb3IgaGFzIG5vIG5lZWQgZm9yIGluaXRpYWxpemF0aW9uXG4gIC8vIE5vdGU6IHN0eWxlIGlzIGV4Y2x1ZGVkIGJlY2F1c2UgaXQgcmVsaWVzIG9uIGluaXRpYWwgY2xvbmUgZm9yIGZ1dHVyZVxuICAvLyBkZWVwIHVwZGF0ZXMgKCM3MDYzKS5cbiAgdmFyIGlzUmVuZGVyZWRNb2R1bGUgPSBtYWtlTWFwKCdhdHRycyxjbGFzcyxzdGF0aWNDbGFzcyxzdGF0aWNTdHlsZSxrZXknKTtcblxuICAvLyBOb3RlOiB0aGlzIGlzIGEgYnJvd3Nlci1vbmx5IGZ1bmN0aW9uIHNvIHdlIGNhbiBhc3N1bWUgZWxtcyBhcmUgRE9NIG5vZGVzLlxuICBmdW5jdGlvbiBoeWRyYXRlIChlbG0sIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGluVlByZSkge1xuICAgIHZhciBpO1xuICAgIHZhciB0YWcgPSB2bm9kZS50YWc7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIHZhciBjaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xuICAgIGluVlByZSA9IGluVlByZSB8fCAoZGF0YSAmJiBkYXRhLnByZSk7XG4gICAgdm5vZGUuZWxtID0gZWxtO1xuXG4gICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc0NvbW1lbnQpICYmIGlzRGVmKHZub2RlLmFzeW5jRmFjdG9yeSkpIHtcbiAgICAgIHZub2RlLmlzQXN5bmNQbGFjZWhvbGRlciA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICAvLyBhc3NlcnQgbm9kZSBtYXRjaFxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIWFzc2VydE5vZGVNYXRjaChlbG0sIHZub2RlLCBpblZQcmUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkgeyBpKHZub2RlLCB0cnVlIC8qIGh5ZHJhdGluZyAqLyk7IH1cbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgICAgIC8vIGNoaWxkIGNvbXBvbmVudC4gaXQgc2hvdWxkIGhhdmUgaHlkcmF0ZWQgaXRzIG93biB0cmVlLlxuICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYodGFnKSkge1xuICAgICAgaWYgKGlzRGVmKGNoaWxkcmVuKSkge1xuICAgICAgICAvLyBlbXB0eSBlbGVtZW50LCBhbGxvdyBjbGllbnQgdG8gcGljayB1cCBhbmQgcG9wdWxhdGUgY2hpbGRyZW5cbiAgICAgICAgaWYgKCFlbG0uaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgICAgY3JlYXRlQ2hpbGRyZW4odm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHYtaHRtbCBhbmQgZG9tUHJvcHM6IGlubmVySFRNTFxuICAgICAgICAgIGlmIChpc0RlZihpID0gZGF0YSkgJiYgaXNEZWYoaSA9IGkuZG9tUHJvcHMpICYmIGlzRGVmKGkgPSBpLmlubmVySFRNTCkpIHtcbiAgICAgICAgICAgIGlmIChpICE9PSBlbG0uaW5uZXJIVE1MKSB7XG4gICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgICFoeWRyYXRpb25CYWlsZWRcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgaHlkcmF0aW9uQmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1BhcmVudDogJywgZWxtKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ3NlcnZlciBpbm5lckhUTUw6ICcsIGkpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignY2xpZW50IGlubmVySFRNTDogJywgZWxtLmlubmVySFRNTCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGl0ZXJhdGUgYW5kIGNvbXBhcmUgY2hpbGRyZW4gbGlzdHNcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbk1hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBjaGlsZE5vZGUgPSBlbG0uZmlyc3RDaGlsZDtcbiAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNoaWxkcmVuLmxlbmd0aDsgaSQxKyspIHtcbiAgICAgICAgICAgICAgaWYgKCFjaGlsZE5vZGUgfHwgIWh5ZHJhdGUoY2hpbGROb2RlLCBjaGlsZHJlbltpJDFdLCBpbnNlcnRlZFZub2RlUXVldWUsIGluVlByZSkpIHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbk1hdGNoID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpZiBjaGlsZE5vZGUgaXMgbm90IG51bGwsIGl0IG1lYW5zIHRoZSBhY3R1YWwgY2hpbGROb2RlcyBsaXN0IGlzXG4gICAgICAgICAgICAvLyBsb25nZXIgdGhhbiB0aGUgdmlydHVhbCBjaGlsZHJlbiBsaXN0LlxuICAgICAgICAgICAgaWYgKCFjaGlsZHJlbk1hdGNoIHx8IGNoaWxkTm9kZSkge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdNaXNtYXRjaGluZyBjaGlsZE5vZGVzIHZzLiBWTm9kZXM6ICcsIGVsbS5jaGlsZE5vZGVzLCBjaGlsZHJlbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgICAgdmFyIGZ1bGxJbnZva2UgPSBmYWxzZTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICBpZiAoIWlzUmVuZGVyZWRNb2R1bGUoa2V5KSkge1xuICAgICAgICAgICAgZnVsbEludm9rZSA9IHRydWU7XG4gICAgICAgICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghZnVsbEludm9rZSAmJiBkYXRhWydjbGFzcyddKSB7XG4gICAgICAgICAgLy8gZW5zdXJlIGNvbGxlY3RpbmcgZGVwcyBmb3IgZGVlcCBjbGFzcyBiaW5kaW5ncyBmb3IgZnV0dXJlIHVwZGF0ZXNcbiAgICAgICAgICB0cmF2ZXJzZShkYXRhWydjbGFzcyddKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZWxtLmRhdGEgIT09IHZub2RlLnRleHQpIHtcbiAgICAgIGVsbS5kYXRhID0gdm5vZGUudGV4dDtcbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzc2VydE5vZGVNYXRjaCAobm9kZSwgdm5vZGUsIGluVlByZSkge1xuICAgIGlmIChpc0RlZih2bm9kZS50YWcpKSB7XG4gICAgICByZXR1cm4gdm5vZGUudGFnLmluZGV4T2YoJ3Z1ZS1jb21wb25lbnQnKSA9PT0gMCB8fCAoXG4gICAgICAgICFpc1Vua25vd25FbGVtZW50JCQxKHZub2RlLCBpblZQcmUpICYmXG4gICAgICAgIHZub2RlLnRhZy50b0xvd2VyQ2FzZSgpID09PSAobm9kZS50YWdOYW1lICYmIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKVxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gKHZub2RlLmlzQ29tbWVudCA/IDggOiAzKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBwYXRjaCAob2xkVm5vZGUsIHZub2RlLCBoeWRyYXRpbmcsIHJlbW92ZU9ubHkpIHtcbiAgICBpZiAoaXNVbmRlZih2bm9kZSkpIHtcbiAgICAgIGlmIChpc0RlZihvbGRWbm9kZSkpIHsgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpOyB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgaXNJbml0aWFsUGF0Y2ggPSBmYWxzZTtcbiAgICB2YXIgaW5zZXJ0ZWRWbm9kZVF1ZXVlID0gW107XG5cbiAgICBpZiAoaXNVbmRlZihvbGRWbm9kZSkpIHtcbiAgICAgIC8vIGVtcHR5IG1vdW50IChsaWtlbHkgYXMgY29tcG9uZW50KSwgY3JlYXRlIG5ldyByb290IGVsZW1lbnRcbiAgICAgIGlzSW5pdGlhbFBhdGNoID0gdHJ1ZTtcbiAgICAgIGNyZWF0ZUVsbSh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGlzUmVhbEVsZW1lbnQgPSBpc0RlZihvbGRWbm9kZS5ub2RlVHlwZSk7XG4gICAgICBpZiAoIWlzUmVhbEVsZW1lbnQgJiYgc2FtZVZub2RlKG9sZFZub2RlLCB2bm9kZSkpIHtcbiAgICAgICAgLy8gcGF0Y2ggZXhpc3Rpbmcgcm9vdCBub2RlXG4gICAgICAgIHBhdGNoVm5vZGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG51bGwsIG51bGwsIHJlbW92ZU9ubHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzUmVhbEVsZW1lbnQpIHtcbiAgICAgICAgICAvLyBtb3VudGluZyB0byBhIHJlYWwgZWxlbWVudFxuICAgICAgICAgIC8vIGNoZWNrIGlmIHRoaXMgaXMgc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQgYW5kIGlmIHdlIGNhbiBwZXJmb3JtXG4gICAgICAgICAgLy8gYSBzdWNjZXNzZnVsIGh5ZHJhdGlvbi5cbiAgICAgICAgICBpZiAob2xkVm5vZGUubm9kZVR5cGUgPT09IDEgJiYgb2xkVm5vZGUuaGFzQXR0cmlidXRlKFNTUl9BVFRSKSkge1xuICAgICAgICAgICAgb2xkVm5vZGUucmVtb3ZlQXR0cmlidXRlKFNTUl9BVFRSKTtcbiAgICAgICAgICAgIGh5ZHJhdGluZyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc1RydWUoaHlkcmF0aW5nKSkge1xuICAgICAgICAgICAgaWYgKGh5ZHJhdGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpKSB7XG4gICAgICAgICAgICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHJldHVybiBvbGRWbm9kZVxuICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgICAgJ1RoZSBjbGllbnQtc2lkZSByZW5kZXJlZCB2aXJ0dWFsIERPTSB0cmVlIGlzIG5vdCBtYXRjaGluZyAnICtcbiAgICAgICAgICAgICAgICAnc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQuIFRoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBpbmNvcnJlY3QgJyArXG4gICAgICAgICAgICAgICAgJ0hUTUwgbWFya3VwLCBmb3IgZXhhbXBsZSBuZXN0aW5nIGJsb2NrLWxldmVsIGVsZW1lbnRzIGluc2lkZSAnICtcbiAgICAgICAgICAgICAgICAnPHA+LCBvciBtaXNzaW5nIDx0Ym9keT4uIEJhaWxpbmcgaHlkcmF0aW9uIGFuZCBwZXJmb3JtaW5nICcgK1xuICAgICAgICAgICAgICAgICdmdWxsIGNsaWVudC1zaWRlIHJlbmRlci4nXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGVpdGhlciBub3Qgc2VydmVyLXJlbmRlcmVkLCBvciBoeWRyYXRpb24gZmFpbGVkLlxuICAgICAgICAgIC8vIGNyZWF0ZSBhbiBlbXB0eSBub2RlIGFuZCByZXBsYWNlIGl0XG4gICAgICAgICAgb2xkVm5vZGUgPSBlbXB0eU5vZGVBdChvbGRWbm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZXBsYWNpbmcgZXhpc3RpbmcgZWxlbWVudFxuICAgICAgICB2YXIgb2xkRWxtID0gb2xkVm5vZGUuZWxtO1xuICAgICAgICB2YXIgcGFyZW50RWxtID0gbm9kZU9wcy5wYXJlbnROb2RlKG9sZEVsbSk7XG5cbiAgICAgICAgLy8gY3JlYXRlIG5ldyBub2RlXG4gICAgICAgIGNyZWF0ZUVsbShcbiAgICAgICAgICB2bm9kZSxcbiAgICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgICAgICAgLy8gZXh0cmVtZWx5IHJhcmUgZWRnZSBjYXNlOiBkbyBub3QgaW5zZXJ0IGlmIG9sZCBlbGVtZW50IGlzIGluIGFcbiAgICAgICAgICAvLyBsZWF2aW5nIHRyYW5zaXRpb24uIE9ubHkgaGFwcGVucyB3aGVuIGNvbWJpbmluZyB0cmFuc2l0aW9uICtcbiAgICAgICAgICAvLyBrZWVwLWFsaXZlICsgSE9Dcy4gKCM0NTkwKVxuICAgICAgICAgIG9sZEVsbS5fbGVhdmVDYiA/IG51bGwgOiBwYXJlbnRFbG0sXG4gICAgICAgICAgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbG0pXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gdXBkYXRlIHBhcmVudCBwbGFjZWhvbGRlciBub2RlIGVsZW1lbnQsIHJlY3Vyc2l2ZWx5XG4gICAgICAgIGlmIChpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICAgICAgdmFyIGFuY2VzdG9yID0gdm5vZGUucGFyZW50O1xuICAgICAgICAgIHZhciBwYXRjaGFibGUgPSBpc1BhdGNoYWJsZSh2bm9kZSk7XG4gICAgICAgICAgd2hpbGUgKGFuY2VzdG9yKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNicy5kZXN0cm95Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgIGNicy5kZXN0cm95W2ldKGFuY2VzdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFuY2VzdG9yLmVsbSA9IHZub2RlLmVsbTtcbiAgICAgICAgICAgIGlmIChwYXRjaGFibGUpIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2JzLmNyZWF0ZS5sZW5ndGg7ICsraSQxKSB7XG4gICAgICAgICAgICAgICAgY2JzLmNyZWF0ZVtpJDFdKGVtcHR5Tm9kZSwgYW5jZXN0b3IpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vICM2NTEzXG4gICAgICAgICAgICAgIC8vIGludm9rZSBpbnNlcnQgaG9va3MgdGhhdCBtYXkgaGF2ZSBiZWVuIG1lcmdlZCBieSBjcmVhdGUgaG9va3MuXG4gICAgICAgICAgICAgIC8vIGUuZy4gZm9yIGRpcmVjdGl2ZXMgdGhhdCB1c2VzIHRoZSBcImluc2VydGVkXCIgaG9vay5cbiAgICAgICAgICAgICAgdmFyIGluc2VydCA9IGFuY2VzdG9yLmRhdGEuaG9vay5pbnNlcnQ7XG4gICAgICAgICAgICAgIGlmIChpbnNlcnQubWVyZ2VkKSB7XG4gICAgICAgICAgICAgICAgLy8gc3RhcnQgYXQgaW5kZXggMSB0byBhdm9pZCByZS1pbnZva2luZyBjb21wb25lbnQgbW91bnRlZCBob29rXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSQyID0gMTsgaSQyIDwgaW5zZXJ0LmZucy5sZW5ndGg7IGkkMisrKSB7XG4gICAgICAgICAgICAgICAgICBpbnNlcnQuZm5zW2kkMl0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlZ2lzdGVyUmVmKGFuY2VzdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGRlc3Ryb3kgb2xkIG5vZGVcbiAgICAgICAgaWYgKGlzRGVmKHBhcmVudEVsbSkpIHtcbiAgICAgICAgICByZW1vdmVWbm9kZXMoW29sZFZub2RlXSwgMCwgMCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkVm5vZGUudGFnKSkge1xuICAgICAgICAgIGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgaXNJbml0aWFsUGF0Y2gpO1xuICAgIHJldHVybiB2bm9kZS5lbG1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIGRpcmVjdGl2ZXMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgdXBkYXRlOiB1cGRhdGVEaXJlY3RpdmVzLFxuICBkZXN0cm95OiBmdW5jdGlvbiB1bmJpbmREaXJlY3RpdmVzICh2bm9kZSkge1xuICAgIHVwZGF0ZURpcmVjdGl2ZXModm5vZGUsIGVtcHR5Tm9kZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHVwZGF0ZURpcmVjdGl2ZXMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzIHx8IHZub2RlLmRhdGEuZGlyZWN0aXZlcykge1xuICAgIF91cGRhdGUob2xkVm5vZGUsIHZub2RlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfdXBkYXRlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGlzQ3JlYXRlID0gb2xkVm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgdmFyIGlzRGVzdHJveSA9IHZub2RlID09PSBlbXB0eU5vZGU7XG4gIHZhciBvbGREaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcywgb2xkVm5vZGUuY29udGV4dCk7XG4gIHZhciBuZXdEaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKHZub2RlLmRhdGEuZGlyZWN0aXZlcywgdm5vZGUuY29udGV4dCk7XG5cbiAgdmFyIGRpcnNXaXRoSW5zZXJ0ID0gW107XG4gIHZhciBkaXJzV2l0aFBvc3RwYXRjaCA9IFtdO1xuXG4gIHZhciBrZXksIG9sZERpciwgZGlyO1xuICBmb3IgKGtleSBpbiBuZXdEaXJzKSB7XG4gICAgb2xkRGlyID0gb2xkRGlyc1trZXldO1xuICAgIGRpciA9IG5ld0RpcnNba2V5XTtcbiAgICBpZiAoIW9sZERpcikge1xuICAgICAgLy8gbmV3IGRpcmVjdGl2ZSwgYmluZFxuICAgICAgY2FsbEhvb2skMShkaXIsICdiaW5kJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuaW5zZXJ0ZWQpIHtcbiAgICAgICAgZGlyc1dpdGhJbnNlcnQucHVzaChkaXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBleGlzdGluZyBkaXJlY3RpdmUsIHVwZGF0ZVxuICAgICAgZGlyLm9sZFZhbHVlID0gb2xkRGlyLnZhbHVlO1xuICAgICAgZGlyLm9sZEFyZyA9IG9sZERpci5hcmc7XG4gICAgICBjYWxsSG9vayQxKGRpciwgJ3VwZGF0ZScsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICBpZiAoZGlyLmRlZiAmJiBkaXIuZGVmLmNvbXBvbmVudFVwZGF0ZWQpIHtcbiAgICAgICAgZGlyc1dpdGhQb3N0cGF0Y2gucHVzaChkaXIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChkaXJzV2l0aEluc2VydC5sZW5ndGgpIHtcbiAgICB2YXIgY2FsbEluc2VydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhJbnNlcnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2FsbEhvb2skMShkaXJzV2l0aEluc2VydFtpXSwgJ2luc2VydGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChpc0NyZWF0ZSkge1xuICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdpbnNlcnQnLCBjYWxsSW5zZXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbEluc2VydCgpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkaXJzV2l0aFBvc3RwYXRjaC5sZW5ndGgpIHtcbiAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ3Bvc3RwYXRjaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2FsbEhvb2skMShkaXJzV2l0aFBvc3RwYXRjaFtpXSwgJ2NvbXBvbmVudFVwZGF0ZWQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKCFpc0NyZWF0ZSkge1xuICAgIGZvciAoa2V5IGluIG9sZERpcnMpIHtcbiAgICAgIGlmICghbmV3RGlyc1trZXldKSB7XG4gICAgICAgIC8vIG5vIGxvbmdlciBwcmVzZW50LCB1bmJpbmRcbiAgICAgICAgY2FsbEhvb2skMShvbGREaXJzW2tleV0sICd1bmJpbmQnLCBvbGRWbm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBlbXB0eU1vZGlmaWVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSAoXG4gIGRpcnMsXG4gIHZtXG4pIHtcbiAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmICghZGlycykge1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHJldHVybiByZXNcbiAgfVxuICB2YXIgaSwgZGlyO1xuICBmb3IgKGkgPSAwOyBpIDwgZGlycy5sZW5ndGg7IGkrKykge1xuICAgIGRpciA9IGRpcnNbaV07XG4gICAgaWYgKCFkaXIubW9kaWZpZXJzKSB7XG4gICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgIGRpci5tb2RpZmllcnMgPSBlbXB0eU1vZGlmaWVycztcbiAgICB9XG4gICAgcmVzW2dldFJhd0Rpck5hbWUoZGlyKV0gPSBkaXI7XG4gICAgZGlyLmRlZiA9IHJlc29sdmVBc3NldCh2bS4kb3B0aW9ucywgJ2RpcmVjdGl2ZXMnLCBkaXIubmFtZSwgdHJ1ZSk7XG4gIH1cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZ2V0UmF3RGlyTmFtZSAoZGlyKSB7XG4gIHJldHVybiBkaXIucmF3TmFtZSB8fCAoKGRpci5uYW1lKSArIFwiLlwiICsgKE9iamVjdC5rZXlzKGRpci5tb2RpZmllcnMgfHwge30pLmpvaW4oJy4nKSkpXG59XG5cbmZ1bmN0aW9uIGNhbGxIb29rJDEgKGRpciwgaG9vaywgdm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpIHtcbiAgdmFyIGZuID0gZGlyLmRlZiAmJiBkaXIuZGVmW2hvb2tdO1xuICBpZiAoZm4pIHtcbiAgICB0cnkge1xuICAgICAgZm4odm5vZGUuZWxtLCBkaXIsIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bm9kZS5jb250ZXh0LCAoXCJkaXJlY3RpdmUgXCIgKyAoZGlyLm5hbWUpICsgXCIgXCIgKyBob29rICsgXCIgaG9va1wiKSk7XG4gICAgfVxuICB9XG59XG5cbnZhciBiYXNlTW9kdWxlcyA9IFtcbiAgcmVmLFxuICBkaXJlY3RpdmVzXG5dO1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlQXR0cnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgb3B0cyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChpc0RlZihvcHRzKSAmJiBvcHRzLkN0b3Iub3B0aW9ucy5pbmhlcml0QXR0cnMgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5hdHRycykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmF0dHJzKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBrZXksIGN1ciwgb2xkO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkQXR0cnMgPSBvbGRWbm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICB2YXIgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKGlzRGVmKGF0dHJzLl9fb2JfXykpIHtcbiAgICBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgPSBleHRlbmQoe30sIGF0dHJzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIGF0dHJzKSB7XG4gICAgY3VyID0gYXR0cnNba2V5XTtcbiAgICBvbGQgPSBvbGRBdHRyc1trZXldO1xuICAgIGlmIChvbGQgIT09IGN1cikge1xuICAgICAgc2V0QXR0cihlbG0sIGtleSwgY3VyKTtcbiAgICB9XG4gIH1cbiAgLy8gIzQzOTE6IGluIElFOSwgc2V0dGluZyB0eXBlIGNhbiByZXNldCB2YWx1ZSBmb3IgaW5wdXRbdHlwZT1yYWRpb11cbiAgLy8gIzY2NjY6IElFL0VkZ2UgZm9yY2VzIHByb2dyZXNzIHZhbHVlIGRvd24gdG8gMSBiZWZvcmUgc2V0dGluZyBhIG1heFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKChpc0lFIHx8IGlzRWRnZSkgJiYgYXR0cnMudmFsdWUgIT09IG9sZEF0dHJzLnZhbHVlKSB7XG4gICAgc2V0QXR0cihlbG0sICd2YWx1ZScsIGF0dHJzLnZhbHVlKTtcbiAgfVxuICBmb3IgKGtleSBpbiBvbGRBdHRycykge1xuICAgIGlmIChpc1VuZGVmKGF0dHJzW2tleV0pKSB7XG4gICAgICBpZiAoaXNYbGluayhrZXkpKSB7XG4gICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgICB9IGVsc2UgaWYgKCFpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRBdHRyIChlbCwga2V5LCB2YWx1ZSkge1xuICBpZiAoZWwudGFnTmFtZS5pbmRleE9mKCctJykgPiAtMSkge1xuICAgIGJhc2VTZXRBdHRyKGVsLCBrZXksIHZhbHVlKTtcbiAgfSBlbHNlIGlmIChpc0Jvb2xlYW5BdHRyKGtleSkpIHtcbiAgICAvLyBzZXQgYXR0cmlidXRlIGZvciBibGFuayB2YWx1ZVxuICAgIC8vIGUuZy4gPG9wdGlvbiBkaXNhYmxlZD5TZWxlY3Qgb25lPC9vcHRpb24+XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdGVjaG5pY2FsbHkgYWxsb3dmdWxsc2NyZWVuIGlzIGEgYm9vbGVhbiBhdHRyaWJ1dGUgZm9yIDxpZnJhbWU+LFxuICAgICAgLy8gYnV0IEZsYXNoIGV4cGVjdHMgYSB2YWx1ZSBvZiBcInRydWVcIiB3aGVuIHVzZWQgb24gPGVtYmVkPiB0YWdcbiAgICAgIHZhbHVlID0ga2V5ID09PSAnYWxsb3dmdWxsc2NyZWVuJyAmJiBlbC50YWdOYW1lID09PSAnRU1CRUQnXG4gICAgICAgID8gJ3RydWUnXG4gICAgICAgIDoga2V5O1xuICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCBjb252ZXJ0RW51bWVyYXRlZFZhbHVlKGtleSwgdmFsdWUpKTtcbiAgfSBlbHNlIGlmIChpc1hsaW5rKGtleSkpIHtcbiAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc2V0QXR0cmlidXRlTlMoeGxpbmtOUywga2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJhc2VTZXRBdHRyKGVsLCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlU2V0QXR0ciAoZWwsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gIzcxMzg6IElFMTAgJiAxMSBmaXJlcyBpbnB1dCBldmVudCB3aGVuIHNldHRpbmcgcGxhY2Vob2xkZXIgb25cbiAgICAvLyA8dGV4dGFyZWE+Li4uIGJsb2NrIHRoZSBmaXJzdCBpbnB1dCBldmVudCBhbmQgcmVtb3ZlIHRoZSBibG9ja2VyXG4gICAgLy8gaW1tZWRpYXRlbHkuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKFxuICAgICAgaXNJRSAmJiAhaXNJRTkgJiZcbiAgICAgIGVsLnRhZ05hbWUgPT09ICdURVhUQVJFQScgJiZcbiAgICAgIGtleSA9PT0gJ3BsYWNlaG9sZGVyJyAmJiB2YWx1ZSAhPT0gJycgJiYgIWVsLl9faWVwaFxuICAgICkge1xuICAgICAgdmFyIGJsb2NrZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdpbnB1dCcsIGJsb2NrZXIpO1xuICAgICAgfTtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgYmxvY2tlcik7XG4gICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgIGVsLl9faWVwaCA9IHRydWU7IC8qIElFIHBsYWNlaG9sZGVyIHBhdGNoZWQgKi9cbiAgICB9XG4gICAgZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICB9XG59XG5cbnZhciBhdHRycyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVBdHRycyxcbiAgdXBkYXRlOiB1cGRhdGVBdHRyc1xufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZUNsYXNzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcbiAgaWYgKFxuICAgIGlzVW5kZWYoZGF0YS5zdGF0aWNDbGFzcykgJiZcbiAgICBpc1VuZGVmKGRhdGEuY2xhc3MpICYmIChcbiAgICAgIGlzVW5kZWYob2xkRGF0YSkgfHwgKFxuICAgICAgICBpc1VuZGVmKG9sZERhdGEuc3RhdGljQ2xhc3MpICYmXG4gICAgICAgIGlzVW5kZWYob2xkRGF0YS5jbGFzcylcbiAgICAgIClcbiAgICApXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNscyA9IGdlbkNsYXNzRm9yVm5vZGUodm5vZGUpO1xuXG4gIC8vIGhhbmRsZSB0cmFuc2l0aW9uIGNsYXNzZXNcbiAgdmFyIHRyYW5zaXRpb25DbGFzcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcztcbiAgaWYgKGlzRGVmKHRyYW5zaXRpb25DbGFzcykpIHtcbiAgICBjbHMgPSBjb25jYXQoY2xzLCBzdHJpbmdpZnlDbGFzcyh0cmFuc2l0aW9uQ2xhc3MpKTtcbiAgfVxuXG4gIC8vIHNldCB0aGUgY2xhc3NcbiAgaWYgKGNscyAhPT0gZWwuX3ByZXZDbGFzcykge1xuICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjbHMpO1xuICAgIGVsLl9wcmV2Q2xhc3MgPSBjbHM7XG4gIH1cbn1cblxudmFyIGtsYXNzID0ge1xuICBjcmVhdGU6IHVwZGF0ZUNsYXNzLFxuICB1cGRhdGU6IHVwZGF0ZUNsYXNzXG59O1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLy8gaW4gc29tZSBjYXNlcywgdGhlIGV2ZW50IHVzZWQgaGFzIHRvIGJlIGRldGVybWluZWQgYXQgcnVudGltZVxuLy8gc28gd2UgdXNlZCBzb21lIHJlc2VydmVkIHRva2VucyBkdXJpbmcgY29tcGlsZS5cbnZhciBSQU5HRV9UT0tFTiA9ICdfX3InO1xudmFyIENIRUNLQk9YX1JBRElPX1RPS0VOID0gJ19fYyc7XG5cbi8qICAqL1xuXG4vLyBub3JtYWxpemUgdi1tb2RlbCBldmVudCB0b2tlbnMgdGhhdCBjYW4gb25seSBiZSBkZXRlcm1pbmVkIGF0IHJ1bnRpbWUuXG4vLyBpdCdzIGltcG9ydGFudCB0byBwbGFjZSB0aGUgZXZlbnQgYXMgdGhlIGZpcnN0IGluIHRoZSBhcnJheSBiZWNhdXNlXG4vLyB0aGUgd2hvbGUgcG9pbnQgaXMgZW5zdXJpbmcgdGhlIHYtbW9kZWwgY2FsbGJhY2sgZ2V0cyBjYWxsZWQgYmVmb3JlXG4vLyB1c2VyLWF0dGFjaGVkIGhhbmRsZXJzLlxuZnVuY3Rpb24gbm9ybWFsaXplRXZlbnRzIChvbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKG9uW1JBTkdFX1RPS0VOXSkpIHtcbiAgICAvLyBJRSBpbnB1dFt0eXBlPXJhbmdlXSBvbmx5IHN1cHBvcnRzIGBjaGFuZ2VgIGV2ZW50XG4gICAgdmFyIGV2ZW50ID0gaXNJRSA/ICdjaGFuZ2UnIDogJ2lucHV0JztcbiAgICBvbltldmVudF0gPSBbXS5jb25jYXQob25bUkFOR0VfVE9LRU5dLCBvbltldmVudF0gfHwgW10pO1xuICAgIGRlbGV0ZSBvbltSQU5HRV9UT0tFTl07XG4gIH1cbiAgLy8gVGhpcyB3YXMgb3JpZ2luYWxseSBpbnRlbmRlZCB0byBmaXggIzQ1MjEgYnV0IG5vIGxvbmdlciBuZWNlc3NhcnlcbiAgLy8gYWZ0ZXIgMi41LiBLZWVwaW5nIGl0IGZvciBiYWNrd2FyZHMgY29tcGF0IHdpdGggZ2VuZXJhdGVkIGNvZGUgZnJvbSA8IDIuNFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSkpIHtcbiAgICBvbi5jaGFuZ2UgPSBbXS5jb25jYXQob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dLCBvbi5jaGFuZ2UgfHwgW10pO1xuICAgIGRlbGV0ZSBvbltDSEVDS0JPWF9SQURJT19UT0tFTl07XG4gIH1cbn1cblxudmFyIHRhcmdldCQxO1xuXG5mdW5jdGlvbiBjcmVhdGVPbmNlSGFuZGxlciQxIChldmVudCwgaGFuZGxlciwgY2FwdHVyZSkge1xuICB2YXIgX3RhcmdldCA9IHRhcmdldCQxOyAvLyBzYXZlIGN1cnJlbnQgdGFyZ2V0IGVsZW1lbnQgaW4gY2xvc3VyZVxuICByZXR1cm4gZnVuY3Rpb24gb25jZUhhbmRsZXIgKCkge1xuICAgIHZhciByZXMgPSBoYW5kbGVyLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHJlcyAhPT0gbnVsbCkge1xuICAgICAgcmVtb3ZlJDIoZXZlbnQsIG9uY2VIYW5kbGVyLCBjYXB0dXJlLCBfdGFyZ2V0KTtcbiAgICB9XG4gIH1cbn1cblxuLy8gIzk0NDY6IEZpcmVmb3ggPD0gNTMgKGluIHBhcnRpY3VsYXIsIEVTUiA1MikgaGFzIGluY29ycmVjdCBFdmVudC50aW1lU3RhbXBcbi8vIGltcGxlbWVudGF0aW9uIGFuZCBkb2VzIG5vdCBmaXJlIG1pY3JvdGFza3MgaW4gYmV0d2VlbiBldmVudCBwcm9wYWdhdGlvbiwgc29cbi8vIHNhZmUgdG8gZXhjbHVkZS5cbnZhciB1c2VNaWNyb3Rhc2tGaXggPSBpc1VzaW5nTWljcm9UYXNrICYmICEoaXNGRiAmJiBOdW1iZXIoaXNGRlsxXSkgPD0gNTMpO1xuXG5mdW5jdGlvbiBhZGQkMSAoXG4gIG5hbWUsXG4gIGhhbmRsZXIsXG4gIGNhcHR1cmUsXG4gIHBhc3NpdmVcbikge1xuICAvLyBhc3luYyBlZGdlIGNhc2UgIzY1NjY6IGlubmVyIGNsaWNrIGV2ZW50IHRyaWdnZXJzIHBhdGNoLCBldmVudCBoYW5kbGVyXG4gIC8vIGF0dGFjaGVkIHRvIG91dGVyIGVsZW1lbnQgZHVyaW5nIHBhdGNoLCBhbmQgdHJpZ2dlcmVkIGFnYWluLiBUaGlzXG4gIC8vIGhhcHBlbnMgYmVjYXVzZSBicm93c2VycyBmaXJlIG1pY3JvdGFzayB0aWNrcyBiZXR3ZWVuIGV2ZW50IHByb3BhZ2F0aW9uLlxuICAvLyB0aGUgc29sdXRpb24gaXMgc2ltcGxlOiB3ZSBzYXZlIHRoZSB0aW1lc3RhbXAgd2hlbiBhIGhhbmRsZXIgaXMgYXR0YWNoZWQsXG4gIC8vIGFuZCB0aGUgaGFuZGxlciB3b3VsZCBvbmx5IGZpcmUgaWYgdGhlIGV2ZW50IHBhc3NlZCB0byBpdCB3YXMgZmlyZWRcbiAgLy8gQUZURVIgaXQgd2FzIGF0dGFjaGVkLlxuICBpZiAodXNlTWljcm90YXNrRml4KSB7XG4gICAgdmFyIGF0dGFjaGVkVGltZXN0YW1wID0gY3VycmVudEZsdXNoVGltZXN0YW1wO1xuICAgIHZhciBvcmlnaW5hbCA9IGhhbmRsZXI7XG4gICAgaGFuZGxlciA9IG9yaWdpbmFsLl93cmFwcGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChcbiAgICAgICAgLy8gbm8gYnViYmxpbmcsIHNob3VsZCBhbHdheXMgZmlyZS5cbiAgICAgICAgLy8gdGhpcyBpcyBqdXN0IGEgc2FmZXR5IG5ldCBpbiBjYXNlIGV2ZW50LnRpbWVTdGFtcCBpcyB1bnJlbGlhYmxlIGluXG4gICAgICAgIC8vIGNlcnRhaW4gd2VpcmQgZW52aXJvbm1lbnRzLi4uXG4gICAgICAgIGUudGFyZ2V0ID09PSBlLmN1cnJlbnRUYXJnZXQgfHxcbiAgICAgICAgLy8gZXZlbnQgaXMgZmlyZWQgYWZ0ZXIgaGFuZGxlciBhdHRhY2htZW50XG4gICAgICAgIGUudGltZVN0YW1wID49IGF0dGFjaGVkVGltZXN0YW1wIHx8XG4gICAgICAgIC8vIGJhaWwgZm9yIGVudmlyb25tZW50cyB0aGF0IGhhdmUgYnVnZ3kgZXZlbnQudGltZVN0YW1wIGltcGxlbWVudGF0aW9uc1xuICAgICAgICAvLyAjOTQ2MiBpT1MgOSBidWc6IGV2ZW50LnRpbWVTdGFtcCBpcyAwIGFmdGVyIGhpc3RvcnkucHVzaFN0YXRlXG4gICAgICAgIC8vICM5NjgxIFF0V2ViRW5naW5lIGV2ZW50LnRpbWVTdGFtcCBpcyBuZWdhdGl2ZSB2YWx1ZVxuICAgICAgICBlLnRpbWVTdGFtcCA8PSAwIHx8XG4gICAgICAgIC8vICM5NDQ4IGJhaWwgaWYgZXZlbnQgaXMgZmlyZWQgaW4gYW5vdGhlciBkb2N1bWVudCBpbiBhIG11bHRpLXBhZ2VcbiAgICAgICAgLy8gZWxlY3Ryb24vbncuanMgYXBwLCBzaW5jZSBldmVudC50aW1lU3RhbXAgd2lsbCBiZSB1c2luZyBhIGRpZmZlcmVudFxuICAgICAgICAvLyBzdGFydGluZyByZWZlcmVuY2VcbiAgICAgICAgZS50YXJnZXQub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnRcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgdGFyZ2V0JDEuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICBuYW1lLFxuICAgIGhhbmRsZXIsXG4gICAgc3VwcG9ydHNQYXNzaXZlXG4gICAgICA/IHsgY2FwdHVyZTogY2FwdHVyZSwgcGFzc2l2ZTogcGFzc2l2ZSB9XG4gICAgICA6IGNhcHR1cmVcbiAgKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlJDIgKFxuICBuYW1lLFxuICBoYW5kbGVyLFxuICBjYXB0dXJlLFxuICBfdGFyZ2V0XG4pIHtcbiAgKF90YXJnZXQgfHwgdGFyZ2V0JDEpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgbmFtZSxcbiAgICBoYW5kbGVyLl93cmFwcGVyIHx8IGhhbmRsZXIsXG4gICAgY2FwdHVyZVxuICApO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVET01MaXN0ZW5lcnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLm9uKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEub24pKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9uID0gdm5vZGUuZGF0YS5vbiB8fCB7fTtcbiAgdmFyIG9sZE9uID0gb2xkVm5vZGUuZGF0YS5vbiB8fCB7fTtcbiAgdGFyZ2V0JDEgPSB2bm9kZS5lbG07XG4gIG5vcm1hbGl6ZUV2ZW50cyhvbik7XG4gIHVwZGF0ZUxpc3RlbmVycyhvbiwgb2xkT24sIGFkZCQxLCByZW1vdmUkMiwgY3JlYXRlT25jZUhhbmRsZXIkMSwgdm5vZGUuY29udGV4dCk7XG4gIHRhcmdldCQxID0gdW5kZWZpbmVkO1xufVxuXG52YXIgZXZlbnRzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURPTUxpc3RlbmVycyxcbiAgdXBkYXRlOiB1cGRhdGVET01MaXN0ZW5lcnNcbn07XG5cbi8qICAqL1xuXG52YXIgc3ZnQ29udGFpbmVyO1xuXG5mdW5jdGlvbiB1cGRhdGVET01Qcm9wcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEuZG9tUHJvcHMpICYmIGlzVW5kZWYodm5vZGUuZGF0YS5kb21Qcm9wcykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIga2V5LCBjdXI7XG4gIHZhciBlbG0gPSB2bm9kZS5lbG07XG4gIHZhciBvbGRQcm9wcyA9IG9sZFZub2RlLmRhdGEuZG9tUHJvcHMgfHwge307XG4gIHZhciBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgfHwge307XG4gIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuICBpZiAoaXNEZWYocHJvcHMuX19vYl9fKSkge1xuICAgIHByb3BzID0gdm5vZGUuZGF0YS5kb21Qcm9wcyA9IGV4dGVuZCh7fSwgcHJvcHMpO1xuICB9XG5cbiAgZm9yIChrZXkgaW4gb2xkUHJvcHMpIHtcbiAgICBpZiAoIShrZXkgaW4gcHJvcHMpKSB7XG4gICAgICBlbG1ba2V5XSA9ICcnO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoa2V5IGluIHByb3BzKSB7XG4gICAgY3VyID0gcHJvcHNba2V5XTtcbiAgICAvLyBpZ25vcmUgY2hpbGRyZW4gaWYgdGhlIG5vZGUgaGFzIHRleHRDb250ZW50IG9yIGlubmVySFRNTCxcbiAgICAvLyBhcyB0aGVzZSB3aWxsIHRocm93IGF3YXkgZXhpc3RpbmcgRE9NIG5vZGVzIGFuZCBjYXVzZSByZW1vdmFsIGVycm9yc1xuICAgIC8vIG9uIHN1YnNlcXVlbnQgcGF0Y2hlcyAoIzMzNjApXG4gICAgaWYgKGtleSA9PT0gJ3RleHRDb250ZW50JyB8fCBrZXkgPT09ICdpbm5lckhUTUwnKSB7XG4gICAgICBpZiAodm5vZGUuY2hpbGRyZW4pIHsgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoID0gMDsgfVxuICAgICAgaWYgKGN1ciA9PT0gb2xkUHJvcHNba2V5XSkgeyBjb250aW51ZSB9XG4gICAgICAvLyAjNjYwMSB3b3JrIGFyb3VuZCBDaHJvbWUgdmVyc2lvbiA8PSA1NSBidWcgd2hlcmUgc2luZ2xlIHRleHROb2RlXG4gICAgICAvLyByZXBsYWNlZCBieSBpbm5lckhUTUwvdGV4dENvbnRlbnQgcmV0YWlucyBpdHMgcGFyZW50Tm9kZSBwcm9wZXJ0eVxuICAgICAgaWYgKGVsbS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBlbG0ucmVtb3ZlQ2hpbGQoZWxtLmNoaWxkTm9kZXNbMF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICd2YWx1ZScgJiYgZWxtLnRhZ05hbWUgIT09ICdQUk9HUkVTUycpIHtcbiAgICAgIC8vIHN0b3JlIHZhbHVlIGFzIF92YWx1ZSBhcyB3ZWxsIHNpbmNlXG4gICAgICAvLyBub24tc3RyaW5nIHZhbHVlcyB3aWxsIGJlIHN0cmluZ2lmaWVkXG4gICAgICBlbG0uX3ZhbHVlID0gY3VyO1xuICAgICAgLy8gYXZvaWQgcmVzZXR0aW5nIGN1cnNvciBwb3NpdGlvbiB3aGVuIHZhbHVlIGlzIHRoZSBzYW1lXG4gICAgICB2YXIgc3RyQ3VyID0gaXNVbmRlZihjdXIpID8gJycgOiBTdHJpbmcoY3VyKTtcbiAgICAgIGlmIChzaG91bGRVcGRhdGVWYWx1ZShlbG0sIHN0ckN1cikpIHtcbiAgICAgICAgZWxtLnZhbHVlID0gc3RyQ3VyO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnaW5uZXJIVE1MJyAmJiBpc1NWRyhlbG0udGFnTmFtZSkgJiYgaXNVbmRlZihlbG0uaW5uZXJIVE1MKSkge1xuICAgICAgLy8gSUUgZG9lc24ndCBzdXBwb3J0IGlubmVySFRNTCBmb3IgU1ZHIGVsZW1lbnRzXG4gICAgICBzdmdDb250YWluZXIgPSBzdmdDb250YWluZXIgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBzdmdDb250YWluZXIuaW5uZXJIVE1MID0gXCI8c3ZnPlwiICsgY3VyICsgXCI8L3N2Zz5cIjtcbiAgICAgIHZhciBzdmcgPSBzdmdDb250YWluZXIuZmlyc3RDaGlsZDtcbiAgICAgIHdoaWxlIChlbG0uZmlyc3RDaGlsZCkge1xuICAgICAgICBlbG0ucmVtb3ZlQ2hpbGQoZWxtLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHN2Zy5maXJzdENoaWxkKSB7XG4gICAgICAgIGVsbS5hcHBlbmRDaGlsZChzdmcuZmlyc3RDaGlsZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIC8vIHNraXAgdGhlIHVwZGF0ZSBpZiBvbGQgYW5kIG5ldyBWRE9NIHN0YXRlIGlzIHRoZSBzYW1lLlxuICAgICAgLy8gYHZhbHVlYCBpcyBoYW5kbGVkIHNlcGFyYXRlbHkgYmVjYXVzZSB0aGUgRE9NIHZhbHVlIG1heSBiZSB0ZW1wb3JhcmlseVxuICAgICAgLy8gb3V0IG9mIHN5bmMgd2l0aCBWRE9NIHN0YXRlIGR1ZSB0byBmb2N1cywgY29tcG9zaXRpb24gYW5kIG1vZGlmaWVycy5cbiAgICAgIC8vIFRoaXMgICM0NTIxIGJ5IHNraXBwaW5nIHRoZSB1bm5lY2Vzc2FyeSBgY2hlY2tlZGAgdXBkYXRlLlxuICAgICAgY3VyICE9PSBvbGRQcm9wc1trZXldXG4gICAgKSB7XG4gICAgICAvLyBzb21lIHByb3BlcnR5IHVwZGF0ZXMgY2FuIHRocm93XG4gICAgICAvLyBlLmcuIGB2YWx1ZWAgb24gPHByb2dyZXNzPiB3LyBub24tZmluaXRlIHZhbHVlXG4gICAgICB0cnkge1xuICAgICAgICBlbG1ba2V5XSA9IGN1cjtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuICB9XG59XG5cbi8vIGNoZWNrIHBsYXRmb3Jtcy93ZWIvdXRpbC9hdHRycy5qcyBhY2NlcHRWYWx1ZVxuXG5cbmZ1bmN0aW9uIHNob3VsZFVwZGF0ZVZhbHVlIChlbG0sIGNoZWNrVmFsKSB7XG4gIHJldHVybiAoIWVsbS5jb21wb3NpbmcgJiYgKFxuICAgIGVsbS50YWdOYW1lID09PSAnT1BUSU9OJyB8fFxuICAgIGlzTm90SW5Gb2N1c0FuZERpcnR5KGVsbSwgY2hlY2tWYWwpIHx8XG4gICAgaXNEaXJ0eVdpdGhNb2RpZmllcnMoZWxtLCBjaGVja1ZhbClcbiAgKSlcbn1cblxuZnVuY3Rpb24gaXNOb3RJbkZvY3VzQW5kRGlydHkgKGVsbSwgY2hlY2tWYWwpIHtcbiAgLy8gcmV0dXJuIHRydWUgd2hlbiB0ZXh0Ym94ICgubnVtYmVyIGFuZCAudHJpbSkgbG9zZXMgZm9jdXMgYW5kIGl0cyB2YWx1ZSBpc1xuICAvLyBub3QgZXF1YWwgdG8gdGhlIHVwZGF0ZWQgdmFsdWVcbiAgdmFyIG5vdEluRm9jdXMgPSB0cnVlO1xuICAvLyAjNjE1N1xuICAvLyB3b3JrIGFyb3VuZCBJRSBidWcgd2hlbiBhY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpbiBhbiBpZnJhbWVcbiAgdHJ5IHsgbm90SW5Gb2N1cyA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGVsbTsgfSBjYXRjaCAoZSkge31cbiAgcmV0dXJuIG5vdEluRm9jdXMgJiYgZWxtLnZhbHVlICE9PSBjaGVja1ZhbFxufVxuXG5mdW5jdGlvbiBpc0RpcnR5V2l0aE1vZGlmaWVycyAoZWxtLCBuZXdWYWwpIHtcbiAgdmFyIHZhbHVlID0gZWxtLnZhbHVlO1xuICB2YXIgbW9kaWZpZXJzID0gZWxtLl92TW9kaWZpZXJzOyAvLyBpbmplY3RlZCBieSB2LW1vZGVsIHJ1bnRpbWVcbiAgaWYgKGlzRGVmKG1vZGlmaWVycykpIHtcbiAgICBpZiAobW9kaWZpZXJzLm51bWJlcikge1xuICAgICAgcmV0dXJuIHRvTnVtYmVyKHZhbHVlKSAhPT0gdG9OdW1iZXIobmV3VmFsKVxuICAgIH1cbiAgICBpZiAobW9kaWZpZXJzLnRyaW0pIHtcbiAgICAgIHJldHVybiB2YWx1ZS50cmltKCkgIT09IG5ld1ZhbC50cmltKClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlICE9PSBuZXdWYWxcbn1cblxudmFyIGRvbVByb3BzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURPTVByb3BzLFxuICB1cGRhdGU6IHVwZGF0ZURPTVByb3BzXG59O1xuXG4vKiAgKi9cblxudmFyIHBhcnNlU3R5bGVUZXh0ID0gY2FjaGVkKGZ1bmN0aW9uIChjc3NUZXh0KSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGxpc3REZWxpbWl0ZXIgPSAvOyg/IVteKF0qXFwpKS9nO1xuICB2YXIgcHJvcGVydHlEZWxpbWl0ZXIgPSAvOiguKykvO1xuICBjc3NUZXh0LnNwbGl0KGxpc3REZWxpbWl0ZXIpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBpZiAoaXRlbSkge1xuICAgICAgdmFyIHRtcCA9IGl0ZW0uc3BsaXQocHJvcGVydHlEZWxpbWl0ZXIpO1xuICAgICAgdG1wLmxlbmd0aCA+IDEgJiYgKHJlc1t0bXBbMF0udHJpbSgpXSA9IHRtcFsxXS50cmltKCkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vLyBtZXJnZSBzdGF0aWMgYW5kIGR5bmFtaWMgc3R5bGUgZGF0YSBvbiB0aGUgc2FtZSB2bm9kZVxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVEYXRhIChkYXRhKSB7XG4gIHZhciBzdHlsZSA9IG5vcm1hbGl6ZVN0eWxlQmluZGluZyhkYXRhLnN0eWxlKTtcbiAgLy8gc3RhdGljIHN0eWxlIGlzIHByZS1wcm9jZXNzZWQgaW50byBhbiBvYmplY3QgZHVyaW5nIGNvbXBpbGF0aW9uXG4gIC8vIGFuZCBpcyBhbHdheXMgYSBmcmVzaCBvYmplY3QsIHNvIGl0J3Mgc2FmZSB0byBtZXJnZSBpbnRvIGl0XG4gIHJldHVybiBkYXRhLnN0YXRpY1N0eWxlXG4gICAgPyBleHRlbmQoZGF0YS5zdGF0aWNTdHlsZSwgc3R5bGUpXG4gICAgOiBzdHlsZVxufVxuXG4vLyBub3JtYWxpemUgcG9zc2libGUgYXJyYXkgLyBzdHJpbmcgdmFsdWVzIGludG8gT2JqZWN0XG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZUJpbmRpbmcgKGJpbmRpbmdTdHlsZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShiaW5kaW5nU3R5bGUpKSB7XG4gICAgcmV0dXJuIHRvT2JqZWN0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICBpZiAodHlwZW9mIGJpbmRpbmdTdHlsZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcGFyc2VTdHlsZVRleHQoYmluZGluZ1N0eWxlKVxuICB9XG4gIHJldHVybiBiaW5kaW5nU3R5bGVcbn1cblxuLyoqXG4gKiBwYXJlbnQgY29tcG9uZW50IHN0eWxlIHNob3VsZCBiZSBhZnRlciBjaGlsZCdzXG4gKiBzbyB0aGF0IHBhcmVudCBjb21wb25lbnQncyBzdHlsZSBjb3VsZCBvdmVycmlkZSBpdFxuICovXG5mdW5jdGlvbiBnZXRTdHlsZSAodm5vZGUsIGNoZWNrQ2hpbGQpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgc3R5bGVEYXRhO1xuXG4gIGlmIChjaGVja0NoaWxkKSB7XG4gICAgdmFyIGNoaWxkTm9kZSA9IHZub2RlO1xuICAgIHdoaWxlIChjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoXG4gICAgICAgIGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuZGF0YSAmJlxuICAgICAgICAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKGNoaWxkTm9kZS5kYXRhKSlcbiAgICAgICkge1xuICAgICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICgoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHZub2RlLmRhdGEpKSkge1xuICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gIH1cblxuICB2YXIgcGFyZW50Tm9kZSA9IHZub2RlO1xuICB3aGlsZSAoKHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudCkpIHtcbiAgICBpZiAocGFyZW50Tm9kZS5kYXRhICYmIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEocGFyZW50Tm9kZS5kYXRhKSkpIHtcbiAgICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBjc3NWYXJSRSA9IC9eLS0vO1xudmFyIGltcG9ydGFudFJFID0gL1xccyohaW1wb3J0YW50JC87XG52YXIgc2V0UHJvcCA9IGZ1bmN0aW9uIChlbCwgbmFtZSwgdmFsKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoY3NzVmFyUkUudGVzdChuYW1lKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbCk7XG4gIH0gZWxzZSBpZiAoaW1wb3J0YW50UkUudGVzdCh2YWwpKSB7XG4gICAgZWwuc3R5bGUuc2V0UHJvcGVydHkoaHlwaGVuYXRlKG5hbWUpLCB2YWwucmVwbGFjZShpbXBvcnRhbnRSRSwgJycpLCAnaW1wb3J0YW50Jyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG5vcm1hbGl6ZWROYW1lID0gbm9ybWFsaXplKG5hbWUpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgIC8vIFN1cHBvcnQgdmFsdWVzIGFycmF5IGNyZWF0ZWQgYnkgYXV0b3ByZWZpeGVyLCBlLmcuXG4gICAgICAvLyB7ZGlzcGxheTogW1wiLXdlYmtpdC1ib3hcIiwgXCItbXMtZmxleGJveFwiLCBcImZsZXhcIl19XG4gICAgICAvLyBTZXQgdGhlbSBvbmUgYnkgb25lLCBhbmQgdGhlIGJyb3dzZXIgd2lsbCBvbmx5IHNldCB0aG9zZSBpdCBjYW4gcmVjb2duaXplXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdmFsLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGVsLnN0eWxlW25vcm1hbGl6ZWROYW1lXSA9IHZhbFtpXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdID0gdmFsO1xuICAgIH1cbiAgfVxufTtcblxudmFyIHZlbmRvck5hbWVzID0gWydXZWJraXQnLCAnTW96JywgJ21zJ107XG5cbnZhciBlbXB0eVN0eWxlO1xudmFyIG5vcm1hbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAocHJvcCkge1xuICBlbXB0eVN0eWxlID0gZW1wdHlTdHlsZSB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKS5zdHlsZTtcbiAgcHJvcCA9IGNhbWVsaXplKHByb3ApO1xuICBpZiAocHJvcCAhPT0gJ2ZpbHRlcicgJiYgKHByb3AgaW4gZW1wdHlTdHlsZSkpIHtcbiAgICByZXR1cm4gcHJvcFxuICB9XG4gIHZhciBjYXBOYW1lID0gcHJvcC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3Auc2xpY2UoMSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmVuZG9yTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbmFtZSA9IHZlbmRvck5hbWVzW2ldICsgY2FwTmFtZTtcbiAgICBpZiAobmFtZSBpbiBlbXB0eVN0eWxlKSB7XG4gICAgICByZXR1cm4gbmFtZVxuICAgIH1cbiAgfVxufSk7XG5cbmZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgb2xkRGF0YSA9IG9sZFZub2RlLmRhdGE7XG5cbiAgaWYgKGlzVW5kZWYoZGF0YS5zdGF0aWNTdHlsZSkgJiYgaXNVbmRlZihkYXRhLnN0eWxlKSAmJlxuICAgIGlzVW5kZWYob2xkRGF0YS5zdGF0aWNTdHlsZSkgJiYgaXNVbmRlZihvbGREYXRhLnN0eWxlKVxuICApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjdXIsIG5hbWU7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZFN0YXRpY1N0eWxlID0gb2xkRGF0YS5zdGF0aWNTdHlsZTtcbiAgdmFyIG9sZFN0eWxlQmluZGluZyA9IG9sZERhdGEubm9ybWFsaXplZFN0eWxlIHx8IG9sZERhdGEuc3R5bGUgfHwge307XG5cbiAgLy8gaWYgc3RhdGljIHN0eWxlIGV4aXN0cywgc3R5bGViaW5kaW5nIGFscmVhZHkgbWVyZ2VkIGludG8gaXQgd2hlbiBkb2luZyBub3JtYWxpemVTdHlsZURhdGFcbiAgdmFyIG9sZFN0eWxlID0gb2xkU3RhdGljU3R5bGUgfHwgb2xkU3R5bGVCaW5kaW5nO1xuXG4gIHZhciBzdHlsZSA9IG5vcm1hbGl6ZVN0eWxlQmluZGluZyh2bm9kZS5kYXRhLnN0eWxlKSB8fCB7fTtcblxuICAvLyBzdG9yZSBub3JtYWxpemVkIHN0eWxlIHVuZGVyIGEgZGlmZmVyZW50IGtleSBmb3IgbmV4dCBkaWZmXG4gIC8vIG1ha2Ugc3VyZSB0byBjbG9uZSBpdCBpZiBpdCdzIHJlYWN0aXZlLCBzaW5jZSB0aGUgdXNlciBsaWtlbHkgd2FudHNcbiAgLy8gdG8gbXV0YXRlIGl0LlxuICB2bm9kZS5kYXRhLm5vcm1hbGl6ZWRTdHlsZSA9IGlzRGVmKHN0eWxlLl9fb2JfXylcbiAgICA/IGV4dGVuZCh7fSwgc3R5bGUpXG4gICAgOiBzdHlsZTtcblxuICB2YXIgbmV3U3R5bGUgPSBnZXRTdHlsZSh2bm9kZSwgdHJ1ZSk7XG5cbiAgZm9yIChuYW1lIGluIG9sZFN0eWxlKSB7XG4gICAgaWYgKGlzVW5kZWYobmV3U3R5bGVbbmFtZV0pKSB7XG4gICAgICBzZXRQcm9wKGVsLCBuYW1lLCAnJyk7XG4gICAgfVxuICB9XG4gIGZvciAobmFtZSBpbiBuZXdTdHlsZSkge1xuICAgIGN1ciA9IG5ld1N0eWxlW25hbWVdO1xuICAgIGlmIChjdXIgIT09IG9sZFN0eWxlW25hbWVdKSB7XG4gICAgICAvLyBpZTkgc2V0dGluZyB0byBudWxsIGhhcyBubyBlZmZlY3QsIG11c3QgdXNlIGVtcHR5IHN0cmluZ1xuICAgICAgc2V0UHJvcChlbCwgbmFtZSwgY3VyID09IG51bGwgPyAnJyA6IGN1cik7XG4gICAgfVxuICB9XG59XG5cbnZhciBzdHlsZSA9IHtcbiAgY3JlYXRlOiB1cGRhdGVTdHlsZSxcbiAgdXBkYXRlOiB1cGRhdGVTdHlsZVxufTtcblxuLyogICovXG5cbnZhciB3aGl0ZXNwYWNlUkUgPSAvXFxzKy87XG5cbi8qKlxuICogQWRkIGNsYXNzIHdpdGggY29tcGF0aWJpbGl0eSBmb3IgU1ZHIHNpbmNlIGNsYXNzTGlzdCBpcyBub3Qgc3VwcG9ydGVkIG9uXG4gKiBTVkcgZWxlbWVudHMgaW4gSUVcbiAqL1xuZnVuY3Rpb24gYWRkQ2xhc3MgKGVsLCBjbHMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2xzIHx8ICEoY2xzID0gY2xzLnRyaW0oKSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICBpZiAoY2xzLmluZGV4T2YoJyAnKSA+IC0xKSB7XG4gICAgICBjbHMuc3BsaXQod2hpdGVzcGFjZVJFKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7IHJldHVybiBlbC5jbGFzc0xpc3QuYWRkKGMpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuY2xhc3NMaXN0LmFkZChjbHMpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgY3VyID0gXCIgXCIgKyAoZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArIFwiIFwiO1xuICAgIGlmIChjdXIuaW5kZXhPZignICcgKyBjbHMgKyAnICcpIDwgMCkge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIChjdXIgKyBjbHMpLnRyaW0oKSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlIGNsYXNzIHdpdGggY29tcGF0aWJpbGl0eSBmb3IgU1ZHIHNpbmNlIGNsYXNzTGlzdCBpcyBub3Qgc3VwcG9ydGVkIG9uXG4gKiBTVkcgZWxlbWVudHMgaW4gSUVcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQ2xhc3MgKGVsLCBjbHMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2xzIHx8ICEoY2xzID0gY2xzLnRyaW0oKSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICBpZiAoY2xzLmluZGV4T2YoJyAnKSA+IC0xKSB7XG4gICAgICBjbHMuc3BsaXQod2hpdGVzcGFjZVJFKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7IHJldHVybiBlbC5jbGFzc0xpc3QucmVtb3ZlKGMpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbHMpO1xuICAgIH1cbiAgICBpZiAoIWVsLmNsYXNzTGlzdC5sZW5ndGgpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9IFwiIFwiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIjtcbiAgICB2YXIgdGFyID0gJyAnICsgY2xzICsgJyAnO1xuICAgIHdoaWxlIChjdXIuaW5kZXhPZih0YXIpID49IDApIHtcbiAgICAgIGN1ciA9IGN1ci5yZXBsYWNlKHRhciwgJyAnKTtcbiAgICB9XG4gICAgY3VyID0gY3VyLnRyaW0oKTtcbiAgICBpZiAoY3VyKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY3VyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb24gKGRlZiQkMSkge1xuICBpZiAoIWRlZiQkMSkge1xuICAgIHJldHVyblxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0eXBlb2YgZGVmJCQxID09PSAnb2JqZWN0Jykge1xuICAgIHZhciByZXMgPSB7fTtcbiAgICBpZiAoZGVmJCQxLmNzcyAhPT0gZmFsc2UpIHtcbiAgICAgIGV4dGVuZChyZXMsIGF1dG9Dc3NUcmFuc2l0aW9uKGRlZiQkMS5uYW1lIHx8ICd2JykpO1xuICAgIH1cbiAgICBleHRlbmQocmVzLCBkZWYkJDEpO1xuICAgIHJldHVybiByZXNcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmJCQxID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBhdXRvQ3NzVHJhbnNpdGlvbihkZWYkJDEpXG4gIH1cbn1cblxudmFyIGF1dG9Dc3NUcmFuc2l0aW9uID0gY2FjaGVkKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiB7XG4gICAgZW50ZXJDbGFzczogKG5hbWUgKyBcIi1lbnRlclwiKSxcbiAgICBlbnRlclRvQ2xhc3M6IChuYW1lICsgXCItZW50ZXItdG9cIiksXG4gICAgZW50ZXJBY3RpdmVDbGFzczogKG5hbWUgKyBcIi1lbnRlci1hY3RpdmVcIiksXG4gICAgbGVhdmVDbGFzczogKG5hbWUgKyBcIi1sZWF2ZVwiKSxcbiAgICBsZWF2ZVRvQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtdG9cIiksXG4gICAgbGVhdmVBY3RpdmVDbGFzczogKG5hbWUgKyBcIi1sZWF2ZS1hY3RpdmVcIilcbiAgfVxufSk7XG5cbnZhciBoYXNUcmFuc2l0aW9uID0gaW5Ccm93c2VyICYmICFpc0lFOTtcbnZhciBUUkFOU0lUSU9OID0gJ3RyYW5zaXRpb24nO1xudmFyIEFOSU1BVElPTiA9ICdhbmltYXRpb24nO1xuXG4vLyBUcmFuc2l0aW9uIHByb3BlcnR5L2V2ZW50IHNuaWZmaW5nXG52YXIgdHJhbnNpdGlvblByb3AgPSAndHJhbnNpdGlvbic7XG52YXIgdHJhbnNpdGlvbkVuZEV2ZW50ID0gJ3RyYW5zaXRpb25lbmQnO1xudmFyIGFuaW1hdGlvblByb3AgPSAnYW5pbWF0aW9uJztcbnZhciBhbmltYXRpb25FbmRFdmVudCA9ICdhbmltYXRpb25lbmQnO1xuaWYgKGhhc1RyYW5zaXRpb24pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh3aW5kb3cub250cmFuc2l0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXR0cmFuc2l0aW9uZW5kICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgdHJhbnNpdGlvblByb3AgPSAnV2Via2l0VHJhbnNpdGlvbic7XG4gICAgdHJhbnNpdGlvbkVuZEV2ZW50ID0gJ3dlYmtpdFRyYW5zaXRpb25FbmQnO1xuICB9XG4gIGlmICh3aW5kb3cub25hbmltYXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJlxuICAgIHdpbmRvdy5vbndlYmtpdGFuaW1hdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIGFuaW1hdGlvblByb3AgPSAnV2Via2l0QW5pbWF0aW9uJztcbiAgICBhbmltYXRpb25FbmRFdmVudCA9ICd3ZWJraXRBbmltYXRpb25FbmQnO1xuICB9XG59XG5cbi8vIGJpbmRpbmcgdG8gd2luZG93IGlzIG5lY2Vzc2FyeSB0byBtYWtlIGhvdCByZWxvYWQgd29yayBpbiBJRSBpbiBzdHJpY3QgbW9kZVxudmFyIHJhZiA9IGluQnJvd3NlclxuICA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgICA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpXG4gICAgOiBzZXRUaW1lb3V0XG4gIDogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gZnVuY3Rpb24gKGZuKSB7IHJldHVybiBmbigpOyB9O1xuXG5mdW5jdGlvbiBuZXh0RnJhbWUgKGZuKSB7XG4gIHJhZihmdW5jdGlvbiAoKSB7XG4gICAgcmFmKGZuKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZFRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICB2YXIgdHJhbnNpdGlvbkNsYXNzZXMgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXMgfHwgKGVsLl90cmFuc2l0aW9uQ2xhc3NlcyA9IFtdKTtcbiAgaWYgKHRyYW5zaXRpb25DbGFzc2VzLmluZGV4T2YoY2xzKSA8IDApIHtcbiAgICB0cmFuc2l0aW9uQ2xhc3Nlcy5wdXNoKGNscyk7XG4gICAgYWRkQ2xhc3MoZWwsIGNscyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlVHJhbnNpdGlvbkNsYXNzIChlbCwgY2xzKSB7XG4gIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICByZW1vdmUoZWwuX3RyYW5zaXRpb25DbGFzc2VzLCBjbHMpO1xuICB9XG4gIHJlbW92ZUNsYXNzKGVsLCBjbHMpO1xufVxuXG5mdW5jdGlvbiB3aGVuVHJhbnNpdGlvbkVuZHMgKFxuICBlbCxcbiAgZXhwZWN0ZWRUeXBlLFxuICBjYlxuKSB7XG4gIHZhciByZWYgPSBnZXRUcmFuc2l0aW9uSW5mbyhlbCwgZXhwZWN0ZWRUeXBlKTtcbiAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgdmFyIHRpbWVvdXQgPSByZWYudGltZW91dDtcbiAgdmFyIHByb3BDb3VudCA9IHJlZi5wcm9wQ291bnQ7XG4gIGlmICghdHlwZSkgeyByZXR1cm4gY2IoKSB9XG4gIHZhciBldmVudCA9IHR5cGUgPT09IFRSQU5TSVRJT04gPyB0cmFuc2l0aW9uRW5kRXZlbnQgOiBhbmltYXRpb25FbmRFdmVudDtcbiAgdmFyIGVuZGVkID0gMDtcbiAgdmFyIGVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBvbkVuZCk7XG4gICAgY2IoKTtcbiAgfTtcbiAgdmFyIG9uRW5kID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IGVsKSB7XG4gICAgICBpZiAoKytlbmRlZCA+PSBwcm9wQ291bnQpIHtcbiAgICAgICAgZW5kKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZW5kZWQgPCBwcm9wQ291bnQpIHtcbiAgICAgIGVuZCgpO1xuICAgIH1cbiAgfSwgdGltZW91dCArIDEpO1xuICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBvbkVuZCk7XG59XG5cbnZhciB0cmFuc2Zvcm1SRSA9IC9cXGIodHJhbnNmb3JtfGFsbCkoLHwkKS87XG5cbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25JbmZvIChlbCwgZXhwZWN0ZWRUeXBlKSB7XG4gIHZhciBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gIC8vIEpTRE9NIG1heSByZXR1cm4gdW5kZWZpbmVkIGZvciB0cmFuc2l0aW9uIHByb3BlcnRpZXNcbiAgdmFyIHRyYW5zaXRpb25EZWxheXMgPSAoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ0RlbGF5J10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9ucyA9IChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnRHVyYXRpb24nXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciB0cmFuc2l0aW9uVGltZW91dCA9IGdldFRpbWVvdXQodHJhbnNpdGlvbkRlbGF5cywgdHJhbnNpdGlvbkR1cmF0aW9ucyk7XG4gIHZhciBhbmltYXRpb25EZWxheXMgPSAoc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRGVsYXknXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciBhbmltYXRpb25EdXJhdGlvbnMgPSAoc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRHVyYXRpb24nXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciBhbmltYXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dChhbmltYXRpb25EZWxheXMsIGFuaW1hdGlvbkR1cmF0aW9ucyk7XG5cbiAgdmFyIHR5cGU7XG4gIHZhciB0aW1lb3V0ID0gMDtcbiAgdmFyIHByb3BDb3VudCA9IDA7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZXhwZWN0ZWRUeXBlID09PSBUUkFOU0lUSU9OKSB7XG4gICAgaWYgKHRyYW5zaXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgdHlwZSA9IFRSQU5TSVRJT047XG4gICAgICB0aW1lb3V0ID0gdHJhbnNpdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSBBTklNQVRJT04pIHtcbiAgICBpZiAoYW5pbWF0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBBTklNQVRJT047XG4gICAgICB0aW1lb3V0ID0gYW5pbWF0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRpbWVvdXQgPSBNYXRoLm1heCh0cmFuc2l0aW9uVGltZW91dCwgYW5pbWF0aW9uVGltZW91dCk7XG4gICAgdHlwZSA9IHRpbWVvdXQgPiAwXG4gICAgICA/IHRyYW5zaXRpb25UaW1lb3V0ID4gYW5pbWF0aW9uVGltZW91dFxuICAgICAgICA/IFRSQU5TSVRJT05cbiAgICAgICAgOiBBTklNQVRJT05cbiAgICAgIDogbnVsbDtcbiAgICBwcm9wQ291bnQgPSB0eXBlXG4gICAgICA/IHR5cGUgPT09IFRSQU5TSVRJT05cbiAgICAgICAgPyB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgICA6IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgIDogMDtcbiAgfVxuICB2YXIgaGFzVHJhbnNmb3JtID1cbiAgICB0eXBlID09PSBUUkFOU0lUSU9OICYmXG4gICAgdHJhbnNmb3JtUkUudGVzdChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnUHJvcGVydHknXSk7XG4gIHJldHVybiB7XG4gICAgdHlwZTogdHlwZSxcbiAgICB0aW1lb3V0OiB0aW1lb3V0LFxuICAgIHByb3BDb3VudDogcHJvcENvdW50LFxuICAgIGhhc1RyYW5zZm9ybTogaGFzVHJhbnNmb3JtXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGltZW91dCAoZGVsYXlzLCBkdXJhdGlvbnMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgd2hpbGUgKGRlbGF5cy5sZW5ndGggPCBkdXJhdGlvbnMubGVuZ3RoKSB7XG4gICAgZGVsYXlzID0gZGVsYXlzLmNvbmNhdChkZWxheXMpO1xuICB9XG5cbiAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsIGR1cmF0aW9ucy5tYXAoZnVuY3Rpb24gKGQsIGkpIHtcbiAgICByZXR1cm4gdG9NcyhkKSArIHRvTXMoZGVsYXlzW2ldKVxuICB9KSlcbn1cblxuLy8gT2xkIHZlcnNpb25zIG9mIENocm9taXVtIChiZWxvdyA2MS4wLjMxNjMuMTAwKSBmb3JtYXRzIGZsb2F0aW5nIHBvaW50ZXIgbnVtYmVyc1xuLy8gaW4gYSBsb2NhbGUtZGVwZW5kZW50IHdheSwgdXNpbmcgYSBjb21tYSBpbnN0ZWFkIG9mIGEgZG90LlxuLy8gSWYgY29tbWEgaXMgbm90IHJlcGxhY2VkIHdpdGggYSBkb3QsIHRoZSBpbnB1dCB3aWxsIGJlIHJvdW5kZWQgZG93biAoaS5lLiBhY3Rpbmdcbi8vIGFzIGEgZmxvb3IgZnVuY3Rpb24pIGNhdXNpbmcgdW5leHBlY3RlZCBiZWhhdmlvcnNcbmZ1bmN0aW9uIHRvTXMgKHMpIHtcbiAgcmV0dXJuIE51bWJlcihzLnNsaWNlKDAsIC0xKS5yZXBsYWNlKCcsJywgJy4nKSkgKiAxMDAwXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBlbnRlciAodm5vZGUsIHRvZ2dsZURpc3BsYXkpIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuXG4gIC8vIGNhbGwgbGVhdmUgY2FsbGJhY2sgbm93XG4gIGlmIChpc0RlZihlbC5fbGVhdmVDYikpIHtcbiAgICBlbC5fbGVhdmVDYi5jYW5jZWxsZWQgPSB0cnVlO1xuICAgIGVsLl9sZWF2ZUNiKCk7XG4gIH1cblxuICB2YXIgZGF0YSA9IHJlc29sdmVUcmFuc2l0aW9uKHZub2RlLmRhdGEudHJhbnNpdGlvbik7XG4gIGlmIChpc1VuZGVmKGRhdGEpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKGVsLl9lbnRlckNiKSB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNzcyA9IGRhdGEuY3NzO1xuICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgdmFyIGVudGVyQ2xhc3MgPSBkYXRhLmVudGVyQ2xhc3M7XG4gIHZhciBlbnRlclRvQ2xhc3MgPSBkYXRhLmVudGVyVG9DbGFzcztcbiAgdmFyIGVudGVyQWN0aXZlQ2xhc3MgPSBkYXRhLmVudGVyQWN0aXZlQ2xhc3M7XG4gIHZhciBhcHBlYXJDbGFzcyA9IGRhdGEuYXBwZWFyQ2xhc3M7XG4gIHZhciBhcHBlYXJUb0NsYXNzID0gZGF0YS5hcHBlYXJUb0NsYXNzO1xuICB2YXIgYXBwZWFyQWN0aXZlQ2xhc3MgPSBkYXRhLmFwcGVhckFjdGl2ZUNsYXNzO1xuICB2YXIgYmVmb3JlRW50ZXIgPSBkYXRhLmJlZm9yZUVudGVyO1xuICB2YXIgZW50ZXIgPSBkYXRhLmVudGVyO1xuICB2YXIgYWZ0ZXJFbnRlciA9IGRhdGEuYWZ0ZXJFbnRlcjtcbiAgdmFyIGVudGVyQ2FuY2VsbGVkID0gZGF0YS5lbnRlckNhbmNlbGxlZDtcbiAgdmFyIGJlZm9yZUFwcGVhciA9IGRhdGEuYmVmb3JlQXBwZWFyO1xuICB2YXIgYXBwZWFyID0gZGF0YS5hcHBlYXI7XG4gIHZhciBhZnRlckFwcGVhciA9IGRhdGEuYWZ0ZXJBcHBlYXI7XG4gIHZhciBhcHBlYXJDYW5jZWxsZWQgPSBkYXRhLmFwcGVhckNhbmNlbGxlZDtcbiAgdmFyIGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcblxuICAvLyBhY3RpdmVJbnN0YW5jZSB3aWxsIGFsd2F5cyBiZSB0aGUgPHRyYW5zaXRpb24+IGNvbXBvbmVudCBtYW5hZ2luZyB0aGlzXG4gIC8vIHRyYW5zaXRpb24uIE9uZSBlZGdlIGNhc2UgdG8gY2hlY2sgaXMgd2hlbiB0aGUgPHRyYW5zaXRpb24+IGlzIHBsYWNlZFxuICAvLyBhcyB0aGUgcm9vdCBub2RlIG9mIGEgY2hpbGQgY29tcG9uZW50LiBJbiB0aGF0IGNhc2Ugd2UgbmVlZCB0byBjaGVja1xuICAvLyA8dHJhbnNpdGlvbj4ncyBwYXJlbnQgZm9yIGFwcGVhciBjaGVjay5cbiAgdmFyIGNvbnRleHQgPSBhY3RpdmVJbnN0YW5jZTtcbiAgdmFyIHRyYW5zaXRpb25Ob2RlID0gYWN0aXZlSW5zdGFuY2UuJHZub2RlO1xuICB3aGlsZSAodHJhbnNpdGlvbk5vZGUgJiYgdHJhbnNpdGlvbk5vZGUucGFyZW50KSB7XG4gICAgY29udGV4dCA9IHRyYW5zaXRpb25Ob2RlLmNvbnRleHQ7XG4gICAgdHJhbnNpdGlvbk5vZGUgPSB0cmFuc2l0aW9uTm9kZS5wYXJlbnQ7XG4gIH1cblxuICB2YXIgaXNBcHBlYXIgPSAhY29udGV4dC5faXNNb3VudGVkIHx8ICF2bm9kZS5pc1Jvb3RJbnNlcnQ7XG5cbiAgaWYgKGlzQXBwZWFyICYmICFhcHBlYXIgJiYgYXBwZWFyICE9PSAnJykge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIHN0YXJ0Q2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJDbGFzc1xuICAgID8gYXBwZWFyQ2xhc3NcbiAgICA6IGVudGVyQ2xhc3M7XG4gIHZhciBhY3RpdmVDbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhckFjdGl2ZUNsYXNzXG4gICAgPyBhcHBlYXJBY3RpdmVDbGFzc1xuICAgIDogZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIHRvQ2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJUb0NsYXNzXG4gICAgPyBhcHBlYXJUb0NsYXNzXG4gICAgOiBlbnRlclRvQ2xhc3M7XG5cbiAgdmFyIGJlZm9yZUVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYmVmb3JlQXBwZWFyIHx8IGJlZm9yZUVudGVyKVxuICAgIDogYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKHR5cGVvZiBhcHBlYXIgPT09ICdmdW5jdGlvbicgPyBhcHBlYXIgOiBlbnRlcilcbiAgICA6IGVudGVyO1xuICB2YXIgYWZ0ZXJFbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKGFmdGVyQXBwZWFyIHx8IGFmdGVyRW50ZXIpXG4gICAgOiBhZnRlckVudGVyO1xuICB2YXIgZW50ZXJDYW5jZWxsZWRIb29rID0gaXNBcHBlYXJcbiAgICA/IChhcHBlYXJDYW5jZWxsZWQgfHwgZW50ZXJDYW5jZWxsZWQpXG4gICAgOiBlbnRlckNhbmNlbGxlZDtcblxuICB2YXIgZXhwbGljaXRFbnRlckR1cmF0aW9uID0gdG9OdW1iZXIoXG4gICAgaXNPYmplY3QoZHVyYXRpb24pXG4gICAgICA/IGR1cmF0aW9uLmVudGVyXG4gICAgICA6IGR1cmF0aW9uXG4gICk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZXhwbGljaXRFbnRlckR1cmF0aW9uICE9IG51bGwpIHtcbiAgICBjaGVja0R1cmF0aW9uKGV4cGxpY2l0RW50ZXJEdXJhdGlvbiwgJ2VudGVyJywgdm5vZGUpO1xuICB9XG5cbiAgdmFyIGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlICYmICFpc0lFOTtcbiAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGVudGVySG9vayk7XG5cbiAgdmFyIGNiID0gZWwuX2VudGVyQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgYWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgICAgfVxuICAgICAgZW50ZXJDYW5jZWxsZWRIb29rICYmIGVudGVyQ2FuY2VsbGVkSG9vayhlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyRW50ZXJIb29rICYmIGFmdGVyRW50ZXJIb29rKGVsKTtcbiAgICB9XG4gICAgZWwuX2VudGVyQ2IgPSBudWxsO1xuICB9KTtcblxuICBpZiAoIXZub2RlLmRhdGEuc2hvdykge1xuICAgIC8vIHJlbW92ZSBwZW5kaW5nIGxlYXZlIGVsZW1lbnQgb24gZW50ZXIgYnkgaW5qZWN0aW5nIGFuIGluc2VydCBob29rXG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdpbnNlcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50Tm9kZTtcbiAgICAgIHZhciBwZW5kaW5nTm9kZSA9IHBhcmVudCAmJiBwYXJlbnQuX3BlbmRpbmcgJiYgcGFyZW50Ll9wZW5kaW5nW3Zub2RlLmtleV07XG4gICAgICBpZiAocGVuZGluZ05vZGUgJiZcbiAgICAgICAgcGVuZGluZ05vZGUudGFnID09PSB2bm9kZS50YWcgJiZcbiAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiXG4gICAgICApIHtcbiAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiKCk7XG4gICAgICB9XG4gICAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XG4gICAgfSk7XG4gIH1cblxuICAvLyBzdGFydCBlbnRlciB0cmFuc2l0aW9uXG4gIGJlZm9yZUVudGVySG9vayAmJiBiZWZvcmVFbnRlckhvb2soZWwpO1xuICBpZiAoZXhwZWN0c0NTUykge1xuICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICBpZiAoIWNiLmNhbmNlbGxlZCkge1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgICBpZiAoIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgICBpZiAoaXNWYWxpZER1cmF0aW9uKGV4cGxpY2l0RW50ZXJEdXJhdGlvbikpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoY2IsIGV4cGxpY2l0RW50ZXJEdXJhdGlvbik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgY2IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHZub2RlLmRhdGEuc2hvdykge1xuICAgIHRvZ2dsZURpc3BsYXkgJiYgdG9nZ2xlRGlzcGxheSgpO1xuICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgfVxuXG4gIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgIGNiKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbGVhdmUgKHZub2RlLCBybSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBlbnRlciBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9lbnRlckNiKSkge1xuICAgIGVsLl9lbnRlckNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2VudGVyQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKGlzVW5kZWYoZGF0YSkgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm4gcm0oKVxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihlbC5fbGVhdmVDYikpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG4gIHZhciBsZWF2ZUNsYXNzID0gZGF0YS5sZWF2ZUNsYXNzO1xuICB2YXIgbGVhdmVUb0NsYXNzID0gZGF0YS5sZWF2ZVRvQ2xhc3M7XG4gIHZhciBsZWF2ZUFjdGl2ZUNsYXNzID0gZGF0YS5sZWF2ZUFjdGl2ZUNsYXNzO1xuICB2YXIgYmVmb3JlTGVhdmUgPSBkYXRhLmJlZm9yZUxlYXZlO1xuICB2YXIgbGVhdmUgPSBkYXRhLmxlYXZlO1xuICB2YXIgYWZ0ZXJMZWF2ZSA9IGRhdGEuYWZ0ZXJMZWF2ZTtcbiAgdmFyIGxlYXZlQ2FuY2VsbGVkID0gZGF0YS5sZWF2ZUNhbmNlbGxlZDtcbiAgdmFyIGRlbGF5TGVhdmUgPSBkYXRhLmRlbGF5TGVhdmU7XG4gIHZhciBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XG5cbiAgdmFyIGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlICYmICFpc0lFOTtcbiAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGxlYXZlKTtcblxuICB2YXIgZXhwbGljaXRMZWF2ZUR1cmF0aW9uID0gdG9OdW1iZXIoXG4gICAgaXNPYmplY3QoZHVyYXRpb24pXG4gICAgICA/IGR1cmF0aW9uLmxlYXZlXG4gICAgICA6IGR1cmF0aW9uXG4gICk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNEZWYoZXhwbGljaXRMZWF2ZUR1cmF0aW9uKSkge1xuICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRMZWF2ZUR1cmF0aW9uLCAnbGVhdmUnLCB2bm9kZSk7XG4gIH1cblxuICB2YXIgY2IgPSBlbC5fbGVhdmVDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChlbC5wYXJlbnROb2RlICYmIGVsLnBhcmVudE5vZGUuX3BlbmRpbmcpIHtcbiAgICAgIGVsLnBhcmVudE5vZGUuX3BlbmRpbmdbdm5vZGUua2V5XSA9IG51bGw7XG4gICAgfVxuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgfVxuICAgICAgbGVhdmVDYW5jZWxsZWQgJiYgbGVhdmVDYW5jZWxsZWQoZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBybSgpO1xuICAgICAgYWZ0ZXJMZWF2ZSAmJiBhZnRlckxlYXZlKGVsKTtcbiAgICB9XG4gICAgZWwuX2xlYXZlQ2IgPSBudWxsO1xuICB9KTtcblxuICBpZiAoZGVsYXlMZWF2ZSkge1xuICAgIGRlbGF5TGVhdmUocGVyZm9ybUxlYXZlKTtcbiAgfSBlbHNlIHtcbiAgICBwZXJmb3JtTGVhdmUoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlcmZvcm1MZWF2ZSAoKSB7XG4gICAgLy8gdGhlIGRlbGF5ZWQgbGVhdmUgbWF5IGhhdmUgYWxyZWFkeSBiZWVuIGNhbmNlbGxlZFxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICAvLyByZWNvcmQgbGVhdmluZyBlbGVtZW50XG4gICAgaWYgKCF2bm9kZS5kYXRhLnNob3cgJiYgZWwucGFyZW50Tm9kZSkge1xuICAgICAgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgfHwgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgPSB7fSkpWyh2bm9kZS5rZXkpXSA9IHZub2RlO1xuICAgIH1cbiAgICBiZWZvcmVMZWF2ZSAmJiBiZWZvcmVMZWF2ZShlbCk7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgICAgaWYgKCFjYi5jYW5jZWxsZWQpIHtcbiAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICAgICAgaWYgKCF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgICAgICBpZiAoaXNWYWxpZER1cmF0aW9uKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRMZWF2ZUR1cmF0aW9uKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgY2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGxlYXZlICYmIGxlYXZlKGVsLCBjYik7XG4gICAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICBjYigpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBvbmx5IHVzZWQgaW4gZGV2IG1vZGVcbmZ1bmN0aW9uIGNoZWNrRHVyYXRpb24gKHZhbCwgbmFtZSwgdm5vZGUpIHtcbiAgaWYgKHR5cGVvZiB2YWwgIT09ICdudW1iZXInKSB7XG4gICAgd2FybihcbiAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIG5vdCBhIHZhbGlkIG51bWJlciAtIFwiICtcbiAgICAgIFwiZ290IFwiICsgKEpTT04uc3RyaW5naWZ5KHZhbCkpICsgXCIuXCIsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfSBlbHNlIGlmIChpc05hTih2YWwpKSB7XG4gICAgd2FybihcbiAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIE5hTiAtIFwiICtcbiAgICAgICd0aGUgZHVyYXRpb24gZXhwcmVzc2lvbiBtaWdodCBiZSBpbmNvcnJlY3QuJyxcbiAgICAgIHZub2RlLmNvbnRleHRcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWREdXJhdGlvbiAodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHRyYW5zaXRpb24gaG9vaydzIGFyZ3VtZW50IGxlbmd0aC4gVGhlIGhvb2sgbWF5IGJlOlxuICogLSBhIG1lcmdlZCBob29rIChpbnZva2VyKSB3aXRoIHRoZSBvcmlnaW5hbCBpbiAuZm5zXG4gKiAtIGEgd3JhcHBlZCBjb21wb25lbnQgbWV0aG9kIChjaGVjayAuX2xlbmd0aClcbiAqIC0gYSBwbGFpbiBmdW5jdGlvbiAoLmxlbmd0aClcbiAqL1xuZnVuY3Rpb24gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCAoZm4pIHtcbiAgaWYgKGlzVW5kZWYoZm4pKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdmFyIGludm9rZXJGbnMgPSBmbi5mbnM7XG4gIGlmIChpc0RlZihpbnZva2VyRm5zKSkge1xuICAgIC8vIGludm9rZXJcbiAgICByZXR1cm4gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChcbiAgICAgIEFycmF5LmlzQXJyYXkoaW52b2tlckZucylcbiAgICAgICAgPyBpbnZva2VyRm5zWzBdXG4gICAgICAgIDogaW52b2tlckZuc1xuICAgIClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZuLl9sZW5ndGggfHwgZm4ubGVuZ3RoKSA+IDFcbiAgfVxufVxuXG5mdW5jdGlvbiBfZW50ZXIgKF8sIHZub2RlKSB7XG4gIGlmICh2bm9kZS5kYXRhLnNob3cgIT09IHRydWUpIHtcbiAgICBlbnRlcih2bm9kZSk7XG4gIH1cbn1cblxudmFyIHRyYW5zaXRpb24gPSBpbkJyb3dzZXIgPyB7XG4gIGNyZWF0ZTogX2VudGVyLFxuICBhY3RpdmF0ZTogX2VudGVyLFxuICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSQkMSAodm5vZGUsIHJtKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgICBsZWF2ZSh2bm9kZSwgcm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBybSgpO1xuICAgIH1cbiAgfVxufSA6IHt9O1xuXG52YXIgcGxhdGZvcm1Nb2R1bGVzID0gW1xuICBhdHRycyxcbiAga2xhc3MsXG4gIGV2ZW50cyxcbiAgZG9tUHJvcHMsXG4gIHN0eWxlLFxuICB0cmFuc2l0aW9uXG5dO1xuXG4vKiAgKi9cblxuLy8gdGhlIGRpcmVjdGl2ZSBtb2R1bGUgc2hvdWxkIGJlIGFwcGxpZWQgbGFzdCwgYWZ0ZXIgYWxsXG4vLyBidWlsdC1pbiBtb2R1bGVzIGhhdmUgYmVlbiBhcHBsaWVkLlxudmFyIG1vZHVsZXMgPSBwbGF0Zm9ybU1vZHVsZXMuY29uY2F0KGJhc2VNb2R1bGVzKTtcblxudmFyIHBhdGNoID0gY3JlYXRlUGF0Y2hGdW5jdGlvbih7IG5vZGVPcHM6IG5vZGVPcHMsIG1vZHVsZXM6IG1vZHVsZXMgfSk7XG5cbi8qKlxuICogTm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IGxpa2UgYXR0YWNoaW5nXG4gKiBwcm9wZXJ0aWVzIHRvIEVsZW1lbnRzLlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuaWYgKGlzSUU5KSB7XG4gIC8vIGh0dHA6Ly93d3cubWF0dHM0MTEuY29tL3Bvc3QvaW50ZXJuZXQtZXhwbG9yZXItOS1vbmlucHV0L1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3Rpb25jaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVsID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICBpZiAoZWwgJiYgZWwudm1vZGVsKSB7XG4gICAgICB0cmlnZ2VyKGVsLCAnaW5wdXQnKTtcbiAgICB9XG4gIH0pO1xufVxuXG52YXIgZGlyZWN0aXZlID0ge1xuICBpbnNlcnRlZDogZnVuY3Rpb24gaW5zZXJ0ZWQgKGVsLCBiaW5kaW5nLCB2bm9kZSwgb2xkVm5vZGUpIHtcbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgLy8gIzY5MDNcbiAgICAgIGlmIChvbGRWbm9kZS5lbG0gJiYgIW9sZFZub2RlLmVsbS5fdk9wdGlvbnMpIHtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZGlyZWN0aXZlLmNvbXBvbmVudFVwZGF0ZWQoZWwsIGJpbmRpbmcsIHZub2RlKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm5vZGUuY29udGV4dCk7XG4gICAgICB9XG4gICAgICBlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSk7XG4gICAgfSBlbHNlIGlmICh2bm9kZS50YWcgPT09ICd0ZXh0YXJlYScgfHwgaXNUZXh0SW5wdXRUeXBlKGVsLnR5cGUpKSB7XG4gICAgICBlbC5fdk1vZGlmaWVycyA9IGJpbmRpbmcubW9kaWZpZXJzO1xuICAgICAgaWYgKCFiaW5kaW5nLm1vZGlmaWVycy5sYXp5KSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uc3RhcnQnLCBvbkNvbXBvc2l0aW9uU3RhcnQpO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbmVuZCcsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICAvLyBTYWZhcmkgPCAxMC4yICYgVUlXZWJWaWV3IGRvZXNuJ3QgZmlyZSBjb21wb3NpdGlvbmVuZCB3aGVuXG4gICAgICAgIC8vIHN3aXRjaGluZyBmb2N1cyBiZWZvcmUgY29uZmlybWluZyBjb21wb3NpdGlvbiBjaG9pY2VcbiAgICAgICAgLy8gdGhpcyBhbHNvIGZpeGVzIHRoZSBpc3N1ZSB3aGVyZSBzb21lIGJyb3dzZXJzIGUuZy4gaU9TIENocm9tZVxuICAgICAgICAvLyBmaXJlcyBcImNoYW5nZVwiIGluc3RlYWQgb2YgXCJpbnB1dFwiIG9uIGF1dG9jb21wbGV0ZS5cbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoaXNJRTkpIHtcbiAgICAgICAgICBlbC52bW9kZWwgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGNvbXBvbmVudFVwZGF0ZWQ6IGZ1bmN0aW9uIGNvbXBvbmVudFVwZGF0ZWQgKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xuICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICBzZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm5vZGUuY29udGV4dCk7XG4gICAgICAvLyBpbiBjYXNlIHRoZSBvcHRpb25zIHJlbmRlcmVkIGJ5IHYtZm9yIGhhdmUgY2hhbmdlZCxcbiAgICAgIC8vIGl0J3MgcG9zc2libGUgdGhhdCB0aGUgdmFsdWUgaXMgb3V0LW9mLXN5bmMgd2l0aCB0aGUgcmVuZGVyZWQgb3B0aW9ucy5cbiAgICAgIC8vIGRldGVjdCBzdWNoIGNhc2VzIGFuZCBmaWx0ZXIgb3V0IHZhbHVlcyB0aGF0IG5vIGxvbmdlciBoYXMgYSBtYXRjaGluZ1xuICAgICAgLy8gb3B0aW9uIGluIHRoZSBET00uXG4gICAgICB2YXIgcHJldk9wdGlvbnMgPSBlbC5fdk9wdGlvbnM7XG4gICAgICB2YXIgY3VyT3B0aW9ucyA9IGVsLl92T3B0aW9ucyA9IFtdLm1hcC5jYWxsKGVsLm9wdGlvbnMsIGdldFZhbHVlKTtcbiAgICAgIGlmIChjdXJPcHRpb25zLnNvbWUoZnVuY3Rpb24gKG8sIGkpIHsgcmV0dXJuICFsb29zZUVxdWFsKG8sIHByZXZPcHRpb25zW2ldKTsgfSkpIHtcbiAgICAgICAgLy8gdHJpZ2dlciBjaGFuZ2UgZXZlbnQgaWZcbiAgICAgICAgLy8gbm8gbWF0Y2hpbmcgb3B0aW9uIGZvdW5kIGZvciBhdCBsZWFzdCBvbmUgdmFsdWVcbiAgICAgICAgdmFyIG5lZWRSZXNldCA9IGVsLm11bHRpcGxlXG4gICAgICAgICAgPyBiaW5kaW5nLnZhbHVlLnNvbWUoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIGhhc05vTWF0Y2hpbmdPcHRpb24odiwgY3VyT3B0aW9ucyk7IH0pXG4gICAgICAgICAgOiBiaW5kaW5nLnZhbHVlICE9PSBiaW5kaW5nLm9sZFZhbHVlICYmIGhhc05vTWF0Y2hpbmdPcHRpb24oYmluZGluZy52YWx1ZSwgY3VyT3B0aW9ucyk7XG4gICAgICAgIGlmIChuZWVkUmVzZXQpIHtcbiAgICAgICAgICB0cmlnZ2VyKGVsLCAnY2hhbmdlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHNldFNlbGVjdGVkIChlbCwgYmluZGluZywgdm0pIHtcbiAgYWN0dWFsbHlTZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzSUUgfHwgaXNFZGdlKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBhY3R1YWxseVNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bSk7XG4gICAgfSwgMCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWN0dWFsbHlTZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG4gIHZhciB2YWx1ZSA9IGJpbmRpbmcudmFsdWU7XG4gIHZhciBpc011bHRpcGxlID0gZWwubXVsdGlwbGU7XG4gIGlmIChpc011bHRpcGxlICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiPHNlbGVjdCBtdWx0aXBsZSB2LW1vZGVsPVxcXCJcIiArIChiaW5kaW5nLmV4cHJlc3Npb24pICsgXCJcXFwiPiBcIiArXG4gICAgICBcImV4cGVjdHMgYW4gQXJyYXkgdmFsdWUgZm9yIGl0cyBiaW5kaW5nLCBidXQgZ290IFwiICsgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpKSxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VsZWN0ZWQsIG9wdGlvbjtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBlbC5vcHRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG9wdGlvbiA9IGVsLm9wdGlvbnNbaV07XG4gICAgaWYgKGlzTXVsdGlwbGUpIHtcbiAgICAgIHNlbGVjdGVkID0gbG9vc2VJbmRleE9mKHZhbHVlLCBnZXRWYWx1ZShvcHRpb24pKSA+IC0xO1xuICAgICAgaWYgKG9wdGlvbi5zZWxlY3RlZCAhPT0gc2VsZWN0ZWQpIHtcbiAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gc2VsZWN0ZWQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChsb29zZUVxdWFsKGdldFZhbHVlKG9wdGlvbiksIHZhbHVlKSkge1xuICAgICAgICBpZiAoZWwuc2VsZWN0ZWRJbmRleCAhPT0gaSkge1xuICAgICAgICAgIGVsLnNlbGVjdGVkSW5kZXggPSBpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIWlzTXVsdGlwbGUpIHtcbiAgICBlbC5zZWxlY3RlZEluZGV4ID0gLTE7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzTm9NYXRjaGluZ09wdGlvbiAodmFsdWUsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuZXZlcnkoZnVuY3Rpb24gKG8pIHsgcmV0dXJuICFsb29zZUVxdWFsKG8sIHZhbHVlKTsgfSlcbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWUgKG9wdGlvbikge1xuICByZXR1cm4gJ192YWx1ZScgaW4gb3B0aW9uXG4gICAgPyBvcHRpb24uX3ZhbHVlXG4gICAgOiBvcHRpb24udmFsdWVcbn1cblxuZnVuY3Rpb24gb25Db21wb3NpdGlvblN0YXJ0IChlKSB7XG4gIGUudGFyZ2V0LmNvbXBvc2luZyA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25FbmQgKGUpIHtcbiAgLy8gcHJldmVudCB0cmlnZ2VyaW5nIGFuIGlucHV0IGV2ZW50IGZvciBubyByZWFzb25cbiAgaWYgKCFlLnRhcmdldC5jb21wb3NpbmcpIHsgcmV0dXJuIH1cbiAgZS50YXJnZXQuY29tcG9zaW5nID0gZmFsc2U7XG4gIHRyaWdnZXIoZS50YXJnZXQsICdpbnB1dCcpO1xufVxuXG5mdW5jdGlvbiB0cmlnZ2VyIChlbCwgdHlwZSkge1xuICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdIVE1MRXZlbnRzJyk7XG4gIGUuaW5pdEV2ZW50KHR5cGUsIHRydWUsIHRydWUpO1xuICBlbC5kaXNwYXRjaEV2ZW50KGUpO1xufVxuXG4vKiAgKi9cblxuLy8gcmVjdXJzaXZlbHkgc2VhcmNoIGZvciBwb3NzaWJsZSB0cmFuc2l0aW9uIGRlZmluZWQgaW5zaWRlIHRoZSBjb21wb25lbnQgcm9vdFxuZnVuY3Rpb24gbG9jYXRlTm9kZSAodm5vZGUpIHtcbiAgcmV0dXJuIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmICghdm5vZGUuZGF0YSB8fCAhdm5vZGUuZGF0YS50cmFuc2l0aW9uKVxuICAgID8gbG9jYXRlTm9kZSh2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUpXG4gICAgOiB2bm9kZVxufVxuXG52YXIgc2hvdyA9IHtcbiAgYmluZDogZnVuY3Rpb24gYmluZCAoZWwsIHJlZiwgdm5vZGUpIHtcbiAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG5cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uJCQxID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgdmFyIG9yaWdpbmFsRGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA9XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgPyAnJyA6IGVsLnN0eWxlLmRpc3BsYXk7XG4gICAgaWYgKHZhbHVlICYmIHRyYW5zaXRpb24kJDEpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gb3JpZ2luYWxEaXNwbGF5O1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IG9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUgKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuICAgIHZhciBvbGRWYWx1ZSA9IHJlZi5vbGRWYWx1ZTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghdmFsdWUgPT09ICFvbGRWYWx1ZSkgeyByZXR1cm4gfVxuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgdmFyIHRyYW5zaXRpb24kJDEgPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICBpZiAodHJhbnNpdGlvbiQkMSkge1xuICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGVhdmUodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gZWwuX192T3JpZ2luYWxEaXNwbGF5IDogJ25vbmUnO1xuICAgIH1cbiAgfSxcblxuICB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZCAoXG4gICAgZWwsXG4gICAgYmluZGluZyxcbiAgICB2bm9kZSxcbiAgICBvbGRWbm9kZSxcbiAgICBpc0Rlc3Ryb3lcbiAgKSB7XG4gICAgaWYgKCFpc0Rlc3Ryb3kpIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgcGxhdGZvcm1EaXJlY3RpdmVzID0ge1xuICBtb2RlbDogZGlyZWN0aXZlLFxuICBzaG93OiBzaG93XG59O1xuXG4vKiAgKi9cblxudmFyIHRyYW5zaXRpb25Qcm9wcyA9IHtcbiAgbmFtZTogU3RyaW5nLFxuICBhcHBlYXI6IEJvb2xlYW4sXG4gIGNzczogQm9vbGVhbixcbiAgbW9kZTogU3RyaW5nLFxuICB0eXBlOiBTdHJpbmcsXG4gIGVudGVyQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVDbGFzczogU3RyaW5nLFxuICBlbnRlclRvQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVUb0NsYXNzOiBTdHJpbmcsXG4gIGVudGVyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVBY3RpdmVDbGFzczogU3RyaW5nLFxuICBhcHBlYXJDbGFzczogU3RyaW5nLFxuICBhcHBlYXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBhcHBlYXJUb0NsYXNzOiBTdHJpbmcsXG4gIGR1cmF0aW9uOiBbTnVtYmVyLCBTdHJpbmcsIE9iamVjdF1cbn07XG5cbi8vIGluIGNhc2UgdGhlIGNoaWxkIGlzIGFsc28gYW4gYWJzdHJhY3QgY29tcG9uZW50LCBlLmcuIDxrZWVwLWFsaXZlPlxuLy8gd2Ugd2FudCB0byByZWN1cnNpdmVseSByZXRyaWV2ZSB0aGUgcmVhbCBjb21wb25lbnQgdG8gYmUgcmVuZGVyZWRcbmZ1bmN0aW9uIGdldFJlYWxDaGlsZCAodm5vZGUpIHtcbiAgdmFyIGNvbXBPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgaWYgKGNvbXBPcHRpb25zICYmIGNvbXBPcHRpb25zLkN0b3Iub3B0aW9ucy5hYnN0cmFjdCkge1xuICAgIHJldHVybiBnZXRSZWFsQ2hpbGQoZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChjb21wT3B0aW9ucy5jaGlsZHJlbikpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZub2RlXG4gIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdFRyYW5zaXRpb25EYXRhIChjb21wKSB7XG4gIHZhciBkYXRhID0ge307XG4gIHZhciBvcHRpb25zID0gY29tcC4kb3B0aW9ucztcbiAgLy8gcHJvcHNcbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMucHJvcHNEYXRhKSB7XG4gICAgZGF0YVtrZXldID0gY29tcFtrZXldO1xuICB9XG4gIC8vIGV2ZW50cy5cbiAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMgYW5kIHBhc3MgdGhlbSBkaXJlY3RseSB0byB0aGUgdHJhbnNpdGlvbiBtZXRob2RzXG4gIHZhciBsaXN0ZW5lcnMgPSBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIGZvciAodmFyIGtleSQxIGluIGxpc3RlbmVycykge1xuICAgIGRhdGFbY2FtZWxpemUoa2V5JDEpXSA9IGxpc3RlbmVyc1trZXkkMV07XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuZnVuY3Rpb24gcGxhY2Vob2xkZXIgKGgsIHJhd0NoaWxkKSB7XG4gIGlmICgvXFxkLWtlZXAtYWxpdmUkLy50ZXN0KHJhd0NoaWxkLnRhZykpIHtcbiAgICByZXR1cm4gaCgna2VlcC1hbGl2ZScsIHtcbiAgICAgIHByb3BzOiByYXdDaGlsZC5jb21wb25lbnRPcHRpb25zLnByb3BzRGF0YVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzUGFyZW50VHJhbnNpdGlvbiAodm5vZGUpIHtcbiAgd2hpbGUgKCh2bm9kZSA9IHZub2RlLnBhcmVudCkpIHtcbiAgICBpZiAodm5vZGUuZGF0YS50cmFuc2l0aW9uKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc1NhbWVDaGlsZCAoY2hpbGQsIG9sZENoaWxkKSB7XG4gIHJldHVybiBvbGRDaGlsZC5rZXkgPT09IGNoaWxkLmtleSAmJiBvbGRDaGlsZC50YWcgPT09IGNoaWxkLnRhZ1xufVxuXG52YXIgaXNOb3RUZXh0Tm9kZSA9IGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRhZyB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYyk7IH07XG5cbnZhciBpc1ZTaG93RGlyZWN0aXZlID0gZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQubmFtZSA9PT0gJ3Nob3cnOyB9O1xuXG52YXIgVHJhbnNpdGlvbiA9IHtcbiAgbmFtZTogJ3RyYW5zaXRpb24nLFxuICBwcm9wczogdHJhbnNpdGlvblByb3BzLFxuICBhYnN0cmFjdDogdHJ1ZSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBmaWx0ZXIgb3V0IHRleHQgbm9kZXMgKHBvc3NpYmxlIHdoaXRlc3BhY2VzKVxuICAgIGNoaWxkcmVuID0gY2hpbGRyZW4uZmlsdGVyKGlzTm90VGV4dE5vZGUpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB3YXJuIG11bHRpcGxlIGVsZW1lbnRzXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgICAgd2FybihcbiAgICAgICAgJzx0cmFuc2l0aW9uPiBjYW4gb25seSBiZSB1c2VkIG9uIGEgc2luZ2xlIGVsZW1lbnQuIFVzZSAnICtcbiAgICAgICAgJzx0cmFuc2l0aW9uLWdyb3VwPiBmb3IgbGlzdHMuJyxcbiAgICAgICAgdGhpcy4kcGFyZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciBtb2RlID0gdGhpcy5tb2RlO1xuXG4gICAgLy8gd2FybiBpbnZhbGlkIG1vZGVcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgbW9kZSAmJiBtb2RlICE9PSAnaW4tb3V0JyAmJiBtb2RlICE9PSAnb3V0LWluJ1xuICAgICkge1xuICAgICAgd2FybihcbiAgICAgICAgJ2ludmFsaWQgPHRyYW5zaXRpb24+IG1vZGU6ICcgKyBtb2RlLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIHJhd0NoaWxkID0gY2hpbGRyZW5bMF07XG5cbiAgICAvLyBpZiB0aGlzIGlzIGEgY29tcG9uZW50IHJvb3Qgbm9kZSBhbmQgdGhlIGNvbXBvbmVudCdzXG4gICAgLy8gcGFyZW50IGNvbnRhaW5lciBub2RlIGFsc28gaGFzIHRyYW5zaXRpb24sIHNraXAuXG4gICAgaWYgKGhhc1BhcmVudFRyYW5zaXRpb24odGhpcy4kdm5vZGUpKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICAvLyBhcHBseSB0cmFuc2l0aW9uIGRhdGEgdG8gY2hpbGRcbiAgICAvLyB1c2UgZ2V0UmVhbENoaWxkKCkgdG8gaWdub3JlIGFic3RyYWN0IGNvbXBvbmVudHMgZS5nLiBrZWVwLWFsaXZlXG4gICAgdmFyIGNoaWxkID0gZ2V0UmVhbENoaWxkKHJhd0NoaWxkKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGVhdmluZykge1xuICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgIH1cblxuICAgIC8vIGVuc3VyZSBhIGtleSB0aGF0IGlzIHVuaXF1ZSB0byB0aGUgdm5vZGUgdHlwZSBhbmQgdG8gdGhpcyB0cmFuc2l0aW9uXG4gICAgLy8gY29tcG9uZW50IGluc3RhbmNlLiBUaGlzIGtleSB3aWxsIGJlIHVzZWQgdG8gcmVtb3ZlIHBlbmRpbmcgbGVhdmluZyBub2Rlc1xuICAgIC8vIGR1cmluZyBlbnRlcmluZy5cbiAgICB2YXIgaWQgPSBcIl9fdHJhbnNpdGlvbi1cIiArICh0aGlzLl91aWQpICsgXCItXCI7XG4gICAgY2hpbGQua2V5ID0gY2hpbGQua2V5ID09IG51bGxcbiAgICAgID8gY2hpbGQuaXNDb21tZW50XG4gICAgICAgID8gaWQgKyAnY29tbWVudCdcbiAgICAgICAgOiBpZCArIGNoaWxkLnRhZ1xuICAgICAgOiBpc1ByaW1pdGl2ZShjaGlsZC5rZXkpXG4gICAgICAgID8gKFN0cmluZyhjaGlsZC5rZXkpLmluZGV4T2YoaWQpID09PSAwID8gY2hpbGQua2V5IDogaWQgKyBjaGlsZC5rZXkpXG4gICAgICAgIDogY2hpbGQua2V5O1xuXG4gICAgdmFyIGRhdGEgPSAoY2hpbGQuZGF0YSB8fCAoY2hpbGQuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcbiAgICB2YXIgb2xkUmF3Q2hpbGQgPSB0aGlzLl92bm9kZTtcbiAgICB2YXIgb2xkQ2hpbGQgPSBnZXRSZWFsQ2hpbGQob2xkUmF3Q2hpbGQpO1xuXG4gICAgLy8gbWFyayB2LXNob3dcbiAgICAvLyBzbyB0aGF0IHRoZSB0cmFuc2l0aW9uIG1vZHVsZSBjYW4gaGFuZCBvdmVyIHRoZSBjb250cm9sIHRvIHRoZSBkaXJlY3RpdmVcbiAgICBpZiAoY2hpbGQuZGF0YS5kaXJlY3RpdmVzICYmIGNoaWxkLmRhdGEuZGlyZWN0aXZlcy5zb21lKGlzVlNob3dEaXJlY3RpdmUpKSB7XG4gICAgICBjaGlsZC5kYXRhLnNob3cgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIG9sZENoaWxkICYmXG4gICAgICBvbGRDaGlsZC5kYXRhICYmXG4gICAgICAhaXNTYW1lQ2hpbGQoY2hpbGQsIG9sZENoaWxkKSAmJlxuICAgICAgIWlzQXN5bmNQbGFjZWhvbGRlcihvbGRDaGlsZCkgJiZcbiAgICAgIC8vICM2Njg3IGNvbXBvbmVudCByb290IGlzIGEgY29tbWVudCBub2RlXG4gICAgICAhKG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlICYmIG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZS5pc0NvbW1lbnQpXG4gICAgKSB7XG4gICAgICAvLyByZXBsYWNlIG9sZCBjaGlsZCB0cmFuc2l0aW9uIGRhdGEgd2l0aCBmcmVzaCBvbmVcbiAgICAgIC8vIGltcG9ydGFudCBmb3IgZHluYW1pYyB0cmFuc2l0aW9ucyFcbiAgICAgIHZhciBvbGREYXRhID0gb2xkQ2hpbGQuZGF0YS50cmFuc2l0aW9uID0gZXh0ZW5kKHt9LCBkYXRhKTtcbiAgICAgIC8vIGhhbmRsZSB0cmFuc2l0aW9uIG1vZGVcbiAgICAgIGlmIChtb2RlID09PSAnb3V0LWluJykge1xuICAgICAgICAvLyByZXR1cm4gcGxhY2Vob2xkZXIgbm9kZSBhbmQgcXVldWUgdXBkYXRlIHdoZW4gbGVhdmUgZmluaXNoZXNcbiAgICAgICAgdGhpcy5fbGVhdmluZyA9IHRydWU7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdhZnRlckxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMkMS5fbGVhdmluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMkMS4kZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2luLW91dCcpIHtcbiAgICAgICAgaWYgKGlzQXN5bmNQbGFjZWhvbGRlcihjaGlsZCkpIHtcbiAgICAgICAgICByZXR1cm4gb2xkUmF3Q2hpbGRcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsYXllZExlYXZlO1xuICAgICAgICB2YXIgcGVyZm9ybUxlYXZlID0gZnVuY3Rpb24gKCkgeyBkZWxheWVkTGVhdmUoKTsgfTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2FmdGVyRW50ZXInLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnZW50ZXJDYW5jZWxsZWQnLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnZGVsYXlMZWF2ZScsIGZ1bmN0aW9uIChsZWF2ZSkgeyBkZWxheWVkTGVhdmUgPSBsZWF2ZTsgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhd0NoaWxkXG4gIH1cbn07XG5cbi8qICAqL1xuXG52YXIgcHJvcHMgPSBleHRlbmQoe1xuICB0YWc6IFN0cmluZyxcbiAgbW92ZUNsYXNzOiBTdHJpbmdcbn0sIHRyYW5zaXRpb25Qcm9wcyk7XG5cbmRlbGV0ZSBwcm9wcy5tb2RlO1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID0ge1xuICBwcm9wczogcHJvcHMsXG5cbiAgYmVmb3JlTW91bnQ6IGZ1bmN0aW9uIGJlZm9yZU1vdW50ICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciB1cGRhdGUgPSB0aGlzLl91cGRhdGU7XG4gICAgdGhpcy5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICAgIHZhciByZXN0b3JlQWN0aXZlSW5zdGFuY2UgPSBzZXRBY3RpdmVJbnN0YW5jZSh0aGlzJDEpO1xuICAgICAgLy8gZm9yY2UgcmVtb3ZpbmcgcGFzc1xuICAgICAgdGhpcyQxLl9fcGF0Y2hfXyhcbiAgICAgICAgdGhpcyQxLl92bm9kZSxcbiAgICAgICAgdGhpcyQxLmtlcHQsXG4gICAgICAgIGZhbHNlLCAvLyBoeWRyYXRpbmdcbiAgICAgICAgdHJ1ZSAvLyByZW1vdmVPbmx5ICghaW1wb3J0YW50LCBhdm9pZHMgdW5uZWNlc3NhcnkgbW92ZXMpXG4gICAgICApO1xuICAgICAgdGhpcyQxLl92bm9kZSA9IHRoaXMkMS5rZXB0O1xuICAgICAgcmVzdG9yZUFjdGl2ZUluc3RhbmNlKCk7XG4gICAgICB1cGRhdGUuY2FsbCh0aGlzJDEsIHZub2RlLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGFnID0gdGhpcy50YWcgfHwgdGhpcy4kdm5vZGUuZGF0YS50YWcgfHwgJ3NwYW4nO1xuICAgIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBwcmV2Q2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgdmFyIHJhd0NoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdCB8fCBbXTtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgdmFyIHRyYW5zaXRpb25EYXRhID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYXdDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSByYXdDaGlsZHJlbltpXTtcbiAgICAgIGlmIChjLnRhZykge1xuICAgICAgICBpZiAoYy5rZXkgIT0gbnVsbCAmJiBTdHJpbmcoYy5rZXkpLmluZGV4T2YoJ19fdmxpc3QnKSAhPT0gMCkge1xuICAgICAgICAgIGNoaWxkcmVuLnB1c2goYyk7XG4gICAgICAgICAgbWFwW2Mua2V5XSA9IGNcbiAgICAgICAgICA7KGMuZGF0YSB8fCAoYy5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHZhciBvcHRzID0gYy5jb21wb25lbnRPcHRpb25zO1xuICAgICAgICAgIHZhciBuYW1lID0gb3B0cyA/IChvcHRzLkN0b3Iub3B0aW9ucy5uYW1lIHx8IG9wdHMudGFnIHx8ICcnKSA6IGMudGFnO1xuICAgICAgICAgIHdhcm4oKFwiPHRyYW5zaXRpb24tZ3JvdXA+IGNoaWxkcmVuIG11c3QgYmUga2V5ZWQ6IDxcIiArIG5hbWUgKyBcIj5cIikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByZXZDaGlsZHJlbikge1xuICAgICAgdmFyIGtlcHQgPSBbXTtcbiAgICAgIHZhciByZW1vdmVkID0gW107XG4gICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBwcmV2Q2hpbGRyZW4ubGVuZ3RoOyBpJDErKykge1xuICAgICAgICB2YXIgYyQxID0gcHJldkNoaWxkcmVuW2kkMV07XG4gICAgICAgIGMkMS5kYXRhLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRGF0YTtcbiAgICAgICAgYyQxLmRhdGEucG9zID0gYyQxLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgaWYgKG1hcFtjJDEua2V5XSkge1xuICAgICAgICAgIGtlcHQucHVzaChjJDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlbW92ZWQucHVzaChjJDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmtlcHQgPSBoKHRhZywgbnVsbCwga2VwdCk7XG4gICAgICB0aGlzLnJlbW92ZWQgPSByZW1vdmVkO1xuICAgIH1cblxuICAgIHJldHVybiBoKHRhZywgbnVsbCwgY2hpbGRyZW4pXG4gIH0sXG5cbiAgdXBkYXRlZDogZnVuY3Rpb24gdXBkYXRlZCAoKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcmV2Q2hpbGRyZW47XG4gICAgdmFyIG1vdmVDbGFzcyA9IHRoaXMubW92ZUNsYXNzIHx8ICgodGhpcy5uYW1lIHx8ICd2JykgKyAnLW1vdmUnKTtcbiAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCB8fCAhdGhpcy5oYXNNb3ZlKGNoaWxkcmVuWzBdLmVsbSwgbW92ZUNsYXNzKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gd2UgZGl2aWRlIHRoZSB3b3JrIGludG8gdGhyZWUgbG9vcHMgdG8gYXZvaWQgbWl4aW5nIERPTSByZWFkcyBhbmQgd3JpdGVzXG4gICAgLy8gaW4gZWFjaCBpdGVyYXRpb24gLSB3aGljaCBoZWxwcyBwcmV2ZW50IGxheW91dCB0aHJhc2hpbmcuXG4gICAgY2hpbGRyZW4uZm9yRWFjaChjYWxsUGVuZGluZ0Nicyk7XG4gICAgY2hpbGRyZW4uZm9yRWFjaChyZWNvcmRQb3NpdGlvbik7XG4gICAgY2hpbGRyZW4uZm9yRWFjaChhcHBseVRyYW5zbGF0aW9uKTtcblxuICAgIC8vIGZvcmNlIHJlZmxvdyB0byBwdXQgZXZlcnl0aGluZyBpbiBwb3NpdGlvblxuICAgIC8vIGFzc2lnbiB0byB0aGlzIHRvIGF2b2lkIGJlaW5nIHJlbW92ZWQgaW4gdHJlZS1zaGFraW5nXG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgdGhpcy5fcmVmbG93ID0gZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQ7XG5cbiAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICBpZiAoYy5kYXRhLm1vdmVkKSB7XG4gICAgICAgIHZhciBlbCA9IGMuZWxtO1xuICAgICAgICB2YXIgcyA9IGVsLnN0eWxlO1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgIHMudHJhbnNmb3JtID0gcy5XZWJraXRUcmFuc2Zvcm0gPSBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcnO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmRFdmVudCwgZWwuX21vdmVDYiA9IGZ1bmN0aW9uIGNiIChlKSB7XG4gICAgICAgICAgaWYgKGUgJiYgZS50YXJnZXQgIT09IGVsKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFlIHx8IC90cmFuc2Zvcm0kLy50ZXN0KGUucHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGNiKTtcbiAgICAgICAgICAgIGVsLl9tb3ZlQ2IgPSBudWxsO1xuICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIGhhc01vdmU6IGZ1bmN0aW9uIGhhc01vdmUgKGVsLCBtb3ZlQ2xhc3MpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCFoYXNUcmFuc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAodGhpcy5faGFzTW92ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5faGFzTW92ZVxuICAgICAgfVxuICAgICAgLy8gRGV0ZWN0IHdoZXRoZXIgYW4gZWxlbWVudCB3aXRoIHRoZSBtb3ZlIGNsYXNzIGFwcGxpZWQgaGFzXG4gICAgICAvLyBDU1MgdHJhbnNpdGlvbnMuIFNpbmNlIHRoZSBlbGVtZW50IG1heSBiZSBpbnNpZGUgYW4gZW50ZXJpbmdcbiAgICAgIC8vIHRyYW5zaXRpb24gYXQgdGhpcyB2ZXJ5IG1vbWVudCwgd2UgbWFrZSBhIGNsb25lIG9mIGl0IGFuZCByZW1vdmVcbiAgICAgIC8vIGFsbCBvdGhlciB0cmFuc2l0aW9uIGNsYXNzZXMgYXBwbGllZCB0byBlbnN1cmUgb25seSB0aGUgbW92ZSBjbGFzc1xuICAgICAgLy8gaXMgYXBwbGllZC5cbiAgICAgIHZhciBjbG9uZSA9IGVsLmNsb25lTm9kZSgpO1xuICAgICAgaWYgKGVsLl90cmFuc2l0aW9uQ2xhc3Nlcykge1xuICAgICAgICBlbC5fdHJhbnNpdGlvbkNsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xzKSB7IHJlbW92ZUNsYXNzKGNsb25lLCBjbHMpOyB9KTtcbiAgICAgIH1cbiAgICAgIGFkZENsYXNzKGNsb25lLCBtb3ZlQ2xhc3MpO1xuICAgICAgY2xvbmUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIHRoaXMuJGVsLmFwcGVuZENoaWxkKGNsb25lKTtcbiAgICAgIHZhciBpbmZvID0gZ2V0VHJhbnNpdGlvbkluZm8oY2xvbmUpO1xuICAgICAgdGhpcy4kZWwucmVtb3ZlQ2hpbGQoY2xvbmUpO1xuICAgICAgcmV0dXJuICh0aGlzLl9oYXNNb3ZlID0gaW5mby5oYXNUcmFuc2Zvcm0pXG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBjYWxsUGVuZGluZ0NicyAoYykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGMuZWxtLl9tb3ZlQ2IpIHtcbiAgICBjLmVsbS5fbW92ZUNiKCk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjLmVsbS5fZW50ZXJDYikge1xuICAgIGMuZWxtLl9lbnRlckNiKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVjb3JkUG9zaXRpb24gKGMpIHtcbiAgYy5kYXRhLm5ld1BvcyA9IGMuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xufVxuXG5mdW5jdGlvbiBhcHBseVRyYW5zbGF0aW9uIChjKSB7XG4gIHZhciBvbGRQb3MgPSBjLmRhdGEucG9zO1xuICB2YXIgbmV3UG9zID0gYy5kYXRhLm5ld1BvcztcbiAgdmFyIGR4ID0gb2xkUG9zLmxlZnQgLSBuZXdQb3MubGVmdDtcbiAgdmFyIGR5ID0gb2xkUG9zLnRvcCAtIG5ld1Bvcy50b3A7XG4gIGlmIChkeCB8fCBkeSkge1xuICAgIGMuZGF0YS5tb3ZlZCA9IHRydWU7XG4gICAgdmFyIHMgPSBjLmVsbS5zdHlsZTtcbiAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoXCIgKyBkeCArIFwicHgsXCIgKyBkeSArIFwicHgpXCI7XG4gICAgcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnMHMnO1xuICB9XG59XG5cbnZhciBwbGF0Zm9ybUNvbXBvbmVudHMgPSB7XG4gIFRyYW5zaXRpb246IFRyYW5zaXRpb24sXG4gIFRyYW5zaXRpb25Hcm91cDogVHJhbnNpdGlvbkdyb3VwXG59O1xuXG4vKiAgKi9cblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBzcGVjaWZpYyB1dGlsc1xuVnVlLmNvbmZpZy5tdXN0VXNlUHJvcCA9IG11c3RVc2VQcm9wO1xuVnVlLmNvbmZpZy5pc1Jlc2VydmVkVGFnID0gaXNSZXNlcnZlZFRhZztcblZ1ZS5jb25maWcuaXNSZXNlcnZlZEF0dHIgPSBpc1Jlc2VydmVkQXR0cjtcblZ1ZS5jb25maWcuZ2V0VGFnTmFtZXNwYWNlID0gZ2V0VGFnTmFtZXNwYWNlO1xuVnVlLmNvbmZpZy5pc1Vua25vd25FbGVtZW50ID0gaXNVbmtub3duRWxlbWVudDtcblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBydW50aW1lIGRpcmVjdGl2ZXMgJiBjb21wb25lbnRzXG5leHRlbmQoVnVlLm9wdGlvbnMuZGlyZWN0aXZlcywgcGxhdGZvcm1EaXJlY3RpdmVzKTtcbmV4dGVuZChWdWUub3B0aW9ucy5jb21wb25lbnRzLCBwbGF0Zm9ybUNvbXBvbmVudHMpO1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHBhdGNoIGZ1bmN0aW9uXG5WdWUucHJvdG90eXBlLl9fcGF0Y2hfXyA9IGluQnJvd3NlciA/IHBhdGNoIDogbm9vcDtcblxuLy8gcHVibGljIG1vdW50IG1ldGhvZFxuVnVlLnByb3RvdHlwZS4kbW91bnQgPSBmdW5jdGlvbiAoXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICBlbCA9IGVsICYmIGluQnJvd3NlciA/IHF1ZXJ5KGVsKSA6IHVuZGVmaW5lZDtcbiAgcmV0dXJuIG1vdW50Q29tcG9uZW50KHRoaXMsIGVsLCBoeWRyYXRpbmcpXG59O1xuXG4vLyBkZXZ0b29scyBnbG9iYWwgaG9va1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmIChpbkJyb3dzZXIpIHtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNvbmZpZy5kZXZ0b29scykge1xuICAgICAgaWYgKGRldnRvb2xzKSB7XG4gICAgICAgIGRldnRvb2xzLmVtaXQoJ2luaXQnLCBWdWUpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnXG4gICAgICApIHtcbiAgICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oXG4gICAgICAgICAgJ0Rvd25sb2FkIHRoZSBWdWUgRGV2dG9vbHMgZXh0ZW5zaW9uIGZvciBhIGJldHRlciBkZXZlbG9wbWVudCBleHBlcmllbmNlOlxcbicgK1xuICAgICAgICAgICdodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLWRldnRvb2xzJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJlxuICAgICAgY29uZmlnLnByb2R1Y3Rpb25UaXAgIT09IGZhbHNlICYmXG4gICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICApIHtcbiAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKFxuICAgICAgICBcIllvdSBhcmUgcnVubmluZyBWdWUgaW4gZGV2ZWxvcG1lbnQgbW9kZS5cXG5cIiArXG4gICAgICAgIFwiTWFrZSBzdXJlIHRvIHR1cm4gb24gcHJvZHVjdGlvbiBtb2RlIHdoZW4gZGVwbG95aW5nIGZvciBwcm9kdWN0aW9uLlxcblwiICtcbiAgICAgICAgXCJTZWUgbW9yZSB0aXBzIGF0IGh0dHBzOi8vdnVlanMub3JnL2d1aWRlL2RlcGxveW1lbnQuaHRtbFwiXG4gICAgICApO1xuICAgIH1cbiAgfSwgMCk7XG59XG5cbi8qICAqL1xuXG5leHBvcnQgZGVmYXVsdCBWdWU7XG4iLCJ2YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpc1JlZ0V4cChpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJUaGUgbWV0aG9kIGRvZXNuJ3QgYWNjZXB0IHJlZ3VsYXIgZXhwcmVzc2lvbnNcIik7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICB2YXIgcmVnZXhwID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW01FVEhPRF9OQU1FXShyZWdleHApO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlZ2V4cFtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAnLy4vJ1tNRVRIT0RfTkFNRV0ocmVnZXhwKTtcbiAgICB9IGNhdGNoIChmKSB7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gZmFsc2U7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgdXJsID0gbmV3IFVSTCgnYj9hPTEmYj0yJmM9MycsICdodHRwOi8vYScpO1xuICB2YXIgc2VhcmNoUGFyYW1zID0gdXJsLnNlYXJjaFBhcmFtcztcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB1cmwucGF0aG5hbWUgPSAnYyUyMGQnO1xuICBzZWFyY2hQYXJhbXMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgIHNlYXJjaFBhcmFtc1snZGVsZXRlJ10oJ2InKTtcbiAgICByZXN1bHQgKz0ga2V5ICsgdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gKElTX1BVUkUgJiYgIXVybC50b0pTT04pXG4gICAgfHwgIXNlYXJjaFBhcmFtcy5zb3J0XG4gICAgfHwgdXJsLmhyZWYgIT09ICdodHRwOi8vYS9jJTIwZD9hPTEmYz0zJ1xuICAgIHx8IHNlYXJjaFBhcmFtcy5nZXQoJ2MnKSAhPT0gJzMnXG4gICAgfHwgU3RyaW5nKG5ldyBVUkxTZWFyY2hQYXJhbXMoJz9hPTEnKSkgIT09ICdhPTEnXG4gICAgfHwgIXNlYXJjaFBhcmFtc1tJVEVSQVRPUl1cbiAgICAvLyB0aHJvd3MgaW4gRWRnZVxuICAgIHx8IG5ldyBVUkwoJ2h0dHBzOi8vYUBiJykudXNlcm5hbWUgIT09ICdhJ1xuICAgIHx8IG5ldyBVUkxTZWFyY2hQYXJhbXMobmV3IFVSTFNlYXJjaFBhcmFtcygnYT1iJykpLmdldCgnYScpICE9PSAnYidcbiAgICAvLyBub3QgcHVueWNvZGVkIGluIEVkZ2VcbiAgICB8fCBuZXcgVVJMKCdodHRwOi8v0YLQtdGB0YInKS5ob3N0ICE9PSAneG4tLWUxYXliYydcbiAgICAvLyBub3QgZXNjYXBlZCBpbiBDaHJvbWUgNjItXG4gICAgfHwgbmV3IFVSTCgnaHR0cDovL2Ej0LEnKS5oYXNoICE9PSAnIyVEMCVCMSdcbiAgICAvLyBmYWlscyBpbiBDaHJvbWUgNjYtXG4gICAgfHwgcmVzdWx0ICE9PSAnYTFjMydcbiAgICAvLyB0aHJvd3MgaW4gU2FmYXJpXG4gICAgfHwgbmV3IFVSTCgnaHR0cDovL3gnLCB1bmRlZmluZWQpLmhvc3QgIT09ICd4Jztcbn0pO1xuIiwiXG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAgICAgZnVuY3Rpb25hbDogdHJ1ZSxcbiAgICAgICAgcmVuZGVyKF9oLCBfdm0pIHtcbiAgICAgICAgICBjb25zdCB7IF9jLCBfdiwgZGF0YSwgY2hpbGRyZW4gPSBbXSB9ID0gX3ZtO1xuXG4gICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgY2xhc3M6IGNsYXNzTmFtZXMsXG4gICAgICAgICAgICBzdGF0aWNDbGFzcyxcbiAgICAgICAgICAgIHN0eWxlLFxuICAgICAgICAgICAgc3RhdGljU3R5bGUsXG4gICAgICAgICAgICBhdHRycyA9IHt9LFxuICAgICAgICAgICAgLi4ucmVzdFxuICAgICAgICAgIH0gPSBkYXRhO1xuXG4gICAgICAgICAgcmV0dXJuIF9jKFxuICAgICAgICAgICAgJ3N2ZycsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGNsYXNzOiBbY2xhc3NOYW1lcyxzdGF0aWNDbGFzc10sXG4gICAgICAgICAgICAgIHN0eWxlOiBbc3R5bGUsc3RhdGljU3R5bGVdLFxuICAgICAgICAgICAgICBhdHRyczogT2JqZWN0LmFzc2lnbih7XCJ2aWV3Qm94XCI6XCIwIDAgNDg4IDk2XCIsXCJmaWxsXCI6XCJub25lXCIsXCJ4bWxuc1wiOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn0sIGF0dHJzKSxcbiAgICAgICAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGlsZHJlbi5jb25jYXQoW19jKCdwYXRoJyx7YXR0cnM6e1wiZFwiOlwiTTMyLjY3MyA3Mi4wMDhsOS45MjggMTcuMTk2YzIuNCA0LjE1NiA4LjM5OCA0LjE1NiAxMC43OTggMEw5MC40NTYgMjUuMDJINTkuODAyTDMyLjY3MyA3Mi4wMDh6TTY0LjE4IDE3LjQzOGgzMC42NTNsLjMyMy0uNTU5YzIuMzk5LTQuMTU2LS42LTkuMzUtNS40LTkuMzVINjkuOWwtNS43MiA5LjkwOXpNNjEuMTQ2IDcuNTI4bC01LjcyMSA5LjkxSDEuMTY3bC0uMzIzLS41NTljLTIuMzk5LTQuMTU2LjYtOS4zNSA1LjQtOS4zNWg1NC45MDJ6TTUxLjA0NyAyNS4wMkwyOC4yOTYgNjQuNDI1IDUuNTQ0IDI1LjAyaDQ1LjUwM3pNMTA2LjYyIDI4LjZoOC4wNmwxMi40IDM0LjcyIDExLjQwOC0zNC43Mmg3LjgxMkwxMzEuNDIgNzJoLTguNjhsLTE2LjEyLTQzLjR6bTUyLjExNiA0My45NThjLTMuNjM3IDAtNi41MS0xLjExNi04LjYxOC0zLjM0OC0yLjEwOC0yLjI3My0zLjE2Mi01LjY4My0zLjE2Mi0xMC4yM1Y0MWg3LjE5MnYxNy45OGMwIDIuMjczLjUzOCAzLjk4OSAxLjYxMiA1LjE0NiAxLjA3NSAxLjE1NyAyLjQ4IDEuNzM2IDQuMjE2IDEuNzM2IDIuMTA4IDAgMy43ODItLjYgNS4wMjItMS43OTggMS4yODItMS4xOTkgMS45NjQtMi43OSAyLjA0Ni00Ljc3NFY0MWg3LjE5MnYzMWgtNS42NDJsLS41NTgtMy40MWExMS41MDkgMTEuNTA5IDAgMDEtNC4wMyAyLjk3NmMtMS41Ny42NjEtMy4zMjcuOTkyLTUuMjcuOTkyem0zNi4yOTcgMGMtMi4yMzIgMC00LjIzNy0uMzMtNi4wMTQtLjk5Mi0xLjc3Ny0uNzAzLTMuMzA3LTEuNjk1LTQuNTg4LTIuOTc2LTEuMjgxLTEuMzIzLTIuMjczLTIuOTE0LTIuOTc2LTQuNzc0LS42NjEtMS44Ni0uOTkyLTMuOTY4LS45OTItNi4zMjR2LTEuOTg0YzAtMi4zNTYuMzMxLTQuNDY0Ljk5Mi02LjMyNC43MDMtMS44NiAxLjY5NS0zLjQzIDIuOTc2LTQuNzEyIDEuMjgxLTEuMzIzIDIuODExLTIuMzE1IDQuNTg4LTIuOTc2IDEuNzc3LS43MDMgMy43ODItMS4wNTQgNi4wMTQtMS4wNTQgNC41MDUgMCA4LjA2IDEuMzg1IDEwLjY2NCA0LjE1NCAyLjYwNCAyLjc3IDMuOTA2IDYuNzM3IDMuOTA2IDExLjkwNHYyLjQxOGgtMjEuOTQ4Yy4yMDcgMi42MDQuOTMgNC40ODUgMi4xNyA1LjY0MiAxLjI0IDEuMTE2IDIuOTc2IDEuNjc0IDUuMjA4IDEuNjc0IDIuMTkxIDAgMy43ODItLjM3MiA0Ljc3NC0xLjExNiAxLjAzMy0uNzg1IDEuNzE1LTEuNjk1IDIuMDQ2LTIuNzI4aDcuNDRhMTQuODI0IDE0LjgyNCAwIDAxLTEuNTUgNC4wMyAxMC45MyAxMC45MyAwIDAxLTIuNzkgMy4yMjRjLTEuMTU3LjkxLTIuNTYzIDEuNjMzLTQuMjE2IDIuMTctMS42NTMuNDk2LTMuNTU1Ljc0NC01LjcwNC43NDR6bTAtMjUuNzkyYy0yLjEwOCAwLTMuNzYxLjUxNy00Ljk2IDEuNTUtMS4xOTkgMS4wMzMtMS45NjMgMi42NjYtMi4yOTQgNC44OThoMTQuNTA4Yy0uMjg5LTIuMzE1LTEuMDU0LTMuOTY4LTIuMjk0LTQuOTYtMS4xOTktLjk5Mi0yLjg1Mi0xLjQ4OC00Ljk2LTEuNDg4elwiLFwiZmlsbFwiOlwiIzBCRENBMFwifX0pLF9jKCdwYXRoJyx7YXR0cnM6e1wiZFwiOlwiTTIxMi45MyAyOC42aDM0LjF2Ni41NzJIMjMzLjdWNzJoLTcuNDRWMzUuMTcyaC0xMy4zM1YyOC42em00My4xMTcgNDMuOTU4Yy0yLjIzMiAwLTQuMjM3LS4zMy02LjAxNC0uOTkyLTEuNzc4LS43MDMtMy4zMDctMS42OTUtNC41ODgtMi45NzYtMS4yODItMS4zMjMtMi4yNzQtMi45MTQtMi45NzYtNC43NzQtLjY2Mi0xLjg2LS45OTItMy45NjgtLjk5Mi02LjMyNHYtMS45ODRjMC0yLjM1Ni4zMy00LjQ2NC45OTItNi4zMjQuNzAyLTEuODYgMS42OTQtMy40MyAyLjk3Ni00LjcxMiAxLjI4MS0xLjMyMyAyLjgxLTIuMzE1IDQuNTg4LTIuOTc2IDEuNzc3LS43MDMgMy43ODItMS4wNTQgNi4wMTQtMS4wNTQgNC41MDUgMCA4LjA2IDEuMzg1IDEwLjY2NCA0LjE1NCAyLjYwNCAyLjc3IDMuOTA2IDYuNzM3IDMuOTA2IDExLjkwNHYyLjQxOGgtMjEuOTQ4Yy4yMDYgMi42MDQuOTMgNC40ODUgMi4xNyA1LjY0MiAxLjI0IDEuMTE2IDIuOTc2IDEuNjc0IDUuMjA4IDEuNjc0IDIuMTkgMCAzLjc4Mi0uMzcyIDQuNzc0LTEuMTE2IDEuMDMzLS43ODUgMS43MTUtMS42OTUgMi4wNDYtMi43MjhoNy40NGExNC44NTcgMTQuODU3IDAgMDEtMS41NSA0LjAzIDEwLjkzIDEwLjkzIDAgMDEtMi43OSAzLjIyNGMtMS4xNTguOTEtMi41NjMgMS42MzMtNC4yMTYgMi4xNy0xLjY1NC40OTYtMy41NTUuNzQ0LTUuNzA0Ljc0NHptMC0yNS43OTJjLTIuMTA4IDAtMy43NjIuNTE3LTQuOTYgMS41NS0xLjE5OSAxLjAzMy0xLjk2NCAyLjY2Ni0yLjI5NCA0Ljg5OGgxNC41MDhjLS4yOS0yLjMxNS0xLjA1NC0zLjk2OC0yLjI5NC00Ljk2LTEuMTk5LS45OTItMi44NTItMS40ODgtNC45Ni0xLjQ4OHpNMjg2Ljk4NyA3MmMtMy4yNjUgMC01Ljc4Ny0uODY4LTcuNTY0LTIuNjA0LTEuNzM2LTEuNzc3LTIuNjA0LTQuMzItMi42MDQtNy42MjZWMjguNmg3LjE5MnYzMi40MjZjMCAxLjYxMi4zNTEgMi43OSAxLjA1NCAzLjUzNC43MDMuNzQ0IDEuNzc3IDEuMTE2IDMuMjI0IDEuMTE2aDEuNTVWNzJoLTIuODUyem0yMC4yMjIuNTU4Yy0yLjIzMiAwLTQuMjM3LS4zMy02LjAxNC0uOTkyLTEuNzc4LS43MDMtMy4zMDctMS42OTUtNC41ODgtMi45NzYtMS4yODItMS4zMjMtMi4yNzQtMi45MTQtMi45NzYtNC43NzQtLjY2Mi0xLjg2LS45OTItMy45NjgtLjk5Mi02LjMyNHYtMS45ODRjMC0yLjM1Ni4zMy00LjQ2NC45OTItNi4zMjQuNzAyLTEuODYgMS42OTQtMy40MyAyLjk3Ni00LjcxMiAxLjI4MS0xLjMyMyAyLjgxLTIuMzE1IDQuNTg4LTIuOTc2IDEuNzc3LS43MDMgMy43ODItMS4wNTQgNi4wMTQtMS4wNTQgNC41MDUgMCA4LjA2IDEuMzg1IDEwLjY2NCA0LjE1NCAyLjYwNCAyLjc3IDMuOTA2IDYuNzM3IDMuOTA2IDExLjkwNHYyLjQxOGgtMjEuOTQ4Yy4yMDYgMi42MDQuOTMgNC40ODUgMi4xNyA1LjY0MiAxLjI0IDEuMTE2IDIuOTc2IDEuNjc0IDUuMjA4IDEuNjc0IDIuMTkgMCAzLjc4Mi0uMzcyIDQuNzc0LTEuMTE2IDEuMDMzLS43ODUgMS43MTUtMS42OTUgMi4wNDYtMi43MjhoNy40NGExNC44NTcgMTQuODU3IDAgMDEtMS41NSA0LjAzIDEwLjkzIDEwLjkzIDAgMDEtMi43OSAzLjIyNGMtMS4xNTguOTEtMi41NjMgMS42MzMtNC4yMTYgMi4xNy0xLjY1NC40OTYtMy41NTUuNzQ0LTUuNzA0Ljc0NHptMC0yNS43OTJjLTIuMTA4IDAtMy43NjIuNTE3LTQuOTYgMS41NS0xLjE5OSAxLjAzMy0xLjk2NCAyLjY2Ni0yLjI5NCA0Ljg5OGgxNC41MDhjLS4yOS0yLjMxNS0xLjA1NC0zLjk2OC0yLjI5NC00Ljk2LTEuMTk5LS45OTItMi44NTItMS40ODgtNC45Ni0xLjQ4OHptMzEuOTMyIDI1Ljc5MmMtNC4yNTcgMC03LjQxOS0uOTMtOS40ODYtMi43OS0yLjAyNS0xLjkwMS0zLjIwMy00LjU2Ny0zLjUzNC03Ljk5OGg3LjU2NGMuMzMxIDEuNzc3Ljg2OCAzLjAzOCAxLjYxMiAzLjc4Mi43ODYuNzAzIDIuMDY3IDEuMDU0IDMuODQ0IDEuMDU0IDIuMTA4IDAgMy41MzQtLjI5IDQuMjc4LS44NjguNzg2LS42MiAxLjE3OC0xLjQyNiAxLjE3OC0yLjQxOCAwLTEuMTE2LS40NTQtMS45NjMtMS4zNjQtMi41NDItLjg2OC0uNTc5LTEuOTYzLTEuMDMzLTMuMjg2LTEuMzY0YTUwLjM3NSA1MC4zNzUgMCAwMC00LjI3OC0uOTkyIDIwLjAxNyAyMC4wMTcgMCAwMS00LjI3OC0xLjQyNiAxMC4wODUgMTAuMDg1IDAgMDEtMy4zNDgtMi42NjZjLS44NjgtMS4xNTctMS4zMDItMi43NDktMS4zMDItNC43NzQgMC0xLjI4MS4yNDgtMi40OC43NDQtMy41OTZzMS4yNjEtMi4wNjcgMi4yOTQtMi44NTJjMS4wMzQtLjgyNyAyLjMxNS0xLjQ2NyAzLjg0NC0xLjkyMiAxLjU3MS0uNDk2IDMuNDEtLjc0NCA1LjUxOC0uNzQ0IDMuOTY4IDAgNi45NDQuOTMgOC45MjggMi43OSAxLjk4NCAxLjgxOSAzLjE0MiA0LjM4MSAzLjQ3MiA3LjY4OGgtNy41NjRjLS4zMy0xLjY5NS0uODQ3LTIuODczLTEuNTUtMy41MzQtLjY2MS0uNjYxLTEuNzU2LS45OTItMy4yODYtLjk5Mi0xLjc3NyAwLTMuMDM4LjI5LTMuNzgyLjg2OC0uNzAyLjU3OS0xLjA1NCAxLjI4MS0xLjA1NCAyLjEwOCAwIDEuMDMzLjQzNCAxLjc5OCAxLjMwMiAyLjI5NC45MS40NTUgMi4wMjYuODQ3IDMuMzQ4IDEuMTc4IDEuMzIzLjI5IDIuNzQ5LjYgNC4yNzguOTMgMS41My4yOSAyLjk1Ni43ODUgNC4yNzggMS40ODhhOC43MiA4LjcyIDAgMDEzLjI4NiAyLjg1MmMuOTEgMS4yNCAxLjM2NCAyLjkxNCAxLjM2NCA1LjAyMiAwIDEuMzY0LS4yNjggMi42MjUtLjgwNiAzLjc4Mi0uNDk2IDEuMTU3LTEuMjgxIDIuMTUtMi4zNTYgMi45NzYtMS4wMzMuODI3LTIuMzc2IDEuNDg4LTQuMDMgMS45ODQtMS42MTIuNDU1LTMuNTU0LjY4Mi01LjgyOC42ODJ6bTMxLjk0NSAwYy0yLjIzMiAwLTQuMjU4LS4zMy02LjA3Ni0uOTkyLTEuNzc4LS43MDMtMy4zMDctMS42OTUtNC41ODgtMi45NzYtMS4yNC0xLjMyMy0yLjIxMi0yLjkxNC0yLjkxNC00Ljc3NC0uNjYyLTEuODYtLjk5Mi0zLjk2OC0uOTkyLTYuMzI0di0xLjk4NGMwLTIuMzE1LjMzLTQuNDAyLjk5Mi02LjI2Mi43MDItMS44NiAxLjY5NC0zLjQzIDIuOTc2LTQuNzEyIDEuMjgxLTEuMzIzIDIuODEtMi4zMzUgNC41ODgtMy4wMzggMS44MTgtLjcwMyAzLjgyMy0xLjA1NCA2LjAxNC0xLjA1NCAzLjkyNiAwIDYuOTY0Ljk3MSA5LjExNCAyLjkxNCAyLjE5IDEuOTQzIDMuNTk2IDQuNDY0IDQuMjE2IDcuNTY0aC03LjY4OGMtLjMzMS0xLjExNi0xLjAxMy0yLjAyNS0yLjA0Ni0yLjcyOC0xLjAzNC0uNzAzLTIuMzM2LTEuMDU0LTMuOTA2LTEuMDU0LS45MSAwLTEuNzc4LjE2NS0yLjYwNC40OTYtLjc4Ni4yOS0xLjQ4OC43ODUtMi4xMDggMS40ODgtLjYyLjY2MS0xLjExNiAxLjUzLTEuNDg4IDIuNjA0LS4zMzEgMS4wMzMtLjQ5NiAyLjI5NC0uNDk2IDMuNzgydjEuOTg0YzAgMS40NDcuMTg2IDIuNzA3LjU1OCAzLjc4Mi4zNzIgMS4wMzMuODY4IDEuOTAxIDEuNDg4IDIuNjA0YTYuMTM0IDYuMTM0IDAgMDAyLjEwOCAxLjQ4OGMuODI2LjMzIDEuNjc0LjQ5NiAyLjU0Mi40OTYgMS43NzcgMCAzLjEyLS4zOTMgNC4wMy0xLjE3OC45NS0uNzg1IDEuNTkxLTEuNzU3IDEuOTIyLTIuOTE0aDcuNjg4Yy0uNjIgMy4yNjUtMi4wMjYgNS44OS00LjIxNiA3Ljg3NC0yLjE1IDEuOTQzLTUuMTg4IDIuOTE0LTkuMTE0IDIuOTE0em0zMS42MTIgMGMtNC42NyAwLTguMzI4LTEuMzIzLTEwLjk3NC0zLjk2OC0yLjYwNC0yLjY0NS0zLjkwNi02LjM0NS0zLjkwNi0xMS4wOTh2LTEuOTg0YzAtMi4zNTYuMzMxLTQuNDY0Ljk5Mi02LjMyNC43MDMtMS44NiAxLjY5NS0zLjQzIDIuOTc2LTQuNzEyIDEuMzIzLTEuMzIzIDIuODk0LTIuMzE1IDQuNzEyLTIuOTc2IDEuODE5LS43MDMgMy44ODYtMS4wNTQgNi4yLTEuMDU0IDQuNjcxIDAgOC4zMDggMS4zMjMgMTAuOTEyIDMuOTY4IDIuNjQ2IDIuNjQ1IDMuOTY4IDYuMzQ1IDMuOTY4IDExLjA5OHYxLjk4NGMwIDIuMzU2LS4zNTEgNC40NjQtMS4wNTQgNi4zMjQtLjY2MSAxLjg2LTEuNjUzIDMuNDUxLTIuOTc2IDQuNzc0LTEuMjgxIDEuMjgxLTIuODUyIDIuMjczLTQuNzEyIDIuOTc2LTEuODE4LjY2MS0zLjg2NC45OTItNi4xMzguOTkyem0wLTYuNjk2YzIuMzU2IDAgNC4xNTQtLjY4MiA1LjM5NC0yLjA0NiAxLjI4Mi0xLjM2NCAxLjkyMi0zLjQ3MiAxLjkyMi02LjMyNHYtMS45ODRjMC0yLjgxLS42NjEtNC44OTgtMS45ODQtNi4yNjItMS4yODEtMS40MDUtMy4wNTgtMi4xMDgtNS4zMzItMi4xMDgtMi4zNTYgMC00LjE3NC42ODItNS40NTYgMi4wNDYtMS4yNCAxLjM2NC0xLjg2IDMuNDcyLTEuODYgNi4zMjR2MS45ODRjMCAyLjgxLjY0MSA0LjkxOSAxLjkyMiA2LjMyNCAxLjMyMyAxLjM2NCAzLjEyMSAyLjA0NiA1LjM5NCAyLjA0NnptMzcuMzEyIDYuNjk2Yy0zLjg4NSAwLTYuOTAyLTEuMjItOS4wNTItMy42NTh2MTUuNWgtNy4xOTJWNDFoNS42NDJsLjY4MiA0LjIxNmMxLjA3NS0xLjYxMiAyLjQzOS0yLjgxIDQuMDkyLTMuNTk2IDEuNjk1LS43ODUgMy42MzgtMS4xNzggNS44MjgtMS4xNzggMS43NzggMCAzLjQxLjMzIDQuODk4Ljk5MmE5Ljg2IDkuODYgMCAwMTMuOTA2IDIuODUyYzEuMDc1IDEuMjQgMS45MjIgMi44MSAyLjU0MiA0LjcxMi42MiAxLjg2LjkzIDQuMDMuOTMgNi41MXYxLjk4NGMwIDIuNDgtLjMxIDQuNjUtLjkzIDYuNTEtLjYyIDEuODYtMS40ODggMy40My0yLjYwNCA0LjcxMmExMC41NjEgMTAuNTYxIDAgMDEtMy44NDQgMi45MTRjLTEuNDg4LjYyLTMuMTIuOTMtNC44OTguOTN6bS0yLjE3LTYuNjk2YzIuMTkxIDAgMy44ODYtLjY2MSA1LjA4NC0xLjk4NCAxLjE5OS0xLjMyMyAxLjc5OC0zLjQ1MSAxLjc5OC02LjM4NnYtMS45ODRjMC0yLjg1Mi0uNjItNC45Ni0xLjg2LTYuMzI0LTEuMjQtMS4zNjQtMi45MTQtMi4wNDYtNS4wMjItMi4wNDYtMS45ODQgMC0zLjYxNi42ODItNC44OTggMi4wNDYtMS4yNCAxLjM2NC0xLjkwMSAzLjM0OC0xLjk4NCA1Ljk1MnYyLjM1NmMwIDIuNzI4LjY0MSA0LjgxNSAxLjkyMiA2LjI2MiAxLjMyMyAxLjQwNSAyLjk3NiAyLjEwOCA0Ljk2IDIuMTA4em0zMy4zMyA2LjY5NmMtMi4yMzIgMC00LjIzNy0uMzMtNi4wMTQtLjk5Mi0xLjc3OC0uNzAzLTMuMzA3LTEuNjk1LTQuNTg4LTIuOTc2LTEuMjgyLTEuMzIzLTIuMjc0LTIuOTE0LTIuOTc2LTQuNzc0LS42NjItMS44Ni0uOTkyLTMuOTY4LS45OTItNi4zMjR2LTEuOTg0YzAtMi4zNTYuMzMtNC40NjQuOTkyLTYuMzI0LjcwMi0xLjg2IDEuNjk0LTMuNDMgMi45NzYtNC43MTIgMS4yODEtMS4zMjMgMi44MS0yLjMxNSA0LjU4OC0yLjk3NiAxLjc3Ny0uNzAzIDMuNzgyLTEuMDU0IDYuMDE0LTEuMDU0IDQuNTA1IDAgOC4wNiAxLjM4NSAxMC42NjQgNC4xNTQgMi42MDQgMi43NyAzLjkwNiA2LjczNyAzLjkwNiAxMS45MDR2Mi40MThoLTIxLjk0OGMuMjA2IDIuNjA0LjkzIDQuNDg1IDIuMTcgNS42NDIgMS4yNCAxLjExNiAyLjk3NiAxLjY3NCA1LjIwOCAxLjY3NCAyLjE5IDAgMy43ODItLjM3MiA0Ljc3NC0xLjExNiAxLjAzMy0uNzg1IDEuNzE1LTEuNjk1IDIuMDQ2LTIuNzI4aDcuNDRhMTQuODU3IDE0Ljg1NyAwIDAxLTEuNTUgNC4wMyAxMC45MyAxMC45MyAwIDAxLTIuNzkgMy4yMjRjLTEuMTU4LjkxLTIuNTYzIDEuNjMzLTQuMjE2IDIuMTctMS42NTQuNDk2LTMuNTU1Ljc0NC01LjcwNC43NDR6bTAtMjUuNzkyYy0yLjEwOCAwLTMuNzYyLjUxNy00Ljk2IDEuNTUtMS4xOTkgMS4wMzMtMS45NjQgMi42NjYtMi4yOTQgNC44OThoMTQuNTA4Yy0uMjktMi4zMTUtMS4wNTQtMy45NjgtMi4yOTQtNC45Ni0xLjE5OS0uOTkyLTIuODUyLTEuNDg4LTQuOTYtMS40ODh6XCIsXCJmaWxsXCI6XCIjMDAwXCJ9fSldKVxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgfVxuICAgICIsIlxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgIGZ1bmN0aW9uYWw6IHRydWUsXG4gICAgICAgIHJlbmRlcihfaCwgX3ZtKSB7XG4gICAgICAgICAgY29uc3QgeyBfYywgX3YsIGRhdGEsIGNoaWxkcmVuID0gW10gfSA9IF92bTtcblxuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGNsYXNzOiBjbGFzc05hbWVzLFxuICAgICAgICAgICAgc3RhdGljQ2xhc3MsXG4gICAgICAgICAgICBzdHlsZSxcbiAgICAgICAgICAgIHN0YXRpY1N0eWxlLFxuICAgICAgICAgICAgYXR0cnMgPSB7fSxcbiAgICAgICAgICAgIC4uLnJlc3RcbiAgICAgICAgICB9ID0gZGF0YTtcblxuICAgICAgICAgIHJldHVybiBfYyhcbiAgICAgICAgICAgICdzdmcnLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBjbGFzczogW1wiZmVhdGhlciBmZWF0aGVyLXR3aXR0ZXJcIixjbGFzc05hbWVzLHN0YXRpY0NsYXNzXSxcbiAgICAgICAgICAgICAgc3R5bGU6IFtzdHlsZSxzdGF0aWNTdHlsZV0sXG4gICAgICAgICAgICAgIGF0dHJzOiBPYmplY3QuYXNzaWduKHtcInhtbG5zXCI6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFwidmlld0JveFwiOlwiMCAwIDI0IDI0XCIsXCJmaWxsXCI6XCJub25lXCIsXCJzdHJva2VcIjpcImN1cnJlbnRDb2xvclwiLFwic3Ryb2tlLXdpZHRoXCI6XCIyXCIsXCJzdHJva2UtbGluZWNhcFwiOlwicm91bmRcIixcInN0cm9rZS1saW5lam9pblwiOlwicm91bmRcIn0sIGF0dHJzKSxcbiAgICAgICAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGlsZHJlbi5jb25jYXQoW19jKCdwYXRoJyx7YXR0cnM6e1wiZFwiOlwiTTIzIDNhMTAuOSAxMC45IDAgMDEtMy4xNCAxLjUzIDQuNDggNC40OCAwIDAwLTcuODYgM3YxQTEwLjY2IDEwLjY2IDAgMDEzIDRzLTQgOSA1IDEzYTExLjY0IDExLjY0IDAgMDEtNyAyYzkgNSAyMCAwIDIwLTExLjVhNC41IDQuNSAwIDAwLS4wOC0uODNBNy43MiA3LjcyIDAgMDAyMyAzelwifX0pXSlcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAiLCJcbiAgICAgIG1vZHVsZS5leHBvcnRzID0ge1xuICAgICAgICBmdW5jdGlvbmFsOiB0cnVlLFxuICAgICAgICByZW5kZXIoX2gsIF92bSkge1xuICAgICAgICAgIGNvbnN0IHsgX2MsIF92LCBkYXRhLCBjaGlsZHJlbiA9IFtdIH0gPSBfdm07XG5cbiAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBjbGFzczogY2xhc3NOYW1lcyxcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzLFxuICAgICAgICAgICAgc3R5bGUsXG4gICAgICAgICAgICBzdGF0aWNTdHlsZSxcbiAgICAgICAgICAgIGF0dHJzID0ge30sXG4gICAgICAgICAgICAuLi5yZXN0XG4gICAgICAgICAgfSA9IGRhdGE7XG5cbiAgICAgICAgICByZXR1cm4gX2MoXG4gICAgICAgICAgICAnc3ZnJyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgY2xhc3M6IFtcImZlYXRoZXIgZmVhdGhlci1naXRodWJcIixjbGFzc05hbWVzLHN0YXRpY0NsYXNzXSxcbiAgICAgICAgICAgICAgc3R5bGU6IFtzdHlsZSxzdGF0aWNTdHlsZV0sXG4gICAgICAgICAgICAgIGF0dHJzOiBPYmplY3QuYXNzaWduKHtcInhtbG5zXCI6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFwidmlld0JveFwiOlwiMCAwIDI0IDI0XCIsXCJmaWxsXCI6XCJub25lXCIsXCJzdHJva2VcIjpcImN1cnJlbnRDb2xvclwiLFwic3Ryb2tlLXdpZHRoXCI6XCIyXCIsXCJzdHJva2UtbGluZWNhcFwiOlwicm91bmRcIixcInN0cm9rZS1saW5lam9pblwiOlwicm91bmRcIn0sIGF0dHJzKSxcbiAgICAgICAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGlsZHJlbi5jb25jYXQoW19jKCdwYXRoJyx7YXR0cnM6e1wiZFwiOlwiTTkgMTljLTUgMS41LTUtMi41LTctM20xNCA2di0zLjg3YTMuMzcgMy4zNyAwIDAwLS45NC0yLjYxYzMuMTQtLjM1IDYuNDQtMS41NCA2LjQ0LTdBNS40NCA1LjQ0IDAgMDAyMCA0Ljc3IDUuMDcgNS4wNyAwIDAwMTkuOTEgMVMxOC43My42NSAxNiAyLjQ4YTEzLjM4IDEzLjM4IDAgMDAtNyAwQzYuMjcuNjUgNS4wOSAxIDUuMDkgMUE1LjA3IDUuMDcgMCAwMDUgNC43N2E1LjQ0IDUuNDQgMCAwMC0xLjUgMy43OGMwIDUuNDIgMy4zIDYuNjEgNi40NCA3QTMuMzcgMy4zNyAwIDAwOSAxOC4xM1YyMlwifX0pXSlcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAiLCJcbiAgICAgIG1vZHVsZS5leHBvcnRzID0ge1xuICAgICAgICBmdW5jdGlvbmFsOiB0cnVlLFxuICAgICAgICByZW5kZXIoX2gsIF92bSkge1xuICAgICAgICAgIGNvbnN0IHsgX2MsIF92LCBkYXRhLCBjaGlsZHJlbiA9IFtdIH0gPSBfdm07XG5cbiAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBjbGFzczogY2xhc3NOYW1lcyxcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzLFxuICAgICAgICAgICAgc3R5bGUsXG4gICAgICAgICAgICBzdGF0aWNTdHlsZSxcbiAgICAgICAgICAgIGF0dHJzID0ge30sXG4gICAgICAgICAgICAuLi5yZXN0XG4gICAgICAgICAgfSA9IGRhdGE7XG5cbiAgICAgICAgICByZXR1cm4gX2MoXG4gICAgICAgICAgICAnc3ZnJyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgY2xhc3M6IFtcImgtNSBtci0yIG9wYWNpdHktNTBcIixjbGFzc05hbWVzLHN0YXRpY0NsYXNzXSxcbiAgICAgICAgICAgICAgc3R5bGU6IFtzdHlsZSxzdGF0aWNTdHlsZV0sXG4gICAgICAgICAgICAgIGF0dHJzOiBPYmplY3QuYXNzaWduKHtcInZpZXdCb3hcIjpcIjAgMCAyNCAyNFwiLFwiZmlsbFwiOlwibm9uZVwiLFwieG1sbnNcIjpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9LCBhdHRycyksXG4gICAgICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2hpbGRyZW4uY29uY2F0KFtfYygncGF0aCcse2F0dHJzOntcImRcIjpcIk0xMiAyNGM2LjU2NSAwIDEyLTUuNDM1IDEyLTEyIDAtNi41NTMtNS40NDctMTItMTIuMDEyLTEyQzUuNDM1IDAgMCA1LjQ0NyAwIDEyYzAgNi41NjUgNS40NDcgMTIgMTIgMTJ6bTAtMmE5Ljk1MiA5Ljk1MiAwIDAxLTkuOTg4LTEwYzAtNS41NDEgNC40MjMtMTAgOS45NzYtMTAgNS41NTMgMCAxMCA0LjQ1OSAxMC4wMTIgMTBhOS45NTQgOS45NTQgMCAwMS0xMCAxMHptLS4xMDYtMTQuMTg4Yy44NTkgMCAxLjUzLS42ODMgMS41My0xLjUzIDAtLjg1OC0uNjcxLTEuNTQtMS41My0xLjU0LS44NDcgMC0xLjUzLjY4Mi0xLjUzIDEuNTQgMCAuODQ3LjY4MyAxLjUzIDEuNTMgMS41M3pNOS45NDEgMTguNDdoNC43ODhjLjQ4MyAwIC44Ni0uMzQyLjg2LS44MjQgMC0uNDU5LS4zNzctLjgyMy0uODYtLjgyM2gtMS40NTh2LTUuOTg5YzAtLjYzNS0uMzE4LTEuMDU5LS45MTgtMS4wNTlIMTAuMTRjLS40ODIgMC0uODU5LjM2NS0uODU5LjgyNCAwIC40ODIuMzc3LjgyNC44Ni44MjRIMTEuNHY1LjRIOS45NDFjLS40ODIgMC0uODU5LjM2NC0uODU5LjgyMyAwIC40ODIuMzc3LjgyNC44Ni44MjR6XCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIn19KV0pXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgIiwiXG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAgICAgZnVuY3Rpb25hbDogdHJ1ZSxcbiAgICAgICAgcmVuZGVyKF9oLCBfdm0pIHtcbiAgICAgICAgICBjb25zdCB7IF9jLCBfdiwgZGF0YSwgY2hpbGRyZW4gPSBbXSB9ID0gX3ZtO1xuXG4gICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgY2xhc3M6IGNsYXNzTmFtZXMsXG4gICAgICAgICAgICBzdGF0aWNDbGFzcyxcbiAgICAgICAgICAgIHN0eWxlLFxuICAgICAgICAgICAgc3RhdGljU3R5bGUsXG4gICAgICAgICAgICBhdHRycyA9IHt9LFxuICAgICAgICAgICAgLi4ucmVzdFxuICAgICAgICAgIH0gPSBkYXRhO1xuXG4gICAgICAgICAgcmV0dXJuIF9jKFxuICAgICAgICAgICAgJ3N2ZycsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGNsYXNzOiBbY2xhc3NOYW1lcyxzdGF0aWNDbGFzc10sXG4gICAgICAgICAgICAgIHN0eWxlOiBbc3R5bGUsc3RhdGljU3R5bGVdLFxuICAgICAgICAgICAgICBhdHRyczogT2JqZWN0LmFzc2lnbih7XCJ2aWV3Qm94XCI6XCIwIDAgMTkgMjZcIixcImZpbGxcIjpcIm5vbmVcIixcInhtbG5zXCI6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifSwgYXR0cnMpLFxuICAgICAgICAgICAgICAuLi5yZXN0LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNoaWxkcmVuLmNvbmNhdChbX2MoJ3BhdGgnLHthdHRyczp7XCJkXCI6XCJNMTcuNjA0IDEyLjIxMkgxLjQ4N0EuNDg2LjQ4NiAwIDAxMSAxMS43MjZWOC42OTRjMC0uMjY5LjIxOC0uNDg2LjQ4Ny0uNDg2aDE2LjExN2MuMjY4IDAgLjQ4Ni4yMTcuNDg2LjQ4NnYzLjAzMWMwIC4yNy0uMjE4LjQ4Ny0uNDg2LjQ4N3ptLTE1LjYzMi0uOTczaDE1LjE0NVY5LjE4MUgxLjk3MnYyLjA1OHpcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifX0pLF9jKCdwYXRoJyx7YXR0cnM6e1wiZFwiOlwiTTYuNDUyIDkuMThINC41YS40ODYuNDg2IDAgMDEtLjQ4NS0uNDg2VjIuNDYzQzQuMDE1IDEuNjU2IDQuNjcgMSA1LjQ3NyAxYy44MDcgMCAxLjQ2Mi42NTYgMS40NjIgMS40NjN2Ni4yMzFjMCAuMjctLjIxOC40ODctLjQ4Ny40ODd6bS0xLjQ2NS0uOTcyaC45OFYyLjQ2M2EuNDkuNDkgMCAwMC0uOTggMHY1Ljc0NXpNMTQuODY0IDkuMThoLTEuOTUyYS40ODYuNDg2IDAgMDEtLjQ4Ny0uNDg2VjIuNDYzYTEuNDY0IDEuNDY0IDAgMDEyLjkyNSAwdjYuMjMxYzAgLjI3LS4yMTguNDg3LS40ODYuNDg3em0tMS40NjYtLjk3MmguOThWMi40NjNhLjQ5LjQ5IDAgMDAtLjk4IDB2NS43NDV6TTkuNjgyIDIzLjAyNWMtNC4xOCAwLTcuNTgtMy40LTcuNTgtNy41ODF2LTMuNzE5YzAtLjI2OC4yMTgtLjQ4Ni40ODYtLjQ4NmgxNC4xODhjLjI2OCAwIC40ODYuMjE4LjQ4Ni40ODZ2My43MmMwIDQuMTgtMy40IDcuNTgtNy41OCA3LjU4ek0zLjA3NCAxMi4yMTJ2My4yMzJhNi42MTUgNi42MTUgMCAwMDYuNjA4IDYuNjA4IDYuNjE1IDYuNjE1IDAgMDA2LjYwOC02LjYwOFYxMi4yMUgzLjA3NHpcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifX0pLF9jKCdwYXRoJyx7YXR0cnM6e1wiZFwiOlwiTTEwLjk0NCAyNUg4LjQyYS40ODYuNDg2IDAgMDEtLjQ4Ny0uNDg3di0yLjA5MmEuNDg4LjQ4OCAwIDAxLjU3Mi0uNDc5Yy44NC4xNSAxLjUxNS4xNSAyLjM1NCAwYS40ODguNDg4IDAgMDEuNTcyLjQ3OXYyLjA5MmMwIC4yNy0uMjE3LjQ4Ny0uNDg3LjQ4N3ptLTIuMDM4LS45NzNoMS41NTJ2LTEuMDQ1Yy0uNTMyLjA1OS0xLjAyLjA1OS0xLjU1MiAwdjEuMDQ1elwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCJ9fSksX2MoJ3BhdGgnLHthdHRyczp7XCJkXCI6XCJNMTcuNjA0IDEyLjIxMkgxLjQ4N0EuNDg2LjQ4NiAwIDAxMSAxMS43MjZWOC42OTRjMC0uMjY5LjIxOC0uNDg2LjQ4Ny0uNDg2aDE2LjExN2MuMjY4IDAgLjQ4Ni4yMTcuNDg2LjQ4NnYzLjAzMWMwIC4yNy0uMjE4LjQ4Ny0uNDg2LjQ4N3ptLTE1LjYzMi0uOTczaDE1LjE0NVY5LjE4MUgxLjk3MnYyLjA1OHpcIixcInN0cm9rZVwiOlwiY3VycmVudENvbG9yXCIsXCJzdHJva2Utd2lkdGhcIjpcIi4yXCJ9fSksX2MoJ3BhdGgnLHthdHRyczp7XCJkXCI6XCJNNi40NTIgOS4xOEg0LjVhLjQ4Ni40ODYgMCAwMS0uNDg1LS40ODZWMi40NjNDNC4wMTUgMS42NTYgNC42NyAxIDUuNDc3IDFjLjgwNyAwIDEuNDYyLjY1NiAxLjQ2MiAxLjQ2M3Y2LjIzMWMwIC4yNy0uMjE4LjQ4Ny0uNDg3LjQ4N3ptLTEuNDY1LS45NzJoLjk4VjIuNDYzYS40OS40OSAwIDAwLS45OCAwdjUuNzQ1ek0xNC44NjQgOS4xOGgtMS45NTJhLjQ4Ni40ODYgMCAwMS0uNDg3LS40ODZWMi40NjNhMS40NjQgMS40NjQgMCAwMTIuOTI1IDB2Ni4yMzFjMCAuMjctLjIxOC40ODctLjQ4Ni40ODd6bS0xLjQ2Ni0uOTcyaC45OFYyLjQ2M2EuNDkuNDkgMCAwMC0uOTggMHY1Ljc0NXpNOS42ODIgMjMuMDI1Yy00LjE4IDAtNy41OC0zLjQtNy41OC03LjU4MXYtMy43MTljMC0uMjY4LjIxOC0uNDg2LjQ4Ni0uNDg2aDE0LjE4OGMuMjY4IDAgLjQ4Ni4yMTguNDg2LjQ4NnYzLjcyYzAgNC4xOC0zLjQgNy41OC03LjU4IDcuNTh6TTMuMDc0IDEyLjIxMnYzLjIzMmE2LjYxNSA2LjYxNSAwIDAwNi42MDggNi42MDggNi42MTUgNi42MTUgMCAwMDYuNjA4LTYuNjA4VjEyLjIxSDMuMDc0elwiLFwic3Ryb2tlXCI6XCJjdXJyZW50Q29sb3JcIixcInN0cm9rZS13aWR0aFwiOlwiLjJcIn19KSxfYygncGF0aCcse2F0dHJzOntcImRcIjpcIk0xMC45NDQgMjVIOC40MmEuNDg2LjQ4NiAwIDAxLS40ODctLjQ4N3YtMi4wOTJhLjQ4OC40ODggMCAwMS41NzItLjQ3OWMuODQuMTUgMS41MTUuMTUgMi4zNTQgMGEuNDg4LjQ4OCAwIDAxLjU3Mi40Nzl2Mi4wOTJjMCAuMjctLjIxNy40ODctLjQ4Ny40ODd6bS0yLjAzOC0uOTczaDEuNTUydi0xLjA0NWMtLjUzMi4wNTktMS4wMi4wNTktMS41NTIgMHYxLjA0NXpcIixcInN0cm9rZVwiOlwiY3VycmVudENvbG9yXCIsXCJzdHJva2Utd2lkdGhcIjpcIi4yXCJ9fSldKVxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgfVxuICAgICIsIlxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgIGZ1bmN0aW9uYWw6IHRydWUsXG4gICAgICAgIHJlbmRlcihfaCwgX3ZtKSB7XG4gICAgICAgICAgY29uc3QgeyBfYywgX3YsIGRhdGEsIGNoaWxkcmVuID0gW10gfSA9IF92bTtcblxuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGNsYXNzOiBjbGFzc05hbWVzLFxuICAgICAgICAgICAgc3RhdGljQ2xhc3MsXG4gICAgICAgICAgICBzdHlsZSxcbiAgICAgICAgICAgIHN0YXRpY1N0eWxlLFxuICAgICAgICAgICAgYXR0cnMgPSB7fSxcbiAgICAgICAgICAgIC4uLnJlc3RcbiAgICAgICAgICB9ID0gZGF0YTtcblxuICAgICAgICAgIHJldHVybiBfYyhcbiAgICAgICAgICAgICdzdmcnLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBjbGFzczogW2NsYXNzTmFtZXMsc3RhdGljQ2xhc3NdLFxuICAgICAgICAgICAgICBzdHlsZTogW3N0eWxlLHN0YXRpY1N0eWxlXSxcbiAgICAgICAgICAgICAgYXR0cnM6IE9iamVjdC5hc3NpZ24oe1widmlld0JveFwiOlwiMCAwIDI0IDIyXCIsXCJmaWxsXCI6XCJub25lXCIsXCJ4bWxuc1wiOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn0sIGF0dHJzKSxcbiAgICAgICAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGlsZHJlbi5jb25jYXQoW19jKCdwYXRoJyx7YXR0cnM6e1wiZFwiOlwiTTIzLjk5NiAxMi4zOGEuNTI3LjUyNyAwIDAwLS4zMDQtLjUzbC01LjQyMy0yLjUxNVYzLjI3M2MwLS4wMTItLjAwNC0uMDI0LS4wMDUtLjAzNmEuNTI2LjUyNiAwIDAwLS4zMDQtLjUzMUwxMi4yMy4wNDkgMTIuMjA3LjA0QS41MTcuNTE3IDAgMDAxMiAwYS41NzcuNTc3IDAgMDAtLjIwNy4wNDFMMTEuNzcuMDUgNi4wNCAyLjcwNmEuNTI2LjUyNiAwIDAwLS4zMDQuNTMxYy0uMDAxLjAxMi0uMDA1LjAyNC0uMDA1LjAzN3Y2LjA2MkwuMzA4IDExLjg0OWEuNTI2LjUyNiAwIDAwLS4zMDMuNTMxYy0uMDAxLjAxMi0uMDA1LjAyNC0uMDA1LjAzN3Y2LjM5N2MwIC4yMDUuMTIuMzkyLjMwOC40NzlMNi4wNCAyMS45NWMuMDE3LjAwOC4wMzUuMDEyLjA1NC4wMThsLjA0LjAxNEEuNTUuNTUgMCAwMDYuMjcgMjJjLjA0NSAwIC4wOS0uMDA3LjEzNC0uMDE4bC4wNC0uMDE0Yy4wMTktLjAwNi4wMzctLjAxLjA1NS0uMDE4TDEyIDE5LjM5OGw1LjUwMyAyLjU1MmMuMDE3LjAwOC4wMzYuMDEyLjA1NC4wMTguMDE0LjAwNC4wMjYuMDEuMDQuMDEzYS41My41MyAwIDAwLjEzNC4wMTljLjA0NiAwIC4wOS0uMDA3LjEzNS0uMDE5LjAxNC0uMDAzLjAyNy0uMDA5LjA0LS4wMTMuMDE4LS4wMDYuMDM3LS4wMS4wNTQtLjAxOGw1LjczMi0yLjY1OGEuNTI5LjUyOSAwIDAwLjMwOC0uNDc4di02LjM5N2MwLS4wMTMtLjAwMy0uMDI1LS4wMDQtLjAzN3ptLTYuMjY1IDIuMTFsLTQuNTY1LTIuMTE4IDQuNTY1LTIuMTE2IDQuNTY2IDIuMTE2LTQuNTY2IDIuMTE3em0tMTEuNDYyIDBsLTQuNTY2LTIuMTE4IDQuNTY2LTIuMTE2IDQuNTY2IDIuMTE2LTQuNTY2IDIuMTE3ek0xMiAxLjExMWw0LjU2NiAyLjExN0wxMiA1LjM0NiA3LjQzNCAzLjIyOSAxMiAxLjExMnptLS41MzcgMTAuMzgyTDYuODA2IDkuMzM1VjQuMTA3bDQuNjU3IDIuMTZ2NS4yMjd6bTEuMDc1LTUuMjI4bDQuNjU2LTIuMTU5djUuMjI4bC00LjY1NiAyLjE2VjYuMjY1em0wIDYuOTg0bDQuNjU2IDIuMTZ2NS4yMjdsLTQuNjU2LTIuMTU5VjEzLjI1em0tMTEuNDY0IDBsNC42NTcgMi4xNnY1LjIyN2wtNC42NTctMi4xNTlWMTMuMjV6bTEwLjM4OSA1LjIyOWwtNC42NTcgMi4xNThWMTUuNDFsNC42NTctMi4xNTl2NS4yMjl6bTExLjQ2MyAwbC00LjY1NyAyLjE1OFYxNS40MWw0LjY1Ny0yLjE1OXY1LjIyOXpcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwifX0pXSlcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAiLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgbm90QVJlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ub3QtYS1yZWdleHAnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGNvcnJlY3RJc1JlZ0V4cExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtaXMtcmVnZXhwLWxvZ2ljJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBuYXRpdmVFbmRzV2l0aCA9ICcnLmVuZHNXaXRoO1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG52YXIgQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgPSBjb3JyZWN0SXNSZWdFeHBMb2dpYygnZW5kc1dpdGgnKTtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL3B1bGwvNzAyXG52YXIgTUROX1BPTFlGSUxMX0JVRyA9ICFJU19QVVJFICYmICFDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyAmJiAhIWZ1bmN0aW9uICgpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoU3RyaW5nLnByb3RvdHlwZSwgJ2VuZHNXaXRoJyk7XG4gIHJldHVybiBkZXNjcmlwdG9yICYmICFkZXNjcmlwdG9yLndyaXRhYmxlO1xufSgpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmVuZHN3aXRoXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogIU1ETl9QT0xZRklMTF9CVUcgJiYgIUNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDIH0sIHtcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLykge1xuICAgIHZhciB0aGF0ID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgIG5vdEFSZWdFeHAoc2VhcmNoU3RyaW5nKTtcbiAgICB2YXIgZW5kUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhhdC5sZW5ndGgpO1xuICAgIHZhciBlbmQgPSBlbmRQb3NpdGlvbiA9PT0gdW5kZWZpbmVkID8gbGVuIDogbWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuIG5hdGl2ZUVuZHNXaXRoXG4gICAgICA/IG5hdGl2ZUVuZHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBlbmQpXG4gICAgICA6IHRoYXQuc2xpY2UoZW5kIC0gc2VhcmNoLmxlbmd0aCwgZW5kKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBub3RBUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vdC1hLXJlZ2V4cCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgY29ycmVjdElzUmVnRXhwTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1pcy1yZWdleHAtbG9naWMnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIG5hdGl2ZVN0YXJ0c1dpdGggPSAnJy5zdGFydHNXaXRoO1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG52YXIgQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgPSBjb3JyZWN0SXNSZWdFeHBMb2dpYygnc3RhcnRzV2l0aCcpO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvcHVsbC83MDJcbnZhciBNRE5fUE9MWUZJTExfQlVHID0gIUlTX1BVUkUgJiYgIUNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDICYmICEhZnVuY3Rpb24gKCkge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihTdHJpbmcucHJvdG90eXBlLCAnc3RhcnRzV2l0aCcpO1xuICByZXR1cm4gZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci53cml0YWJsZTtcbn0oKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnN0YXJ0c3dpdGhcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhTUROX1BPTFlGSUxMX0JVRyAmJiAhQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgfSwge1xuICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHZhciB0aGF0ID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgIG5vdEFSZWdFeHAoc2VhcmNoU3RyaW5nKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChtaW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSk7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiBuYXRpdmVTdGFydHNXaXRoXG4gICAgICA/IG5hdGl2ZVN0YXJ0c1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogaW4gY29yZS1qc0A0LCBtb3ZlIC9tb2R1bGVzLyBkZXBlbmRlbmNpZXMgdG8gcHVibGljIGVudHJpZXMgZm9yIGJldHRlciBvcHRpbWl6YXRpb24gYnkgdG9vbHMgbGlrZSBgcHJlc2V0LWVudmBcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yJyk7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIFVTRV9OQVRJVkVfVVJMID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS11cmwnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZGVmaW5lUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1hc3NpZ24nKTtcbnZhciBhcnJheUZyb20gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZnJvbScpO1xudmFyIGNvZGVBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY29kZUF0O1xudmFyIHRvQVNDSUkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXB1bnljb2RlLXRvLWFzY2lpJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBVUkxTZWFyY2hQYXJhbXNNb2R1bGUgPSByZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi51cmwtc2VhcmNoLXBhcmFtcycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIE5hdGl2ZVVSTCA9IGdsb2JhbC5VUkw7XG52YXIgVVJMU2VhcmNoUGFyYW1zID0gVVJMU2VhcmNoUGFyYW1zTW9kdWxlLlVSTFNlYXJjaFBhcmFtcztcbnZhciBnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlID0gVVJMU2VhcmNoUGFyYW1zTW9kdWxlLmdldFN0YXRlO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFVSTFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoJ1VSTCcpO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBwb3cgPSBNYXRoLnBvdztcblxudmFyIElOVkFMSURfQVVUSE9SSVRZID0gJ0ludmFsaWQgYXV0aG9yaXR5JztcbnZhciBJTlZBTElEX1NDSEVNRSA9ICdJbnZhbGlkIHNjaGVtZSc7XG52YXIgSU5WQUxJRF9IT1NUID0gJ0ludmFsaWQgaG9zdCc7XG52YXIgSU5WQUxJRF9QT1JUID0gJ0ludmFsaWQgcG9ydCc7XG5cbnZhciBBTFBIQSA9IC9bQS1aYS16XS87XG52YXIgQUxQSEFOVU1FUklDID0gL1tcXGQrLS5BLVphLXpdLztcbnZhciBESUdJVCA9IC9cXGQvO1xudmFyIEhFWF9TVEFSVCA9IC9eKDB4fDBYKS87XG52YXIgT0NUID0gL15bMC03XSskLztcbnZhciBERUMgPSAvXlxcZCskLztcbnZhciBIRVggPSAvXltcXGRBLUZhLWZdKyQvO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRyb2wtcmVnZXhcbnZhciBGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UID0gL1tcXHUwMDAwXFx1MDAwOVxcdTAwMEFcXHUwMDBEICMlLzo/QFtcXFxcXV0vO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRyb2wtcmVnZXhcbnZhciBGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UX0VYQ0xVRElOR19QRVJDRU5UID0gL1tcXHUwMDAwXFx1MDAwOVxcdTAwMEFcXHUwMDBEICMvOj9AW1xcXFxdXS87XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udHJvbC1yZWdleFxudmFyIExFQURJTkdfQU5EX1RSQUlMSU5HX0MwX0NPTlRST0xfT1JfU1BBQ0UgPSAvXltcXHUwMDAwLVxcdTAwMUYgXSt8W1xcdTAwMDAtXFx1MDAxRiBdKyQvZztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4XG52YXIgVEFCX0FORF9ORVdfTElORSA9IC9bXFx1MDAwOVxcdTAwMEFcXHUwMDBEXS9nO1xudmFyIEVPRjtcblxudmFyIHBhcnNlSG9zdCA9IGZ1bmN0aW9uICh1cmwsIGlucHV0KSB7XG4gIHZhciByZXN1bHQsIGNvZGVQb2ludHMsIGluZGV4O1xuICBpZiAoaW5wdXQuY2hhckF0KDApID09ICdbJykge1xuICAgIGlmIChpbnB1dC5jaGFyQXQoaW5wdXQubGVuZ3RoIC0gMSkgIT0gJ10nKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgIHJlc3VsdCA9IHBhcnNlSVB2NihpbnB1dC5zbGljZSgxLCAtMSkpO1xuICAgIGlmICghcmVzdWx0KSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgIHVybC5ob3N0ID0gcmVzdWx0O1xuICAvLyBvcGFxdWUgaG9zdFxuICB9IGVsc2UgaWYgKCFpc1NwZWNpYWwodXJsKSkge1xuICAgIGlmIChGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UX0VYQ0xVRElOR19QRVJDRU5ULnRlc3QoaW5wdXQpKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgIHJlc3VsdCA9ICcnO1xuICAgIGNvZGVQb2ludHMgPSBhcnJheUZyb20oaW5wdXQpO1xuICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGNvZGVQb2ludHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICByZXN1bHQgKz0gcGVyY2VudEVuY29kZShjb2RlUG9pbnRzW2luZGV4XSwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCk7XG4gICAgfVxuICAgIHVybC5ob3N0ID0gcmVzdWx0O1xuICB9IGVsc2Uge1xuICAgIGlucHV0ID0gdG9BU0NJSShpbnB1dCk7XG4gICAgaWYgKEZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlQudGVzdChpbnB1dCkpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgcmVzdWx0ID0gcGFyc2VJUHY0KGlucHV0KTtcbiAgICBpZiAocmVzdWx0ID09PSBudWxsKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgIHVybC5ob3N0ID0gcmVzdWx0O1xuICB9XG59O1xuXG52YXIgcGFyc2VJUHY0ID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHZhciBwYXJ0cyA9IGlucHV0LnNwbGl0KCcuJyk7XG4gIHZhciBwYXJ0c0xlbmd0aCwgbnVtYmVycywgaW5kZXgsIHBhcnQsIHJhZGl4LCBudW1iZXIsIGlwdjQ7XG4gIGlmIChwYXJ0cy5sZW5ndGggJiYgcGFydHNbcGFydHMubGVuZ3RoIC0gMV0gPT0gJycpIHtcbiAgICBwYXJ0cy5wb3AoKTtcbiAgfVxuICBwYXJ0c0xlbmd0aCA9IHBhcnRzLmxlbmd0aDtcbiAgaWYgKHBhcnRzTGVuZ3RoID4gNCkgcmV0dXJuIGlucHV0O1xuICBudW1iZXJzID0gW107XG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHBhcnRzTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgcGFydCA9IHBhcnRzW2luZGV4XTtcbiAgICBpZiAocGFydCA9PSAnJykgcmV0dXJuIGlucHV0O1xuICAgIHJhZGl4ID0gMTA7XG4gICAgaWYgKHBhcnQubGVuZ3RoID4gMSAmJiBwYXJ0LmNoYXJBdCgwKSA9PSAnMCcpIHtcbiAgICAgIHJhZGl4ID0gSEVYX1NUQVJULnRlc3QocGFydCkgPyAxNiA6IDg7XG4gICAgICBwYXJ0ID0gcGFydC5zbGljZShyYWRpeCA9PSA4ID8gMSA6IDIpO1xuICAgIH1cbiAgICBpZiAocGFydCA9PT0gJycpIHtcbiAgICAgIG51bWJlciA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghKHJhZGl4ID09IDEwID8gREVDIDogcmFkaXggPT0gOCA/IE9DVCA6IEhFWCkudGVzdChwYXJ0KSkgcmV0dXJuIGlucHV0O1xuICAgICAgbnVtYmVyID0gcGFyc2VJbnQocGFydCwgcmFkaXgpO1xuICAgIH1cbiAgICBudW1iZXJzLnB1c2gobnVtYmVyKTtcbiAgfVxuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBwYXJ0c0xlbmd0aDsgaW5kZXgrKykge1xuICAgIG51bWJlciA9IG51bWJlcnNbaW5kZXhdO1xuICAgIGlmIChpbmRleCA9PSBwYXJ0c0xlbmd0aCAtIDEpIHtcbiAgICAgIGlmIChudW1iZXIgPj0gcG93KDI1NiwgNSAtIHBhcnRzTGVuZ3RoKSkgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIGlmIChudW1iZXIgPiAyNTUpIHJldHVybiBudWxsO1xuICB9XG4gIGlwdjQgPSBudW1iZXJzLnBvcCgpO1xuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBudW1iZXJzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGlwdjQgKz0gbnVtYmVyc1tpbmRleF0gKiBwb3coMjU2LCAzIC0gaW5kZXgpO1xuICB9XG4gIHJldHVybiBpcHY0O1xufTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzXG52YXIgcGFyc2VJUHY2ID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHZhciBhZGRyZXNzID0gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdO1xuICB2YXIgcGllY2VJbmRleCA9IDA7XG4gIHZhciBjb21wcmVzcyA9IG51bGw7XG4gIHZhciBwb2ludGVyID0gMDtcbiAgdmFyIHZhbHVlLCBsZW5ndGgsIG51bWJlcnNTZWVuLCBpcHY0UGllY2UsIG51bWJlciwgc3dhcHMsIHN3YXA7XG5cbiAgdmFyIGNoYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGlucHV0LmNoYXJBdChwb2ludGVyKTtcbiAgfTtcblxuICBpZiAoY2hhcigpID09ICc6Jykge1xuICAgIGlmIChpbnB1dC5jaGFyQXQoMSkgIT0gJzonKSByZXR1cm47XG4gICAgcG9pbnRlciArPSAyO1xuICAgIHBpZWNlSW5kZXgrKztcbiAgICBjb21wcmVzcyA9IHBpZWNlSW5kZXg7XG4gIH1cbiAgd2hpbGUgKGNoYXIoKSkge1xuICAgIGlmIChwaWVjZUluZGV4ID09IDgpIHJldHVybjtcbiAgICBpZiAoY2hhcigpID09ICc6Jykge1xuICAgICAgaWYgKGNvbXByZXNzICE9PSBudWxsKSByZXR1cm47XG4gICAgICBwb2ludGVyKys7XG4gICAgICBwaWVjZUluZGV4Kys7XG4gICAgICBjb21wcmVzcyA9IHBpZWNlSW5kZXg7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdmFsdWUgPSBsZW5ndGggPSAwO1xuICAgIHdoaWxlIChsZW5ndGggPCA0ICYmIEhFWC50ZXN0KGNoYXIoKSkpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUgKiAxNiArIHBhcnNlSW50KGNoYXIoKSwgMTYpO1xuICAgICAgcG9pbnRlcisrO1xuICAgICAgbGVuZ3RoKys7XG4gICAgfVxuICAgIGlmIChjaGFyKCkgPT0gJy4nKSB7XG4gICAgICBpZiAobGVuZ3RoID09IDApIHJldHVybjtcbiAgICAgIHBvaW50ZXIgLT0gbGVuZ3RoO1xuICAgICAgaWYgKHBpZWNlSW5kZXggPiA2KSByZXR1cm47XG4gICAgICBudW1iZXJzU2VlbiA9IDA7XG4gICAgICB3aGlsZSAoY2hhcigpKSB7XG4gICAgICAgIGlwdjRQaWVjZSA9IG51bGw7XG4gICAgICAgIGlmIChudW1iZXJzU2VlbiA+IDApIHtcbiAgICAgICAgICBpZiAoY2hhcigpID09ICcuJyAmJiBudW1iZXJzU2VlbiA8IDQpIHBvaW50ZXIrKztcbiAgICAgICAgICBlbHNlIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIURJR0lULnRlc3QoY2hhcigpKSkgcmV0dXJuO1xuICAgICAgICB3aGlsZSAoRElHSVQudGVzdChjaGFyKCkpKSB7XG4gICAgICAgICAgbnVtYmVyID0gcGFyc2VJbnQoY2hhcigpLCAxMCk7XG4gICAgICAgICAgaWYgKGlwdjRQaWVjZSA9PT0gbnVsbCkgaXB2NFBpZWNlID0gbnVtYmVyO1xuICAgICAgICAgIGVsc2UgaWYgKGlwdjRQaWVjZSA9PSAwKSByZXR1cm47XG4gICAgICAgICAgZWxzZSBpcHY0UGllY2UgPSBpcHY0UGllY2UgKiAxMCArIG51bWJlcjtcbiAgICAgICAgICBpZiAoaXB2NFBpZWNlID4gMjU1KSByZXR1cm47XG4gICAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICB9XG4gICAgICAgIGFkZHJlc3NbcGllY2VJbmRleF0gPSBhZGRyZXNzW3BpZWNlSW5kZXhdICogMjU2ICsgaXB2NFBpZWNlO1xuICAgICAgICBudW1iZXJzU2VlbisrO1xuICAgICAgICBpZiAobnVtYmVyc1NlZW4gPT0gMiB8fCBudW1iZXJzU2VlbiA9PSA0KSBwaWVjZUluZGV4Kys7XG4gICAgICB9XG4gICAgICBpZiAobnVtYmVyc1NlZW4gIT0gNCkgcmV0dXJuO1xuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIGlmIChjaGFyKCkgPT0gJzonKSB7XG4gICAgICBwb2ludGVyKys7XG4gICAgICBpZiAoIWNoYXIoKSkgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAoY2hhcigpKSByZXR1cm47XG4gICAgYWRkcmVzc1twaWVjZUluZGV4KytdID0gdmFsdWU7XG4gIH1cbiAgaWYgKGNvbXByZXNzICE9PSBudWxsKSB7XG4gICAgc3dhcHMgPSBwaWVjZUluZGV4IC0gY29tcHJlc3M7XG4gICAgcGllY2VJbmRleCA9IDc7XG4gICAgd2hpbGUgKHBpZWNlSW5kZXggIT0gMCAmJiBzd2FwcyA+IDApIHtcbiAgICAgIHN3YXAgPSBhZGRyZXNzW3BpZWNlSW5kZXhdO1xuICAgICAgYWRkcmVzc1twaWVjZUluZGV4LS1dID0gYWRkcmVzc1tjb21wcmVzcyArIHN3YXBzIC0gMV07XG4gICAgICBhZGRyZXNzW2NvbXByZXNzICsgLS1zd2Fwc10gPSBzd2FwO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwaWVjZUluZGV4ICE9IDgpIHJldHVybjtcbiAgcmV0dXJuIGFkZHJlc3M7XG59O1xuXG52YXIgZmluZExvbmdlc3RaZXJvU2VxdWVuY2UgPSBmdW5jdGlvbiAoaXB2Nikge1xuICB2YXIgbWF4SW5kZXggPSBudWxsO1xuICB2YXIgbWF4TGVuZ3RoID0gMTtcbiAgdmFyIGN1cnJTdGFydCA9IG51bGw7XG4gIHZhciBjdXJyTGVuZ3RoID0gMDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgZm9yICg7IGluZGV4IDwgODsgaW5kZXgrKykge1xuICAgIGlmIChpcHY2W2luZGV4XSAhPT0gMCkge1xuICAgICAgaWYgKGN1cnJMZW5ndGggPiBtYXhMZW5ndGgpIHtcbiAgICAgICAgbWF4SW5kZXggPSBjdXJyU3RhcnQ7XG4gICAgICAgIG1heExlbmd0aCA9IGN1cnJMZW5ndGg7XG4gICAgICB9XG4gICAgICBjdXJyU3RhcnQgPSBudWxsO1xuICAgICAgY3Vyckxlbmd0aCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjdXJyU3RhcnQgPT09IG51bGwpIGN1cnJTdGFydCA9IGluZGV4O1xuICAgICAgKytjdXJyTGVuZ3RoO1xuICAgIH1cbiAgfVxuICBpZiAoY3Vyckxlbmd0aCA+IG1heExlbmd0aCkge1xuICAgIG1heEluZGV4ID0gY3VyclN0YXJ0O1xuICAgIG1heExlbmd0aCA9IGN1cnJMZW5ndGg7XG4gIH1cbiAgcmV0dXJuIG1heEluZGV4O1xufTtcblxudmFyIHNlcmlhbGl6ZUhvc3QgPSBmdW5jdGlvbiAoaG9zdCkge1xuICB2YXIgcmVzdWx0LCBpbmRleCwgY29tcHJlc3MsIGlnbm9yZTA7XG4gIC8vIGlwdjRcbiAgaWYgKHR5cGVvZiBob3N0ID09ICdudW1iZXInKSB7XG4gICAgcmVzdWx0ID0gW107XG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgNDsgaW5kZXgrKykge1xuICAgICAgcmVzdWx0LnVuc2hpZnQoaG9zdCAlIDI1Nik7XG4gICAgICBob3N0ID0gZmxvb3IoaG9zdCAvIDI1Nik7XG4gICAgfSByZXR1cm4gcmVzdWx0LmpvaW4oJy4nKTtcbiAgLy8gaXB2NlxuICB9IGVsc2UgaWYgKHR5cGVvZiBob3N0ID09ICdvYmplY3QnKSB7XG4gICAgcmVzdWx0ID0gJyc7XG4gICAgY29tcHJlc3MgPSBmaW5kTG9uZ2VzdFplcm9TZXF1ZW5jZShob3N0KTtcbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCA4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoaWdub3JlMCAmJiBob3N0W2luZGV4XSA9PT0gMCkgY29udGludWU7XG4gICAgICBpZiAoaWdub3JlMCkgaWdub3JlMCA9IGZhbHNlO1xuICAgICAgaWYgKGNvbXByZXNzID09PSBpbmRleCkge1xuICAgICAgICByZXN1bHQgKz0gaW5kZXggPyAnOicgOiAnOjonO1xuICAgICAgICBpZ25vcmUwID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCArPSBob3N0W2luZGV4XS50b1N0cmluZygxNik7XG4gICAgICAgIGlmIChpbmRleCA8IDcpIHJlc3VsdCArPSAnOic7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnWycgKyByZXN1bHQgKyAnXSc7XG4gIH0gcmV0dXJuIGhvc3Q7XG59O1xuXG52YXIgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCA9IHt9O1xudmFyIGZyYWdtZW50UGVyY2VudEVuY29kZVNldCA9IGFzc2lnbih7fSwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCwge1xuICAnICc6IDEsICdcIic6IDEsICc8JzogMSwgJz4nOiAxLCAnYCc6IDFcbn0pO1xudmFyIHBhdGhQZXJjZW50RW5jb2RlU2V0ID0gYXNzaWduKHt9LCBmcmFnbWVudFBlcmNlbnRFbmNvZGVTZXQsIHtcbiAgJyMnOiAxLCAnPyc6IDEsICd7JzogMSwgJ30nOiAxXG59KTtcbnZhciB1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQgPSBhc3NpZ24oe30sIHBhdGhQZXJjZW50RW5jb2RlU2V0LCB7XG4gICcvJzogMSwgJzonOiAxLCAnOyc6IDEsICc9JzogMSwgJ0AnOiAxLCAnWyc6IDEsICdcXFxcJzogMSwgJ10nOiAxLCAnXic6IDEsICd8JzogMVxufSk7XG5cbnZhciBwZXJjZW50RW5jb2RlID0gZnVuY3Rpb24gKGNoYXIsIHNldCkge1xuICB2YXIgY29kZSA9IGNvZGVBdChjaGFyLCAwKTtcbiAgcmV0dXJuIGNvZGUgPiAweDIwICYmIGNvZGUgPCAweDdGICYmICFoYXMoc2V0LCBjaGFyKSA/IGNoYXIgOiBlbmNvZGVVUklDb21wb25lbnQoY2hhcik7XG59O1xuXG52YXIgc3BlY2lhbFNjaGVtZXMgPSB7XG4gIGZ0cDogMjEsXG4gIGZpbGU6IG51bGwsXG4gIGh0dHA6IDgwLFxuICBodHRwczogNDQzLFxuICB3czogODAsXG4gIHdzczogNDQzXG59O1xuXG52YXIgaXNTcGVjaWFsID0gZnVuY3Rpb24gKHVybCkge1xuICByZXR1cm4gaGFzKHNwZWNpYWxTY2hlbWVzLCB1cmwuc2NoZW1lKTtcbn07XG5cbnZhciBpbmNsdWRlc0NyZWRlbnRpYWxzID0gZnVuY3Rpb24gKHVybCkge1xuICByZXR1cm4gdXJsLnVzZXJuYW1lICE9ICcnIHx8IHVybC5wYXNzd29yZCAhPSAnJztcbn07XG5cbnZhciBjYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQgPSBmdW5jdGlvbiAodXJsKSB7XG4gIHJldHVybiAhdXJsLmhvc3QgfHwgdXJsLmNhbm5vdEJlQUJhc2VVUkwgfHwgdXJsLnNjaGVtZSA9PSAnZmlsZSc7XG59O1xuXG52YXIgaXNXaW5kb3dzRHJpdmVMZXR0ZXIgPSBmdW5jdGlvbiAoc3RyaW5nLCBub3JtYWxpemVkKSB7XG4gIHZhciBzZWNvbmQ7XG4gIHJldHVybiBzdHJpbmcubGVuZ3RoID09IDIgJiYgQUxQSEEudGVzdChzdHJpbmcuY2hhckF0KDApKVxuICAgICYmICgoc2Vjb25kID0gc3RyaW5nLmNoYXJBdCgxKSkgPT0gJzonIHx8ICghbm9ybWFsaXplZCAmJiBzZWNvbmQgPT0gJ3wnKSk7XG59O1xuXG52YXIgc3RhcnRzV2l0aFdpbmRvd3NEcml2ZUxldHRlciA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgdmFyIHRoaXJkO1xuICByZXR1cm4gc3RyaW5nLmxlbmd0aCA+IDEgJiYgaXNXaW5kb3dzRHJpdmVMZXR0ZXIoc3RyaW5nLnNsaWNlKDAsIDIpKSAmJiAoXG4gICAgc3RyaW5nLmxlbmd0aCA9PSAyIHx8XG4gICAgKCh0aGlyZCA9IHN0cmluZy5jaGFyQXQoMikpID09PSAnLycgfHwgdGhpcmQgPT09ICdcXFxcJyB8fCB0aGlyZCA9PT0gJz8nIHx8IHRoaXJkID09PSAnIycpXG4gICk7XG59O1xuXG52YXIgc2hvcnRlblVSTHNQYXRoID0gZnVuY3Rpb24gKHVybCkge1xuICB2YXIgcGF0aCA9IHVybC5wYXRoO1xuICB2YXIgcGF0aFNpemUgPSBwYXRoLmxlbmd0aDtcbiAgaWYgKHBhdGhTaXplICYmICh1cmwuc2NoZW1lICE9ICdmaWxlJyB8fCBwYXRoU2l6ZSAhPSAxIHx8ICFpc1dpbmRvd3NEcml2ZUxldHRlcihwYXRoWzBdLCB0cnVlKSkpIHtcbiAgICBwYXRoLnBvcCgpO1xuICB9XG59O1xuXG52YXIgaXNTaW5nbGVEb3QgPSBmdW5jdGlvbiAoc2VnbWVudCkge1xuICByZXR1cm4gc2VnbWVudCA9PT0gJy4nIHx8IHNlZ21lbnQudG9Mb3dlckNhc2UoKSA9PT0gJyUyZSc7XG59O1xuXG52YXIgaXNEb3VibGVEb3QgPSBmdW5jdGlvbiAoc2VnbWVudCkge1xuICBzZWdtZW50ID0gc2VnbWVudC50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gc2VnbWVudCA9PT0gJy4uJyB8fCBzZWdtZW50ID09PSAnJTJlLicgfHwgc2VnbWVudCA9PT0gJy4lMmUnIHx8IHNlZ21lbnQgPT09ICclMmUlMmUnO1xufTtcblxuLy8gU3RhdGVzOlxudmFyIFNDSEVNRV9TVEFSVCA9IHt9O1xudmFyIFNDSEVNRSA9IHt9O1xudmFyIE5PX1NDSEVNRSA9IHt9O1xudmFyIFNQRUNJQUxfUkVMQVRJVkVfT1JfQVVUSE9SSVRZID0ge307XG52YXIgUEFUSF9PUl9BVVRIT1JJVFkgPSB7fTtcbnZhciBSRUxBVElWRSA9IHt9O1xudmFyIFJFTEFUSVZFX1NMQVNIID0ge307XG52YXIgU1BFQ0lBTF9BVVRIT1JJVFlfU0xBU0hFUyA9IHt9O1xudmFyIFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTID0ge307XG52YXIgQVVUSE9SSVRZID0ge307XG52YXIgSE9TVCA9IHt9O1xudmFyIEhPU1ROQU1FID0ge307XG52YXIgUE9SVCA9IHt9O1xudmFyIEZJTEUgPSB7fTtcbnZhciBGSUxFX1NMQVNIID0ge307XG52YXIgRklMRV9IT1NUID0ge307XG52YXIgUEFUSF9TVEFSVCA9IHt9O1xudmFyIFBBVEggPSB7fTtcbnZhciBDQU5OT1RfQkVfQV9CQVNFX1VSTF9QQVRIID0ge307XG52YXIgUVVFUlkgPSB7fTtcbnZhciBGUkFHTUVOVCA9IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHNcbnZhciBwYXJzZVVSTCA9IGZ1bmN0aW9uICh1cmwsIGlucHV0LCBzdGF0ZU92ZXJyaWRlLCBiYXNlKSB7XG4gIHZhciBzdGF0ZSA9IHN0YXRlT3ZlcnJpZGUgfHwgU0NIRU1FX1NUQVJUO1xuICB2YXIgcG9pbnRlciA9IDA7XG4gIHZhciBidWZmZXIgPSAnJztcbiAgdmFyIHNlZW5BdCA9IGZhbHNlO1xuICB2YXIgc2VlbkJyYWNrZXQgPSBmYWxzZTtcbiAgdmFyIHNlZW5QYXNzd29yZFRva2VuID0gZmFsc2U7XG4gIHZhciBjb2RlUG9pbnRzLCBjaGFyLCBidWZmZXJDb2RlUG9pbnRzLCBmYWlsdXJlO1xuXG4gIGlmICghc3RhdGVPdmVycmlkZSkge1xuICAgIHVybC5zY2hlbWUgPSAnJztcbiAgICB1cmwudXNlcm5hbWUgPSAnJztcbiAgICB1cmwucGFzc3dvcmQgPSAnJztcbiAgICB1cmwuaG9zdCA9IG51bGw7XG4gICAgdXJsLnBvcnQgPSBudWxsO1xuICAgIHVybC5wYXRoID0gW107XG4gICAgdXJsLnF1ZXJ5ID0gbnVsbDtcbiAgICB1cmwuZnJhZ21lbnQgPSBudWxsO1xuICAgIHVybC5jYW5ub3RCZUFCYXNlVVJMID0gZmFsc2U7XG4gICAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKExFQURJTkdfQU5EX1RSQUlMSU5HX0MwX0NPTlRST0xfT1JfU1BBQ0UsICcnKTtcbiAgfVxuXG4gIGlucHV0ID0gaW5wdXQucmVwbGFjZShUQUJfQU5EX05FV19MSU5FLCAnJyk7XG5cbiAgY29kZVBvaW50cyA9IGFycmF5RnJvbShpbnB1dCk7XG5cbiAgd2hpbGUgKHBvaW50ZXIgPD0gY29kZVBvaW50cy5sZW5ndGgpIHtcbiAgICBjaGFyID0gY29kZVBvaW50c1twb2ludGVyXTtcbiAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICBjYXNlIFNDSEVNRV9TVEFSVDpcbiAgICAgICAgaWYgKGNoYXIgJiYgQUxQSEEudGVzdChjaGFyKSkge1xuICAgICAgICAgIGJ1ZmZlciArPSBjaGFyLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgc3RhdGUgPSBTQ0hFTUU7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN0YXRlT3ZlcnJpZGUpIHtcbiAgICAgICAgICBzdGF0ZSA9IE5PX1NDSEVNRTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIHJldHVybiBJTlZBTElEX1NDSEVNRTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgU0NIRU1FOlxuICAgICAgICBpZiAoY2hhciAmJiAoQUxQSEFOVU1FUklDLnRlc3QoY2hhcikgfHwgY2hhciA9PSAnKycgfHwgY2hhciA9PSAnLScgfHwgY2hhciA9PSAnLicpKSB7XG4gICAgICAgICAgYnVmZmVyICs9IGNoYXIudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyID09ICc6Jykge1xuICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlICYmIChcbiAgICAgICAgICAgIChpc1NwZWNpYWwodXJsKSAhPSBoYXMoc3BlY2lhbFNjaGVtZXMsIGJ1ZmZlcikpIHx8XG4gICAgICAgICAgICAoYnVmZmVyID09ICdmaWxlJyAmJiAoaW5jbHVkZXNDcmVkZW50aWFscyh1cmwpIHx8IHVybC5wb3J0ICE9PSBudWxsKSkgfHxcbiAgICAgICAgICAgICh1cmwuc2NoZW1lID09ICdmaWxlJyAmJiAhdXJsLmhvc3QpXG4gICAgICAgICAgKSkgcmV0dXJuO1xuICAgICAgICAgIHVybC5zY2hlbWUgPSBidWZmZXI7XG4gICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHtcbiAgICAgICAgICAgIGlmIChpc1NwZWNpYWwodXJsKSAmJiBzcGVjaWFsU2NoZW1lc1t1cmwuc2NoZW1lXSA9PSB1cmwucG9ydCkgdXJsLnBvcnQgPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICBpZiAodXJsLnNjaGVtZSA9PSAnZmlsZScpIHtcbiAgICAgICAgICAgIHN0YXRlID0gRklMRTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzU3BlY2lhbCh1cmwpICYmIGJhc2UgJiYgYmFzZS5zY2hlbWUgPT0gdXJsLnNjaGVtZSkge1xuICAgICAgICAgICAgc3RhdGUgPSBTUEVDSUFMX1JFTEFUSVZFX09SX0FVVEhPUklUWTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzU3BlY2lhbCh1cmwpKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfQVVUSE9SSVRZX1NMQVNIRVM7XG4gICAgICAgICAgfSBlbHNlIGlmIChjb2RlUG9pbnRzW3BvaW50ZXIgKyAxXSA9PSAnLycpIHtcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSF9PUl9BVVRIT1JJVFk7XG4gICAgICAgICAgICBwb2ludGVyKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVybC5jYW5ub3RCZUFCYXNlVVJMID0gdHJ1ZTtcbiAgICAgICAgICAgIHVybC5wYXRoLnB1c2goJycpO1xuICAgICAgICAgICAgc3RhdGUgPSBDQU5OT1RfQkVfQV9CQVNFX1VSTF9QQVRIO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghc3RhdGVPdmVycmlkZSkge1xuICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgIHN0YXRlID0gTk9fU0NIRU1FO1xuICAgICAgICAgIHBvaW50ZXIgPSAwO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgcmV0dXJuIElOVkFMSURfU0NIRU1FO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBOT19TQ0hFTUU6XG4gICAgICAgIGlmICghYmFzZSB8fCAoYmFzZS5jYW5ub3RCZUFCYXNlVVJMICYmIGNoYXIgIT0gJyMnKSkgcmV0dXJuIElOVkFMSURfU0NIRU1FO1xuICAgICAgICBpZiAoYmFzZS5jYW5ub3RCZUFCYXNlVVJMICYmIGNoYXIgPT0gJyMnKSB7XG4gICAgICAgICAgdXJsLnNjaGVtZSA9IGJhc2Uuc2NoZW1lO1xuICAgICAgICAgIHVybC5wYXRoID0gYmFzZS5wYXRoLnNsaWNlKCk7XG4gICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTtcbiAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICB1cmwuY2Fubm90QmVBQmFzZVVSTCA9IHRydWU7XG4gICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZSA9IGJhc2Uuc2NoZW1lID09ICdmaWxlJyA/IEZJTEUgOiBSRUxBVElWRTtcbiAgICAgICAgY29udGludWU7XG5cbiAgICAgIGNhc2UgU1BFQ0lBTF9SRUxBVElWRV9PUl9BVVRIT1JJVFk6XG4gICAgICAgIGlmIChjaGFyID09ICcvJyAmJiBjb2RlUG9pbnRzW3BvaW50ZXIgKyAxXSA9PSAnLycpIHtcbiAgICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTO1xuICAgICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGF0ZSA9IFJFTEFUSVZFO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGJyZWFrO1xuXG4gICAgICBjYXNlIFBBVEhfT1JfQVVUSE9SSVRZOlxuICAgICAgICBpZiAoY2hhciA9PSAnLycpIHtcbiAgICAgICAgICBzdGF0ZSA9IEFVVEhPUklUWTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBSRUxBVElWRTpcbiAgICAgICAgdXJsLnNjaGVtZSA9IGJhc2Uuc2NoZW1lO1xuICAgICAgICBpZiAoY2hhciA9PSBFT0YpIHtcbiAgICAgICAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lO1xuICAgICAgICAgIHVybC5wYXNzd29yZCA9IGJhc2UucGFzc3dvcmQ7XG4gICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7XG4gICAgICAgICAgdXJsLnBhdGggPSBiYXNlLnBhdGguc2xpY2UoKTtcbiAgICAgICAgICB1cmwucXVlcnkgPSBiYXNlLnF1ZXJ5O1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT0gJy8nIHx8IChjaGFyID09ICdcXFxcJyAmJiBpc1NwZWNpYWwodXJsKSkpIHtcbiAgICAgICAgICBzdGF0ZSA9IFJFTEFUSVZFX1NMQVNIO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT0gJz8nKSB7XG4gICAgICAgICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTtcbiAgICAgICAgICB1cmwucGFzc3dvcmQgPSBiYXNlLnBhc3N3b3JkO1xuICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0O1xuICAgICAgICAgIHVybC5wYXRoID0gYmFzZS5wYXRoLnNsaWNlKCk7XG4gICAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBRVUVSWTtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyID09ICcjJykge1xuICAgICAgICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7XG4gICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICB1cmwucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpO1xuICAgICAgICAgIHVybC5xdWVyeSA9IGJhc2UucXVlcnk7XG4gICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lO1xuICAgICAgICAgIHVybC5wYXNzd29yZCA9IGJhc2UucGFzc3dvcmQ7XG4gICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7XG4gICAgICAgICAgdXJsLnBhdGggPSBiYXNlLnBhdGguc2xpY2UoKTtcbiAgICAgICAgICB1cmwucGF0aC5wb3AoKTtcbiAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgUkVMQVRJVkVfU0xBU0g6XG4gICAgICAgIGlmIChpc1NwZWNpYWwodXJsKSAmJiAoY2hhciA9PSAnLycgfHwgY2hhciA9PSAnXFxcXCcpKSB7XG4gICAgICAgICAgc3RhdGUgPSBTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUztcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyID09ICcvJykge1xuICAgICAgICAgIHN0YXRlID0gQVVUSE9SSVRZO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7XG4gICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICB1cmwucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgU1BFQ0lBTF9BVVRIT1JJVFlfU0xBU0hFUzpcbiAgICAgICAgc3RhdGUgPSBTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUztcbiAgICAgICAgaWYgKGNoYXIgIT0gJy8nIHx8IGJ1ZmZlci5jaGFyQXQocG9pbnRlciArIDEpICE9ICcvJykgY29udGludWU7XG4gICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVM6XG4gICAgICAgIGlmIChjaGFyICE9ICcvJyAmJiBjaGFyICE9ICdcXFxcJykge1xuICAgICAgICAgIHN0YXRlID0gQVVUSE9SSVRZO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGJyZWFrO1xuXG4gICAgICBjYXNlIEFVVEhPUklUWTpcbiAgICAgICAgaWYgKGNoYXIgPT0gJ0AnKSB7XG4gICAgICAgICAgaWYgKHNlZW5BdCkgYnVmZmVyID0gJyU0MCcgKyBidWZmZXI7XG4gICAgICAgICAgc2VlbkF0ID0gdHJ1ZTtcbiAgICAgICAgICBidWZmZXJDb2RlUG9pbnRzID0gYXJyYXlGcm9tKGJ1ZmZlcik7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBidWZmZXJDb2RlUG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY29kZVBvaW50ID0gYnVmZmVyQ29kZVBvaW50c1tpXTtcbiAgICAgICAgICAgIGlmIChjb2RlUG9pbnQgPT0gJzonICYmICFzZWVuUGFzc3dvcmRUb2tlbikge1xuICAgICAgICAgICAgICBzZWVuUGFzc3dvcmRUb2tlbiA9IHRydWU7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGVuY29kZWRDb2RlUG9pbnRzID0gcGVyY2VudEVuY29kZShjb2RlUG9pbnQsIHVzZXJpbmZvUGVyY2VudEVuY29kZVNldCk7XG4gICAgICAgICAgICBpZiAoc2VlblBhc3N3b3JkVG9rZW4pIHVybC5wYXNzd29yZCArPSBlbmNvZGVkQ29kZVBvaW50cztcbiAgICAgICAgICAgIGVsc2UgdXJsLnVzZXJuYW1lICs9IGVuY29kZWRDb2RlUG9pbnRzO1xuICAgICAgICAgIH1cbiAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBjaGFyID09IEVPRiB8fCBjaGFyID09ICcvJyB8fCBjaGFyID09ICc/JyB8fCBjaGFyID09ICcjJyB8fFxuICAgICAgICAgIChjaGFyID09ICdcXFxcJyAmJiBpc1NwZWNpYWwodXJsKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKHNlZW5BdCAmJiBidWZmZXIgPT0gJycpIHJldHVybiBJTlZBTElEX0FVVEhPUklUWTtcbiAgICAgICAgICBwb2ludGVyIC09IGFycmF5RnJvbShidWZmZXIpLmxlbmd0aCArIDE7XG4gICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBIT1NUO1xuICAgICAgICB9IGVsc2UgYnVmZmVyICs9IGNoYXI7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEhPU1Q6XG4gICAgICBjYXNlIEhPU1ROQU1FOlxuICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSAmJiB1cmwuc2NoZW1lID09ICdmaWxlJykge1xuICAgICAgICAgIHN0YXRlID0gRklMRV9IT1NUO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT0gJzonICYmICFzZWVuQnJhY2tldCkge1xuICAgICAgICAgIGlmIChidWZmZXIgPT0gJycpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgICAgICAgZmFpbHVyZSA9IHBhcnNlSG9zdCh1cmwsIGJ1ZmZlcik7XG4gICAgICAgICAgaWYgKGZhaWx1cmUpIHJldHVybiBmYWlsdXJlO1xuICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgIHN0YXRlID0gUE9SVDtcbiAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSA9PSBIT1NUTkFNRSkgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGNoYXIgPT0gRU9GIHx8IGNoYXIgPT0gJy8nIHx8IGNoYXIgPT0gJz8nIHx8IGNoYXIgPT0gJyMnIHx8XG4gICAgICAgICAgKGNoYXIgPT0gJ1xcXFwnICYmIGlzU3BlY2lhbCh1cmwpKVxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoaXNTcGVjaWFsKHVybCkgJiYgYnVmZmVyID09ICcnKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlICYmIGJ1ZmZlciA9PSAnJyAmJiAoaW5jbHVkZXNDcmVkZW50aWFscyh1cmwpIHx8IHVybC5wb3J0ICE9PSBudWxsKSkgcmV0dXJuO1xuICAgICAgICAgIGZhaWx1cmUgPSBwYXJzZUhvc3QodXJsLCBidWZmZXIpO1xuICAgICAgICAgIGlmIChmYWlsdXJlKSByZXR1cm4gZmFpbHVyZTtcbiAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IFBBVEhfU1RBUlQ7XG4gICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHJldHVybjtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoY2hhciA9PSAnWycpIHNlZW5CcmFja2V0ID0gdHJ1ZTtcbiAgICAgICAgICBlbHNlIGlmIChjaGFyID09ICddJykgc2VlbkJyYWNrZXQgPSBmYWxzZTtcbiAgICAgICAgICBidWZmZXIgKz0gY2hhcjtcbiAgICAgICAgfSBicmVhaztcblxuICAgICAgY2FzZSBQT1JUOlxuICAgICAgICBpZiAoRElHSVQudGVzdChjaGFyKSkge1xuICAgICAgICAgIGJ1ZmZlciArPSBjaGFyO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGNoYXIgPT0gRU9GIHx8IGNoYXIgPT0gJy8nIHx8IGNoYXIgPT0gJz8nIHx8IGNoYXIgPT0gJyMnIHx8XG4gICAgICAgICAgKGNoYXIgPT0gJ1xcXFwnICYmIGlzU3BlY2lhbCh1cmwpKSB8fFxuICAgICAgICAgIHN0YXRlT3ZlcnJpZGVcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKGJ1ZmZlciAhPSAnJykge1xuICAgICAgICAgICAgdmFyIHBvcnQgPSBwYXJzZUludChidWZmZXIsIDEwKTtcbiAgICAgICAgICAgIGlmIChwb3J0ID4gMHhGRkZGKSByZXR1cm4gSU5WQUxJRF9QT1JUO1xuICAgICAgICAgICAgdXJsLnBvcnQgPSAoaXNTcGVjaWFsKHVybCkgJiYgcG9ydCA9PT0gc3BlY2lhbFNjaGVtZXNbdXJsLnNjaGVtZV0pID8gbnVsbCA6IHBvcnQ7XG4gICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHJldHVybjtcbiAgICAgICAgICBzdGF0ZSA9IFBBVEhfU1RBUlQ7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSByZXR1cm4gSU5WQUxJRF9QT1JUO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBGSUxFOlxuICAgICAgICB1cmwuc2NoZW1lID0gJ2ZpbGUnO1xuICAgICAgICBpZiAoY2hhciA9PSAnLycgfHwgY2hhciA9PSAnXFxcXCcpIHN0YXRlID0gRklMRV9TTEFTSDtcbiAgICAgICAgZWxzZSBpZiAoYmFzZSAmJiBiYXNlLnNjaGVtZSA9PSAnZmlsZScpIHtcbiAgICAgICAgICBpZiAoY2hhciA9PSBFT0YpIHtcbiAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgdXJsLnBhdGggPSBiYXNlLnBhdGguc2xpY2UoKTtcbiAgICAgICAgICAgIHVybC5xdWVyeSA9IGJhc2UucXVlcnk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaGFyID09ICc/Jykge1xuICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpO1xuICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hhciA9PSAnIycpIHtcbiAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgdXJsLnBhdGggPSBiYXNlLnBhdGguc2xpY2UoKTtcbiAgICAgICAgICAgIHVybC5xdWVyeSA9IGJhc2UucXVlcnk7XG4gICAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghc3RhcnRzV2l0aFdpbmRvd3NEcml2ZUxldHRlcihjb2RlUG9pbnRzLnNsaWNlKHBvaW50ZXIpLmpvaW4oJycpKSkge1xuICAgICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgICAgdXJsLnBhdGggPSBiYXNlLnBhdGguc2xpY2UoKTtcbiAgICAgICAgICAgICAgc2hvcnRlblVSTHNQYXRoKHVybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGJyZWFrO1xuXG4gICAgICBjYXNlIEZJTEVfU0xBU0g6XG4gICAgICAgIGlmIChjaGFyID09ICcvJyB8fCBjaGFyID09ICdcXFxcJykge1xuICAgICAgICAgIHN0YXRlID0gRklMRV9IT1NUO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiYXNlICYmIGJhc2Uuc2NoZW1lID09ICdmaWxlJyAmJiAhc3RhcnRzV2l0aFdpbmRvd3NEcml2ZUxldHRlcihjb2RlUG9pbnRzLnNsaWNlKHBvaW50ZXIpLmpvaW4oJycpKSkge1xuICAgICAgICAgIGlmIChpc1dpbmRvd3NEcml2ZUxldHRlcihiYXNlLnBhdGhbMF0sIHRydWUpKSB1cmwucGF0aC5wdXNoKGJhc2UucGF0aFswXSk7XG4gICAgICAgICAgZWxzZSB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICBjYXNlIEZJTEVfSE9TVDpcbiAgICAgICAgaWYgKGNoYXIgPT0gRU9GIHx8IGNoYXIgPT0gJy8nIHx8IGNoYXIgPT0gJ1xcXFwnIHx8IGNoYXIgPT0gJz8nIHx8IGNoYXIgPT0gJyMnKSB7XG4gICAgICAgICAgaWYgKCFzdGF0ZU92ZXJyaWRlICYmIGlzV2luZG93c0RyaXZlTGV0dGVyKGJ1ZmZlcikpIHtcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGJ1ZmZlciA9PSAnJykge1xuICAgICAgICAgICAgdXJsLmhvc3QgPSAnJztcbiAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlKSByZXR1cm47XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEhfU1RBUlQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZhaWx1cmUgPSBwYXJzZUhvc3QodXJsLCBidWZmZXIpO1xuICAgICAgICAgICAgaWYgKGZhaWx1cmUpIHJldHVybiBmYWlsdXJlO1xuICAgICAgICAgICAgaWYgKHVybC5ob3N0ID09ICdsb2NhbGhvc3QnKSB1cmwuaG9zdCA9ICcnO1xuICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHJldHVybjtcbiAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIX1NUQVJUO1xuICAgICAgICAgIH0gY29udGludWU7XG4gICAgICAgIH0gZWxzZSBidWZmZXIgKz0gY2hhcjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgUEFUSF9TVEFSVDpcbiAgICAgICAgaWYgKGlzU3BlY2lhbCh1cmwpKSB7XG4gICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgIGlmIChjaGFyICE9ICcvJyAmJiBjaGFyICE9ICdcXFxcJykgY29udGludWU7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN0YXRlT3ZlcnJpZGUgJiYgY2hhciA9PSAnPycpIHtcbiAgICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICB9IGVsc2UgaWYgKCFzdGF0ZU92ZXJyaWRlICYmIGNoYXIgPT0gJyMnKSB7XG4gICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyICE9IEVPRikge1xuICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICBpZiAoY2hhciAhPSAnLycpIGNvbnRpbnVlO1xuICAgICAgICB9IGJyZWFrO1xuXG4gICAgICBjYXNlIFBBVEg6XG4gICAgICAgIGlmIChcbiAgICAgICAgICBjaGFyID09IEVPRiB8fCBjaGFyID09ICcvJyB8fFxuICAgICAgICAgIChjaGFyID09ICdcXFxcJyAmJiBpc1NwZWNpYWwodXJsKSkgfHxcbiAgICAgICAgICAoIXN0YXRlT3ZlcnJpZGUgJiYgKGNoYXIgPT0gJz8nIHx8IGNoYXIgPT0gJyMnKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKGlzRG91YmxlRG90KGJ1ZmZlcikpIHtcbiAgICAgICAgICAgIHNob3J0ZW5VUkxzUGF0aCh1cmwpO1xuICAgICAgICAgICAgaWYgKGNoYXIgIT0gJy8nICYmICEoY2hhciA9PSAnXFxcXCcgJiYgaXNTcGVjaWFsKHVybCkpKSB7XG4gICAgICAgICAgICAgIHVybC5wYXRoLnB1c2goJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNTaW5nbGVEb3QoYnVmZmVyKSkge1xuICAgICAgICAgICAgaWYgKGNoYXIgIT0gJy8nICYmICEoY2hhciA9PSAnXFxcXCcgJiYgaXNTcGVjaWFsKHVybCkpKSB7XG4gICAgICAgICAgICAgIHVybC5wYXRoLnB1c2goJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodXJsLnNjaGVtZSA9PSAnZmlsZScgJiYgIXVybC5wYXRoLmxlbmd0aCAmJiBpc1dpbmRvd3NEcml2ZUxldHRlcihidWZmZXIpKSB7XG4gICAgICAgICAgICAgIGlmICh1cmwuaG9zdCkgdXJsLmhvc3QgPSAnJztcbiAgICAgICAgICAgICAgYnVmZmVyID0gYnVmZmVyLmNoYXJBdCgwKSArICc6JzsgLy8gbm9ybWFsaXplIHdpbmRvd3MgZHJpdmUgbGV0dGVyXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1cmwucGF0aC5wdXNoKGJ1ZmZlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgIGlmICh1cmwuc2NoZW1lID09ICdmaWxlJyAmJiAoY2hhciA9PSBFT0YgfHwgY2hhciA9PSAnPycgfHwgY2hhciA9PSAnIycpKSB7XG4gICAgICAgICAgICB3aGlsZSAodXJsLnBhdGgubGVuZ3RoID4gMSAmJiB1cmwucGF0aFswXSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgdXJsLnBhdGguc2hpZnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNoYXIgPT0gJz8nKSB7XG4gICAgICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gUVVFUlk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaGFyID09ICcjJykge1xuICAgICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBidWZmZXIgKz0gcGVyY2VudEVuY29kZShjaGFyLCBwYXRoUGVyY2VudEVuY29kZVNldCk7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgQ0FOTk9UX0JFX0FfQkFTRV9VUkxfUEFUSDpcbiAgICAgICAgaWYgKGNoYXIgPT0gJz8nKSB7XG4gICAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBRVUVSWTtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyID09ICcjJykge1xuICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhciAhPSBFT0YpIHtcbiAgICAgICAgICB1cmwucGF0aFswXSArPSBwZXJjZW50RW5jb2RlKGNoYXIsIEMwQ29udHJvbFBlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgICB9IGJyZWFrO1xuXG4gICAgICBjYXNlIFFVRVJZOlxuICAgICAgICBpZiAoIXN0YXRlT3ZlcnJpZGUgJiYgY2hhciA9PSAnIycpIHtcbiAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgIT0gRU9GKSB7XG4gICAgICAgICAgaWYgKGNoYXIgPT0gXCInXCIgJiYgaXNTcGVjaWFsKHVybCkpIHVybC5xdWVyeSArPSAnJTI3JztcbiAgICAgICAgICBlbHNlIGlmIChjaGFyID09ICcjJykgdXJsLnF1ZXJ5ICs9ICclMjMnO1xuICAgICAgICAgIGVsc2UgdXJsLnF1ZXJ5ICs9IHBlcmNlbnRFbmNvZGUoY2hhciwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCk7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgRlJBR01FTlQ6XG4gICAgICAgIGlmIChjaGFyICE9IEVPRikgdXJsLmZyYWdtZW50ICs9IHBlcmNlbnRFbmNvZGUoY2hhciwgZnJhZ21lbnRQZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcG9pbnRlcisrO1xuICB9XG59O1xuXG4vLyBgVVJMYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmwtY2xhc3NcbnZhciBVUkxDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIFVSTCh1cmwgLyogLCBiYXNlICovKSB7XG4gIHZhciB0aGF0ID0gYW5JbnN0YW5jZSh0aGlzLCBVUkxDb25zdHJ1Y3RvciwgJ1VSTCcpO1xuICB2YXIgYmFzZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICB2YXIgdXJsU3RyaW5nID0gU3RyaW5nKHVybCk7XG4gIHZhciBzdGF0ZSA9IHNldEludGVybmFsU3RhdGUodGhhdCwgeyB0eXBlOiAnVVJMJyB9KTtcbiAgdmFyIGJhc2VTdGF0ZSwgZmFpbHVyZTtcbiAgaWYgKGJhc2UgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChiYXNlIGluc3RhbmNlb2YgVVJMQ29uc3RydWN0b3IpIGJhc2VTdGF0ZSA9IGdldEludGVybmFsVVJMU3RhdGUoYmFzZSk7XG4gICAgZWxzZSB7XG4gICAgICBmYWlsdXJlID0gcGFyc2VVUkwoYmFzZVN0YXRlID0ge30sIFN0cmluZyhiYXNlKSk7XG4gICAgICBpZiAoZmFpbHVyZSkgdGhyb3cgVHlwZUVycm9yKGZhaWx1cmUpO1xuICAgIH1cbiAgfVxuICBmYWlsdXJlID0gcGFyc2VVUkwoc3RhdGUsIHVybFN0cmluZywgbnVsbCwgYmFzZVN0YXRlKTtcbiAgaWYgKGZhaWx1cmUpIHRocm93IFR5cGVFcnJvcihmYWlsdXJlKTtcbiAgdmFyIHNlYXJjaFBhcmFtcyA9IHN0YXRlLnNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgdmFyIHNlYXJjaFBhcmFtc1N0YXRlID0gZ2V0SW50ZXJuYWxTZWFyY2hQYXJhbXNTdGF0ZShzZWFyY2hQYXJhbXMpO1xuICBzZWFyY2hQYXJhbXNTdGF0ZS51cGRhdGVTZWFyY2hQYXJhbXMoc3RhdGUucXVlcnkpO1xuICBzZWFyY2hQYXJhbXNTdGF0ZS51cGRhdGVVUkwgPSBmdW5jdGlvbiAoKSB7XG4gICAgc3RhdGUucXVlcnkgPSBTdHJpbmcoc2VhcmNoUGFyYW1zKSB8fCBudWxsO1xuICB9O1xuICBpZiAoIURFU0NSSVBUT1JTKSB7XG4gICAgdGhhdC5ocmVmID0gc2VyaWFsaXplVVJMLmNhbGwodGhhdCk7XG4gICAgdGhhdC5vcmlnaW4gPSBnZXRPcmlnaW4uY2FsbCh0aGF0KTtcbiAgICB0aGF0LnByb3RvY29sID0gZ2V0UHJvdG9jb2wuY2FsbCh0aGF0KTtcbiAgICB0aGF0LnVzZXJuYW1lID0gZ2V0VXNlcm5hbWUuY2FsbCh0aGF0KTtcbiAgICB0aGF0LnBhc3N3b3JkID0gZ2V0UGFzc3dvcmQuY2FsbCh0aGF0KTtcbiAgICB0aGF0Lmhvc3QgPSBnZXRIb3N0LmNhbGwodGhhdCk7XG4gICAgdGhhdC5ob3N0bmFtZSA9IGdldEhvc3RuYW1lLmNhbGwodGhhdCk7XG4gICAgdGhhdC5wb3J0ID0gZ2V0UG9ydC5jYWxsKHRoYXQpO1xuICAgIHRoYXQucGF0aG5hbWUgPSBnZXRQYXRobmFtZS5jYWxsKHRoYXQpO1xuICAgIHRoYXQuc2VhcmNoID0gZ2V0U2VhcmNoLmNhbGwodGhhdCk7XG4gICAgdGhhdC5zZWFyY2hQYXJhbXMgPSBnZXRTZWFyY2hQYXJhbXMuY2FsbCh0aGF0KTtcbiAgICB0aGF0Lmhhc2ggPSBnZXRIYXNoLmNhbGwodGhhdCk7XG4gIH1cbn07XG5cbnZhciBVUkxQcm90b3R5cGUgPSBVUkxDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbnZhciBzZXJpYWxpemVVUkwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICB2YXIgc2NoZW1lID0gdXJsLnNjaGVtZTtcbiAgdmFyIHVzZXJuYW1lID0gdXJsLnVzZXJuYW1lO1xuICB2YXIgcGFzc3dvcmQgPSB1cmwucGFzc3dvcmQ7XG4gIHZhciBob3N0ID0gdXJsLmhvc3Q7XG4gIHZhciBwb3J0ID0gdXJsLnBvcnQ7XG4gIHZhciBwYXRoID0gdXJsLnBhdGg7XG4gIHZhciBxdWVyeSA9IHVybC5xdWVyeTtcbiAgdmFyIGZyYWdtZW50ID0gdXJsLmZyYWdtZW50O1xuICB2YXIgb3V0cHV0ID0gc2NoZW1lICsgJzonO1xuICBpZiAoaG9zdCAhPT0gbnVsbCkge1xuICAgIG91dHB1dCArPSAnLy8nO1xuICAgIGlmIChpbmNsdWRlc0NyZWRlbnRpYWxzKHVybCkpIHtcbiAgICAgIG91dHB1dCArPSB1c2VybmFtZSArIChwYXNzd29yZCA/ICc6JyArIHBhc3N3b3JkIDogJycpICsgJ0AnO1xuICAgIH1cbiAgICBvdXRwdXQgKz0gc2VyaWFsaXplSG9zdChob3N0KTtcbiAgICBpZiAocG9ydCAhPT0gbnVsbCkgb3V0cHV0ICs9ICc6JyArIHBvcnQ7XG4gIH0gZWxzZSBpZiAoc2NoZW1lID09ICdmaWxlJykgb3V0cHV0ICs9ICcvLyc7XG4gIG91dHB1dCArPSB1cmwuY2Fubm90QmVBQmFzZVVSTCA/IHBhdGhbMF0gOiBwYXRoLmxlbmd0aCA/ICcvJyArIHBhdGguam9pbignLycpIDogJyc7XG4gIGlmIChxdWVyeSAhPT0gbnVsbCkgb3V0cHV0ICs9ICc/JyArIHF1ZXJ5O1xuICBpZiAoZnJhZ21lbnQgIT09IG51bGwpIG91dHB1dCArPSAnIycgKyBmcmFnbWVudDtcbiAgcmV0dXJuIG91dHB1dDtcbn07XG5cbnZhciBnZXRPcmlnaW4gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICB2YXIgc2NoZW1lID0gdXJsLnNjaGVtZTtcbiAgdmFyIHBvcnQgPSB1cmwucG9ydDtcbiAgaWYgKHNjaGVtZSA9PSAnYmxvYicpIHRyeSB7XG4gICAgcmV0dXJuIG5ldyBVUkwoc2NoZW1lLnBhdGhbMF0pLm9yaWdpbjtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gJ251bGwnO1xuICB9XG4gIGlmIChzY2hlbWUgPT0gJ2ZpbGUnIHx8ICFpc1NwZWNpYWwodXJsKSkgcmV0dXJuICdudWxsJztcbiAgcmV0dXJuIHNjaGVtZSArICc6Ly8nICsgc2VyaWFsaXplSG9zdCh1cmwuaG9zdCkgKyAocG9ydCAhPT0gbnVsbCA/ICc6JyArIHBvcnQgOiAnJyk7XG59O1xuXG52YXIgZ2V0UHJvdG9jb2wgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpLnNjaGVtZSArICc6Jztcbn07XG5cbnZhciBnZXRVc2VybmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGdldEludGVybmFsVVJMU3RhdGUodGhpcykudXNlcm5hbWU7XG59O1xuXG52YXIgZ2V0UGFzc3dvcmQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpLnBhc3N3b3JkO1xufTtcblxudmFyIGdldEhvc3QgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICB2YXIgaG9zdCA9IHVybC5ob3N0O1xuICB2YXIgcG9ydCA9IHVybC5wb3J0O1xuICByZXR1cm4gaG9zdCA9PT0gbnVsbCA/ICcnXG4gICAgOiBwb3J0ID09PSBudWxsID8gc2VyaWFsaXplSG9zdChob3N0KVxuICAgIDogc2VyaWFsaXplSG9zdChob3N0KSArICc6JyArIHBvcnQ7XG59O1xuXG52YXIgZ2V0SG9zdG5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBob3N0ID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKS5ob3N0O1xuICByZXR1cm4gaG9zdCA9PT0gbnVsbCA/ICcnIDogc2VyaWFsaXplSG9zdChob3N0KTtcbn07XG5cbnZhciBnZXRQb3J0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcG9ydCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcykucG9ydDtcbiAgcmV0dXJuIHBvcnQgPT09IG51bGwgPyAnJyA6IFN0cmluZyhwb3J0KTtcbn07XG5cbnZhciBnZXRQYXRobmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gIHZhciBwYXRoID0gdXJsLnBhdGg7XG4gIHJldHVybiB1cmwuY2Fubm90QmVBQmFzZVVSTCA/IHBhdGhbMF0gOiBwYXRoLmxlbmd0aCA/ICcvJyArIHBhdGguam9pbignLycpIDogJyc7XG59O1xuXG52YXIgZ2V0U2VhcmNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcXVlcnkgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpLnF1ZXJ5O1xuICByZXR1cm4gcXVlcnkgPyAnPycgKyBxdWVyeSA6ICcnO1xufTtcblxudmFyIGdldFNlYXJjaFBhcmFtcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGdldEludGVybmFsVVJMU3RhdGUodGhpcykuc2VhcmNoUGFyYW1zO1xufTtcblxudmFyIGdldEhhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBmcmFnbWVudCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcykuZnJhZ21lbnQ7XG4gIHJldHVybiBmcmFnbWVudCA/ICcjJyArIGZyYWdtZW50IDogJyc7XG59O1xuXG52YXIgYWNjZXNzb3JEZXNjcmlwdG9yID0gZnVuY3Rpb24gKGdldHRlciwgc2V0dGVyKSB7XG4gIHJldHVybiB7IGdldDogZ2V0dGVyLCBzZXQ6IHNldHRlciwgY29uZmlndXJhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlIH07XG59O1xuXG5pZiAoREVTQ1JJUFRPUlMpIHtcbiAgZGVmaW5lUHJvcGVydGllcyhVUkxQcm90b3R5cGUsIHtcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5ocmVmYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1ocmVmXG4gICAgaHJlZjogYWNjZXNzb3JEZXNjcmlwdG9yKHNlcmlhbGl6ZVVSTCwgZnVuY3Rpb24gKGhyZWYpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgdmFyIHVybFN0cmluZyA9IFN0cmluZyhocmVmKTtcbiAgICAgIHZhciBmYWlsdXJlID0gcGFyc2VVUkwodXJsLCB1cmxTdHJpbmcpO1xuICAgICAgaWYgKGZhaWx1cmUpIHRocm93IFR5cGVFcnJvcihmYWlsdXJlKTtcbiAgICAgIGdldEludGVybmFsU2VhcmNoUGFyYW1zU3RhdGUodXJsLnNlYXJjaFBhcmFtcykudXBkYXRlU2VhcmNoUGFyYW1zKHVybC5xdWVyeSk7XG4gICAgfSksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUub3JpZ2luYCBnZXR0ZXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtb3JpZ2luXG4gICAgb3JpZ2luOiBhY2Nlc3NvckRlc2NyaXB0b3IoZ2V0T3JpZ2luKSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5wcm90b2NvbGAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcHJvdG9jb2xcbiAgICBwcm90b2NvbDogYWNjZXNzb3JEZXNjcmlwdG9yKGdldFByb3RvY29sLCBmdW5jdGlvbiAocHJvdG9jb2wpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgcGFyc2VVUkwodXJsLCBTdHJpbmcocHJvdG9jb2wpICsgJzonLCBTQ0hFTUVfU1RBUlQpO1xuICAgIH0pLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLnVzZXJuYW1lYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC11c2VybmFtZVxuICAgIHVzZXJuYW1lOiBhY2Nlc3NvckRlc2NyaXB0b3IoZ2V0VXNlcm5hbWUsIGZ1bmN0aW9uICh1c2VybmFtZSkge1xuICAgICAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gICAgICB2YXIgY29kZVBvaW50cyA9IGFycmF5RnJvbShTdHJpbmcodXNlcm5hbWUpKTtcbiAgICAgIGlmIChjYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQodXJsKSkgcmV0dXJuO1xuICAgICAgdXJsLnVzZXJuYW1lID0gJyc7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvZGVQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdXJsLnVzZXJuYW1lICs9IHBlcmNlbnRFbmNvZGUoY29kZVBvaW50c1tpXSwgdXNlcmluZm9QZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgIH1cbiAgICB9KSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5wYXNzd29yZGAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcGFzc3dvcmRcbiAgICBwYXNzd29yZDogYWNjZXNzb3JEZXNjcmlwdG9yKGdldFBhc3N3b3JkLCBmdW5jdGlvbiAocGFzc3dvcmQpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgdmFyIGNvZGVQb2ludHMgPSBhcnJheUZyb20oU3RyaW5nKHBhc3N3b3JkKSk7XG4gICAgICBpZiAoY2Fubm90SGF2ZVVzZXJuYW1lUGFzc3dvcmRQb3J0KHVybCkpIHJldHVybjtcbiAgICAgIHVybC5wYXNzd29yZCA9ICcnO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2RlUG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHVybC5wYXNzd29yZCArPSBwZXJjZW50RW5jb2RlKGNvZGVQb2ludHNbaV0sIHVzZXJpbmZvUGVyY2VudEVuY29kZVNldCk7XG4gICAgICB9XG4gICAgfSksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUuaG9zdGAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaG9zdFxuICAgIGhvc3Q6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRIb3N0LCBmdW5jdGlvbiAoaG9zdCkge1xuICAgICAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gICAgICBpZiAodXJsLmNhbm5vdEJlQUJhc2VVUkwpIHJldHVybjtcbiAgICAgIHBhcnNlVVJMKHVybCwgU3RyaW5nKGhvc3QpLCBIT1NUKTtcbiAgICB9KSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5ob3N0bmFtZWAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaG9zdG5hbWVcbiAgICBob3N0bmFtZTogYWNjZXNzb3JEZXNjcmlwdG9yKGdldEhvc3RuYW1lLCBmdW5jdGlvbiAoaG9zdG5hbWUpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgaWYgKHVybC5jYW5ub3RCZUFCYXNlVVJMKSByZXR1cm47XG4gICAgICBwYXJzZVVSTCh1cmwsIFN0cmluZyhob3N0bmFtZSksIEhPU1ROQU1FKTtcbiAgICB9KSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5wb3J0YCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wb3J0XG4gICAgcG9ydDogYWNjZXNzb3JEZXNjcmlwdG9yKGdldFBvcnQsIGZ1bmN0aW9uIChwb3J0KSB7XG4gICAgICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgICAgIGlmIChjYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQodXJsKSkgcmV0dXJuO1xuICAgICAgcG9ydCA9IFN0cmluZyhwb3J0KTtcbiAgICAgIGlmIChwb3J0ID09ICcnKSB1cmwucG9ydCA9IG51bGw7XG4gICAgICBlbHNlIHBhcnNlVVJMKHVybCwgcG9ydCwgUE9SVCk7XG4gICAgfSksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUucGF0aG5hbWVgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXBhdGhuYW1lXG4gICAgcGF0aG5hbWU6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRQYXRobmFtZSwgZnVuY3Rpb24gKHBhdGhuYW1lKSB7XG4gICAgICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgICAgIGlmICh1cmwuY2Fubm90QmVBQmFzZVVSTCkgcmV0dXJuO1xuICAgICAgdXJsLnBhdGggPSBbXTtcbiAgICAgIHBhcnNlVVJMKHVybCwgcGF0aG5hbWUgKyAnJywgUEFUSF9TVEFSVCk7XG4gICAgfSksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUuc2VhcmNoYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1zZWFyY2hcbiAgICBzZWFyY2g6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRTZWFyY2gsIGZ1bmN0aW9uIChzZWFyY2gpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgc2VhcmNoID0gU3RyaW5nKHNlYXJjaCk7XG4gICAgICBpZiAoc2VhcmNoID09ICcnKSB7XG4gICAgICAgIHVybC5xdWVyeSA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoJz8nID09IHNlYXJjaC5jaGFyQXQoMCkpIHNlYXJjaCA9IHNlYXJjaC5zbGljZSgxKTtcbiAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgIHBhcnNlVVJMKHVybCwgc2VhcmNoLCBRVUVSWSk7XG4gICAgICB9XG4gICAgICBnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlKHVybC5zZWFyY2hQYXJhbXMpLnVwZGF0ZVNlYXJjaFBhcmFtcyh1cmwucXVlcnkpO1xuICAgIH0pLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLnNlYXJjaFBhcmFtc2AgZ2V0dGVyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXNlYXJjaHBhcmFtc1xuICAgIHNlYXJjaFBhcmFtczogYWNjZXNzb3JEZXNjcmlwdG9yKGdldFNlYXJjaFBhcmFtcyksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUuaGFzaGAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaGFzaFxuICAgIGhhc2g6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRIYXNoLCBmdW5jdGlvbiAoaGFzaCkge1xuICAgICAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gICAgICBoYXNoID0gU3RyaW5nKGhhc2gpO1xuICAgICAgaWYgKGhhc2ggPT0gJycpIHtcbiAgICAgICAgdXJsLmZyYWdtZW50ID0gbnVsbDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCcjJyA9PSBoYXNoLmNoYXJBdCgwKSkgaGFzaCA9IGhhc2guc2xpY2UoMSk7XG4gICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgIHBhcnNlVVJMKHVybCwgaGFzaCwgRlJBR01FTlQpO1xuICAgIH0pXG4gIH0pO1xufVxuXG4vLyBgVVJMLnByb3RvdHlwZS50b0pTT05gIG1ldGhvZFxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXRvanNvblxucmVkZWZpbmUoVVJMUHJvdG90eXBlLCAndG9KU09OJywgZnVuY3Rpb24gdG9KU09OKCkge1xuICByZXR1cm4gc2VyaWFsaXplVVJMLmNhbGwodGhpcyk7XG59LCB7IGVudW1lcmFibGU6IHRydWUgfSk7XG5cbi8vIGBVUkwucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jVVJMLXN0cmluZ2lmaWNhdGlvbi1iZWhhdmlvclxucmVkZWZpbmUoVVJMUHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHNlcmlhbGl6ZVVSTC5jYWxsKHRoaXMpO1xufSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG5pZiAoTmF0aXZlVVJMKSB7XG4gIHZhciBuYXRpdmVDcmVhdGVPYmplY3RVUkwgPSBOYXRpdmVVUkwuY3JlYXRlT2JqZWN0VVJMO1xuICB2YXIgbmF0aXZlUmV2b2tlT2JqZWN0VVJMID0gTmF0aXZlVVJMLnJldm9rZU9iamVjdFVSTDtcbiAgLy8gYFVSTC5jcmVhdGVPYmplY3RVUkxgIG1ldGhvZFxuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVVJML2NyZWF0ZU9iamVjdFVSTFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgaWYgKG5hdGl2ZUNyZWF0ZU9iamVjdFVSTCkgcmVkZWZpbmUoVVJMQ29uc3RydWN0b3IsICdjcmVhdGVPYmplY3RVUkwnLCBmdW5jdGlvbiBjcmVhdGVPYmplY3RVUkwoYmxvYikge1xuICAgIHJldHVybiBuYXRpdmVDcmVhdGVPYmplY3RVUkwuYXBwbHkoTmF0aXZlVVJMLCBhcmd1bWVudHMpO1xuICB9KTtcbiAgLy8gYFVSTC5yZXZva2VPYmplY3RVUkxgIG1ldGhvZFxuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVVJML3Jldm9rZU9iamVjdFVSTFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgaWYgKG5hdGl2ZVJldm9rZU9iamVjdFVSTCkgcmVkZWZpbmUoVVJMQ29uc3RydWN0b3IsICdyZXZva2VPYmplY3RVUkwnLCBmdW5jdGlvbiByZXZva2VPYmplY3RVUkwodXJsKSB7XG4gICAgcmV0dXJuIG5hdGl2ZVJldm9rZU9iamVjdFVSTC5hcHBseShOYXRpdmVVUkwsIGFyZ3VtZW50cyk7XG4gIH0pO1xufVxuXG5zZXRUb1N0cmluZ1RhZyhVUkxDb25zdHJ1Y3RvciwgJ1VSTCcpO1xuXG4kKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6ICFVU0VfTkFUSVZFX1VSTCwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgVVJMOiBVUkxDb25zdHJ1Y3RvclxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2hhckF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jaGFyQXQ7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvcicpO1xuXG52YXIgU1RSSU5HX0lURVJBVE9SID0gJ1N0cmluZyBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTVFJJTkdfSVRFUkFUT1IpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLUBAaXRlcmF0b3JcbmRlZmluZUl0ZXJhdG9yKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBTVFJJTkdfSVRFUkFUT1IsXG4gICAgc3RyaW5nOiBTdHJpbmcoaXRlcmF0ZWQpLFxuICAgIGluZGV4OiAwXG4gIH0pO1xuLy8gYCVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0lc3RyaW5naXRlcmF0b3Jwcm90b3R5cGUlLm5leHRcbn0sIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIHZhciBzdHJpbmcgPSBzdGF0ZS5zdHJpbmc7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4O1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBzdHJpbmcubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gY2hhckF0KHN0cmluZywgaW5kZXgpO1xuICBzdGF0ZS5pbmRleCArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcblxudmFyIG5hdGl2ZUFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbi8vIGBPYmplY3QuYXNzaWduYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5hc3NpZ25cbm1vZHVsZS5leHBvcnRzID0gIW5hdGl2ZUFzc2lnbiB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIHNob3VsZCBoYXZlIGNvcnJlY3Qgb3JkZXIgb2Ygb3BlcmF0aW9ucyAoRWRnZSBidWcpXG4gIGlmIChERVNDUklQVE9SUyAmJiBuYXRpdmVBc3NpZ24oeyBiOiAxIH0sIG5hdGl2ZUFzc2lnbihkZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KHRoaXMsICdiJywge1xuICAgICAgICB2YWx1ZTogMyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfSksIHsgYjogMiB9KSkuYiAhPT0gMSkgcmV0dXJuIHRydWU7XG4gIC8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIHN5bWJvbCA9IFN5bWJvbCgpO1xuICB2YXIgYWxwaGFiZXQgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW3N5bWJvbF0gPSA3O1xuICBhbHBoYWJldC5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoY2hyKSB7IEJbY2hyXSA9IGNocjsgfSk7XG4gIHJldHVybiBuYXRpdmVBc3NpZ24oe30sIEEpW3N5bWJvbF0gIT0gNyB8fCBvYmplY3RLZXlzKG5hdGl2ZUFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IGFscGhhYmV0O1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmY7XG4gIHdoaWxlIChhcmd1bWVudHNMZW5ndGggPiBpbmRleCkge1xuICAgIHZhciBTID0gSW5kZXhlZE9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8gb2JqZWN0S2V5cyhTKS5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKFMpKSA6IG9iamVjdEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSB7XG4gICAgICBrZXkgPSBrZXlzW2orK107XG4gICAgICBpZiAoIURFU0NSSVBUT1JTIHx8IHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoUywga2V5KSkgVFtrZXldID0gU1trZXldO1xuICAgIH1cbiAgfSByZXR1cm4gVDtcbn0gOiBuYXRpdmVBc3NpZ247XG4iLCIndXNlIHN0cmljdCc7XG4vLyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vYmVzdGllanMvcHVueWNvZGUuanMvYmxvYi9tYXN0ZXIvcHVueWNvZGUuanNcbnZhciBtYXhJbnQgPSAyMTQ3NDgzNjQ3OyAvLyBha2EuIDB4N0ZGRkZGRkYgb3IgMl4zMS0xXG52YXIgYmFzZSA9IDM2O1xudmFyIHRNaW4gPSAxO1xudmFyIHRNYXggPSAyNjtcbnZhciBza2V3ID0gMzg7XG52YXIgZGFtcCA9IDcwMDtcbnZhciBpbml0aWFsQmlhcyA9IDcyO1xudmFyIGluaXRpYWxOID0gMTI4OyAvLyAweDgwXG52YXIgZGVsaW1pdGVyID0gJy0nOyAvLyAnXFx4MkQnXG52YXIgcmVnZXhOb25BU0NJSSA9IC9bXlxcMC1cXHUwMDdFXS87IC8vIG5vbi1BU0NJSSBjaGFyc1xudmFyIHJlZ2V4U2VwYXJhdG9ycyA9IC9bLlxcdTMwMDJcXHVGRjBFXFx1RkY2MV0vZzsgLy8gUkZDIDM0OTAgc2VwYXJhdG9yc1xudmFyIE9WRVJGTE9XX0VSUk9SID0gJ092ZXJmbG93OiBpbnB1dCBuZWVkcyB3aWRlciBpbnRlZ2VycyB0byBwcm9jZXNzJztcbnZhciBiYXNlTWludXNUTWluID0gYmFzZSAtIHRNaW47XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIHN0cmluZ0Zyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBudW1lcmljIGNvZGUgcG9pbnRzIG9mIGVhY2ggVW5pY29kZVxuICogY2hhcmFjdGVyIGluIHRoZSBzdHJpbmcuIFdoaWxlIEphdmFTY3JpcHQgdXNlcyBVQ1MtMiBpbnRlcm5hbGx5LFxuICogdGhpcyBmdW5jdGlvbiB3aWxsIGNvbnZlcnQgYSBwYWlyIG9mIHN1cnJvZ2F0ZSBoYWx2ZXMgKGVhY2ggb2Ygd2hpY2hcbiAqIFVDUy0yIGV4cG9zZXMgYXMgc2VwYXJhdGUgY2hhcmFjdGVycykgaW50byBhIHNpbmdsZSBjb2RlIHBvaW50LFxuICogbWF0Y2hpbmcgVVRGLTE2LlxuICovXG52YXIgdWNzMmRlY29kZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICB2YXIgY291bnRlciA9IDA7XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICB3aGlsZSAoY291bnRlciA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG4gICAgaWYgKHZhbHVlID49IDB4RDgwMCAmJiB2YWx1ZSA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkge1xuICAgICAgLy8gSXQncyBhIGhpZ2ggc3Vycm9nYXRlLCBhbmQgdGhlcmUgaXMgYSBuZXh0IGNoYXJhY3Rlci5cbiAgICAgIHZhciBleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG4gICAgICBpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHsgLy8gTG93IHN1cnJvZ2F0ZS5cbiAgICAgICAgb3V0cHV0LnB1c2goKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEl0J3MgYW4gdW5tYXRjaGVkIHN1cnJvZ2F0ZTsgb25seSBhcHBlbmQgdGhpcyBjb2RlIHVuaXQsIGluIGNhc2UgdGhlXG4gICAgICAgIC8vIG5leHQgY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyLlxuICAgICAgICBvdXRwdXQucHVzaCh2YWx1ZSk7XG4gICAgICAgIGNvdW50ZXItLTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LnB1c2godmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGRpZ2l0L2ludGVnZXIgaW50byBhIGJhc2ljIGNvZGUgcG9pbnQuXG4gKi9cbnZhciBkaWdpdFRvQmFzaWMgPSBmdW5jdGlvbiAoZGlnaXQpIHtcbiAgLy8gIDAuLjI1IG1hcCB0byBBU0NJSSBhLi56IG9yIEEuLlpcbiAgLy8gMjYuLjM1IG1hcCB0byBBU0NJSSAwLi45XG4gIHJldHVybiBkaWdpdCArIDIyICsgNzUgKiAoZGlnaXQgPCAyNik7XG59O1xuXG4vKipcbiAqIEJpYXMgYWRhcHRhdGlvbiBmdW5jdGlvbiBhcyBwZXIgc2VjdGlvbiAzLjQgb2YgUkZDIDM0OTIuXG4gKiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzQ5MiNzZWN0aW9uLTMuNFxuICovXG52YXIgYWRhcHQgPSBmdW5jdGlvbiAoZGVsdGEsIG51bVBvaW50cywgZmlyc3RUaW1lKSB7XG4gIHZhciBrID0gMDtcbiAgZGVsdGEgPSBmaXJzdFRpbWUgPyBmbG9vcihkZWx0YSAvIGRhbXApIDogZGVsdGEgPj4gMTtcbiAgZGVsdGEgKz0gZmxvb3IoZGVsdGEgLyBudW1Qb2ludHMpO1xuICBmb3IgKDsgZGVsdGEgPiBiYXNlTWludXNUTWluICogdE1heCA+PiAxOyBrICs9IGJhc2UpIHtcbiAgICBkZWx0YSA9IGZsb29yKGRlbHRhIC8gYmFzZU1pbnVzVE1pbik7XG4gIH1cbiAgcmV0dXJuIGZsb29yKGsgKyAoYmFzZU1pbnVzVE1pbiArIDEpICogZGVsdGEgLyAoZGVsdGEgKyBza2V3KSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scyAoZS5nLiBhIGRvbWFpbiBuYW1lIGxhYmVsKSB0byBhXG4gKiBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgIG1heC1zdGF0ZW1lbnRzXG52YXIgZW5jb2RlID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcblxuICAvLyBDb252ZXJ0IHRoZSBpbnB1dCBpbiBVQ1MtMiB0byBhbiBhcnJheSBvZiBVbmljb2RlIGNvZGUgcG9pbnRzLlxuICBpbnB1dCA9IHVjczJkZWNvZGUoaW5wdXQpO1xuXG4gIC8vIENhY2hlIHRoZSBsZW5ndGguXG4gIHZhciBpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aDtcblxuICAvLyBJbml0aWFsaXplIHRoZSBzdGF0ZS5cbiAgdmFyIG4gPSBpbml0aWFsTjtcbiAgdmFyIGRlbHRhID0gMDtcbiAgdmFyIGJpYXMgPSBpbml0aWFsQmlhcztcbiAgdmFyIGksIGN1cnJlbnRWYWx1ZTtcblxuICAvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzLlxuICBmb3IgKGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICBjdXJyZW50VmFsdWUgPSBpbnB1dFtpXTtcbiAgICBpZiAoY3VycmVudFZhbHVlIDwgMHg4MCkge1xuICAgICAgb3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGN1cnJlbnRWYWx1ZSkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiYXNpY0xlbmd0aCA9IG91dHB1dC5sZW5ndGg7IC8vIG51bWJlciBvZiBiYXNpYyBjb2RlIHBvaW50cy5cbiAgdmFyIGhhbmRsZWRDUENvdW50ID0gYmFzaWNMZW5ndGg7IC8vIG51bWJlciBvZiBjb2RlIHBvaW50cyB0aGF0IGhhdmUgYmVlbiBoYW5kbGVkO1xuXG4gIC8vIEZpbmlzaCB0aGUgYmFzaWMgc3RyaW5nIHdpdGggYSBkZWxpbWl0ZXIgdW5sZXNzIGl0J3MgZW1wdHkuXG4gIGlmIChiYXNpY0xlbmd0aCkge1xuICAgIG91dHB1dC5wdXNoKGRlbGltaXRlcik7XG4gIH1cblxuICAvLyBNYWluIGVuY29kaW5nIGxvb3A6XG4gIHdoaWxlIChoYW5kbGVkQ1BDb3VudCA8IGlucHV0TGVuZ3RoKSB7XG4gICAgLy8gQWxsIG5vbi1iYXNpYyBjb2RlIHBvaW50cyA8IG4gaGF2ZSBiZWVuIGhhbmRsZWQgYWxyZWFkeS4gRmluZCB0aGUgbmV4dCBsYXJnZXIgb25lOlxuICAgIHZhciBtID0gbWF4SW50O1xuICAgIGZvciAoaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgY3VycmVudFZhbHVlID0gaW5wdXRbaV07XG4gICAgICBpZiAoY3VycmVudFZhbHVlID49IG4gJiYgY3VycmVudFZhbHVlIDwgbSkge1xuICAgICAgICBtID0gY3VycmVudFZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEluY3JlYXNlIGBkZWx0YWAgZW5vdWdoIHRvIGFkdmFuY2UgdGhlIGRlY29kZXIncyA8bixpPiBzdGF0ZSB0byA8bSwwPiwgYnV0IGd1YXJkIGFnYWluc3Qgb3ZlcmZsb3cuXG4gICAgdmFyIGhhbmRsZWRDUENvdW50UGx1c09uZSA9IGhhbmRsZWRDUENvdW50ICsgMTtcbiAgICBpZiAobSAtIG4gPiBmbG9vcigobWF4SW50IC0gZGVsdGEpIC8gaGFuZGxlZENQQ291bnRQbHVzT25lKSkge1xuICAgICAgdGhyb3cgUmFuZ2VFcnJvcihPVkVSRkxPV19FUlJPUik7XG4gICAgfVxuXG4gICAgZGVsdGEgKz0gKG0gLSBuKSAqIGhhbmRsZWRDUENvdW50UGx1c09uZTtcbiAgICBuID0gbTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgY3VycmVudFZhbHVlID0gaW5wdXRbaV07XG4gICAgICBpZiAoY3VycmVudFZhbHVlIDwgbiAmJiArK2RlbHRhID4gbWF4SW50KSB7XG4gICAgICAgIHRocm93IFJhbmdlRXJyb3IoT1ZFUkZMT1dfRVJST1IpO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA9PSBuKSB7XG4gICAgICAgIC8vIFJlcHJlc2VudCBkZWx0YSBhcyBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyLlxuICAgICAgICB2YXIgcSA9IGRlbHRhO1xuICAgICAgICBmb3IgKHZhciBrID0gYmFzZTsgLyogbm8gY29uZGl0aW9uICovOyBrICs9IGJhc2UpIHtcbiAgICAgICAgICB2YXIgdCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7XG4gICAgICAgICAgaWYgKHEgPCB0KSBicmVhaztcbiAgICAgICAgICB2YXIgcU1pbnVzVCA9IHEgLSB0O1xuICAgICAgICAgIHZhciBiYXNlTWludXNUID0gYmFzZSAtIHQ7XG4gICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyh0ICsgcU1pbnVzVCAlIGJhc2VNaW51c1QpKSk7XG4gICAgICAgICAgcSA9IGZsb29yKHFNaW51c1QgLyBiYXNlTWludXNUKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWMocSkpKTtcbiAgICAgICAgYmlhcyA9IGFkYXB0KGRlbHRhLCBoYW5kbGVkQ1BDb3VudFBsdXNPbmUsIGhhbmRsZWRDUENvdW50ID09IGJhc2ljTGVuZ3RoKTtcbiAgICAgICAgZGVsdGEgPSAwO1xuICAgICAgICArK2hhbmRsZWRDUENvdW50O1xuICAgICAgfVxuICAgIH1cblxuICAgICsrZGVsdGE7XG4gICAgKytuO1xuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICB2YXIgZW5jb2RlZCA9IFtdO1xuICB2YXIgbGFiZWxzID0gaW5wdXQudG9Mb3dlckNhc2UoKS5yZXBsYWNlKHJlZ2V4U2VwYXJhdG9ycywgJ1xcdTAwMkUnKS5zcGxpdCgnLicpO1xuICB2YXIgaSwgbGFiZWw7XG4gIGZvciAoaSA9IDA7IGkgPCBsYWJlbHMubGVuZ3RoOyBpKyspIHtcbiAgICBsYWJlbCA9IGxhYmVsc1tpXTtcbiAgICBlbmNvZGVkLnB1c2gocmVnZXhOb25BU0NJSS50ZXN0KGxhYmVsKSA/ICd4bi0tJyArIGVuY29kZShsYWJlbCkgOiBsYWJlbCk7XG4gIH1cbiAgcmV0dXJuIGVuY29kZWQuam9pbignLicpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IGluIGNvcmUtanNANCwgbW92ZSAvbW9kdWxlcy8gZGVwZW5kZW5jaWVzIHRvIHB1YmxpYyBlbnRyaWVzIGZvciBiZXR0ZXIgb3B0aW1pemF0aW9uIGJ5IHRvb2xzIGxpa2UgYHByZXNldC1lbnZgXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIFVTRV9OQVRJVkVfVVJMID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS11cmwnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lLWFsbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3InKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZ2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yJyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgJGZldGNoID0gZ2V0QnVpbHRJbignZmV0Y2gnKTtcbnZhciBIZWFkZXJzID0gZ2V0QnVpbHRJbignSGVhZGVycycpO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFVSTF9TRUFSQ0hfUEFSQU1TID0gJ1VSTFNlYXJjaFBhcmFtcyc7XG52YXIgVVJMX1NFQVJDSF9QQVJBTVNfSVRFUkFUT1IgPSBVUkxfU0VBUkNIX1BBUkFNUyArICdJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsUGFyYW1zU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihVUkxfU0VBUkNIX1BBUkFNUyk7XG52YXIgZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoVVJMX1NFQVJDSF9QQVJBTVNfSVRFUkFUT1IpO1xuXG52YXIgcGx1cyA9IC9cXCsvZztcbnZhciBzZXF1ZW5jZXMgPSBBcnJheSg0KTtcblxudmFyIHBlcmNlbnRTZXF1ZW5jZSA9IGZ1bmN0aW9uIChieXRlcykge1xuICByZXR1cm4gc2VxdWVuY2VzW2J5dGVzIC0gMV0gfHwgKHNlcXVlbmNlc1tieXRlcyAtIDFdID0gUmVnRXhwKCcoKD86JVtcXFxcZGEtZl17Mn0peycgKyBieXRlcyArICd9KScsICdnaScpKTtcbn07XG5cbnZhciBwZXJjZW50RGVjb2RlID0gZnVuY3Rpb24gKHNlcXVlbmNlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzZXF1ZW5jZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHNlcXVlbmNlO1xuICB9XG59O1xuXG52YXIgZGVzZXJpYWxpemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IGl0LnJlcGxhY2UocGx1cywgJyAnKTtcbiAgdmFyIGJ5dGVzID0gNDtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHJlc3VsdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgd2hpbGUgKGJ5dGVzKSB7XG4gICAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZShwZXJjZW50U2VxdWVuY2UoYnl0ZXMtLSksIHBlcmNlbnREZWNvZGUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuXG52YXIgZmluZCA9IC9bIScoKX5dfCUyMC9nO1xuXG52YXIgcmVwbGFjZSA9IHtcbiAgJyEnOiAnJTIxJyxcbiAgXCInXCI6ICclMjcnLFxuICAnKCc6ICclMjgnLFxuICAnKSc6ICclMjknLFxuICAnfic6ICclN0UnLFxuICAnJTIwJzogJysnXG59O1xuXG52YXIgcmVwbGFjZXIgPSBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgcmV0dXJuIHJlcGxhY2VbbWF0Y2hdO1xufTtcblxudmFyIHNlcmlhbGl6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KGl0KS5yZXBsYWNlKGZpbmQsIHJlcGxhY2VyKTtcbn07XG5cbnZhciBwYXJzZVNlYXJjaFBhcmFtcyA9IGZ1bmN0aW9uIChyZXN1bHQsIHF1ZXJ5KSB7XG4gIGlmIChxdWVyeSkge1xuICAgIHZhciBhdHRyaWJ1dGVzID0gcXVlcnkuc3BsaXQoJyYnKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBhdHRyaWJ1dGUsIGVudHJ5O1xuICAgIHdoaWxlIChpbmRleCA8IGF0dHJpYnV0ZXMubGVuZ3RoKSB7XG4gICAgICBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW2luZGV4KytdO1xuICAgICAgaWYgKGF0dHJpYnV0ZS5sZW5ndGgpIHtcbiAgICAgICAgZW50cnkgPSBhdHRyaWJ1dGUuc3BsaXQoJz0nKTtcbiAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgIGtleTogZGVzZXJpYWxpemUoZW50cnkuc2hpZnQoKSksXG4gICAgICAgICAgdmFsdWU6IGRlc2VyaWFsaXplKGVudHJ5LmpvaW4oJz0nKSlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG52YXIgdXBkYXRlU2VhcmNoUGFyYW1zID0gZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gIHRoaXMuZW50cmllcy5sZW5ndGggPSAwO1xuICBwYXJzZVNlYXJjaFBhcmFtcyh0aGlzLmVudHJpZXMsIHF1ZXJ5KTtcbn07XG5cbnZhciB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aCA9IGZ1bmN0aW9uIChwYXNzZWQsIHJlcXVpcmVkKSB7XG4gIGlmIChwYXNzZWQgPCByZXF1aXJlZCkgdGhyb3cgVHlwZUVycm9yKCdOb3QgZW5vdWdoIGFyZ3VtZW50cycpO1xufTtcblxudmFyIFVSTFNlYXJjaFBhcmFtc0l0ZXJhdG9yID0gY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihmdW5jdGlvbiBJdGVyYXRvcihwYXJhbXMsIGtpbmQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogVVJMX1NFQVJDSF9QQVJBTVNfSVRFUkFUT1IsXG4gICAgaXRlcmF0b3I6IGdldEl0ZXJhdG9yKGdldEludGVybmFsUGFyYW1zU3RhdGUocGFyYW1zKS5lbnRyaWVzKSxcbiAgICBraW5kOiBraW5kXG4gIH0pO1xufSwgJ0l0ZXJhdG9yJywgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlKHRoaXMpO1xuICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7XG4gIHZhciBzdGVwID0gc3RhdGUuaXRlcmF0b3IubmV4dCgpO1xuICB2YXIgZW50cnkgPSBzdGVwLnZhbHVlO1xuICBpZiAoIXN0ZXAuZG9uZSkge1xuICAgIHN0ZXAudmFsdWUgPSBraW5kID09PSAna2V5cycgPyBlbnRyeS5rZXkgOiBraW5kID09PSAndmFsdWVzJyA/IGVudHJ5LnZhbHVlIDogW2VudHJ5LmtleSwgZW50cnkudmFsdWVdO1xuICB9IHJldHVybiBzdGVwO1xufSk7XG5cbi8vIGBVUkxTZWFyY2hQYXJhbXNgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2ludGVyZmFjZS11cmxzZWFyY2hwYXJhbXNcbnZhciBVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIFVSTFNlYXJjaFBhcmFtcygvKiBpbml0ICovKSB7XG4gIGFuSW5zdGFuY2UodGhpcywgVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IsIFVSTF9TRUFSQ0hfUEFSQU1TKTtcbiAgdmFyIGluaXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZDtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB2YXIgZW50cmllcyA9IFtdO1xuICB2YXIgaXRlcmF0b3JNZXRob2QsIGl0ZXJhdG9yLCBuZXh0LCBzdGVwLCBlbnRyeUl0ZXJhdG9yLCBlbnRyeU5leHQsIGZpcnN0LCBzZWNvbmQsIGtleTtcblxuICBzZXRJbnRlcm5hbFN0YXRlKHRoYXQsIHtcbiAgICB0eXBlOiBVUkxfU0VBUkNIX1BBUkFNUyxcbiAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgIHVwZGF0ZVVSTDogZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LFxuICAgIHVwZGF0ZVNlYXJjaFBhcmFtczogdXBkYXRlU2VhcmNoUGFyYW1zXG4gIH0pO1xuXG4gIGlmIChpbml0ICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoaXNPYmplY3QoaW5pdCkpIHtcbiAgICAgIGl0ZXJhdG9yTWV0aG9kID0gZ2V0SXRlcmF0b3JNZXRob2QoaW5pdCk7XG4gICAgICBpZiAodHlwZW9mIGl0ZXJhdG9yTWV0aG9kID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGl0ZXJhdG9yID0gaXRlcmF0b3JNZXRob2QuY2FsbChpbml0KTtcbiAgICAgICAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gICAgICAgIHdoaWxlICghKHN0ZXAgPSBuZXh0LmNhbGwoaXRlcmF0b3IpKS5kb25lKSB7XG4gICAgICAgICAgZW50cnlJdGVyYXRvciA9IGdldEl0ZXJhdG9yKGFuT2JqZWN0KHN0ZXAudmFsdWUpKTtcbiAgICAgICAgICBlbnRyeU5leHQgPSBlbnRyeUl0ZXJhdG9yLm5leHQ7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgKGZpcnN0ID0gZW50cnlOZXh0LmNhbGwoZW50cnlJdGVyYXRvcikpLmRvbmUgfHxcbiAgICAgICAgICAgIChzZWNvbmQgPSBlbnRyeU5leHQuY2FsbChlbnRyeUl0ZXJhdG9yKSkuZG9uZSB8fFxuICAgICAgICAgICAgIWVudHJ5TmV4dC5jYWxsKGVudHJ5SXRlcmF0b3IpLmRvbmVcbiAgICAgICAgICApIHRocm93IFR5cGVFcnJvcignRXhwZWN0ZWQgc2VxdWVuY2Ugd2l0aCBsZW5ndGggMicpO1xuICAgICAgICAgIGVudHJpZXMucHVzaCh7IGtleTogZmlyc3QudmFsdWUgKyAnJywgdmFsdWU6IHNlY29uZC52YWx1ZSArICcnIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgZm9yIChrZXkgaW4gaW5pdCkgaWYgKGhhc093bihpbml0LCBrZXkpKSBlbnRyaWVzLnB1c2goeyBrZXk6IGtleSwgdmFsdWU6IGluaXRba2V5XSArICcnIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJzZVNlYXJjaFBhcmFtcyhlbnRyaWVzLCB0eXBlb2YgaW5pdCA9PT0gJ3N0cmluZycgPyBpbml0LmNoYXJBdCgwKSA9PT0gJz8nID8gaW5pdC5zbGljZSgxKSA6IGluaXQgOiBpbml0ICsgJycpO1xuICAgIH1cbiAgfVxufTtcblxudmFyIFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSA9IFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxucmVkZWZpbmVBbGwoVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlLCB7XG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmFwcGVudGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1hcHBlbmRcbiAgYXBwZW5kOiBmdW5jdGlvbiBhcHBlbmQobmFtZSwgdmFsdWUpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAyKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpO1xuICAgIHN0YXRlLmVudHJpZXMucHVzaCh7IGtleTogbmFtZSArICcnLCB2YWx1ZTogdmFsdWUgKyAnJyB9KTtcbiAgICBzdGF0ZS51cGRhdGVVUkwoKTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuZGVsZXRlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLWRlbGV0ZVxuICAnZGVsZXRlJzogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpO1xuICAgIHZhciBlbnRyaWVzID0gc3RhdGUuZW50cmllcztcbiAgICB2YXIga2V5ID0gbmFtZSArICcnO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGluZGV4IDwgZW50cmllcy5sZW5ndGgpIHtcbiAgICAgIGlmIChlbnRyaWVzW2luZGV4XS5rZXkgPT09IGtleSkgZW50cmllcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgZWxzZSBpbmRleCsrO1xuICAgIH1cbiAgICBzdGF0ZS51cGRhdGVVUkwoKTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuZ2V0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLWdldFxuICBnZXQ6IGZ1bmN0aW9uIGdldChuYW1lKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7XG4gICAgdmFyIGtleSA9IG5hbWUgKyAnJztcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGZvciAoOyBpbmRleCA8IGVudHJpZXMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBpZiAoZW50cmllc1tpbmRleF0ua2V5ID09PSBrZXkpIHJldHVybiBlbnRyaWVzW2luZGV4XS52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmdldEFsbGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1nZXRhbGxcbiAgZ2V0QWxsOiBmdW5jdGlvbiBnZXRBbGwobmFtZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBlbnRyaWVzID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKS5lbnRyaWVzO1xuICAgIHZhciBrZXkgPSBuYW1lICsgJyc7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgZm9yICg7IGluZGV4IDwgZW50cmllcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGlmIChlbnRyaWVzW2luZGV4XS5rZXkgPT09IGtleSkgcmVzdWx0LnB1c2goZW50cmllc1tpbmRleF0udmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5oYXNgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtaGFzXG4gIGhhczogZnVuY3Rpb24gaGFzKG5hbWUpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTtcbiAgICB2YXIgZW50cmllcyA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllcztcbiAgICB2YXIga2V5ID0gbmFtZSArICcnO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGluZGV4IDwgZW50cmllcy5sZW5ndGgpIHtcbiAgICAgIGlmIChlbnRyaWVzW2luZGV4KytdLmtleSA9PT0ga2V5KSByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5zZXRgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtc2V0XG4gIHNldDogZnVuY3Rpb24gc2V0KG5hbWUsIHZhbHVlKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTtcbiAgICB2YXIgZW50cmllcyA9IHN0YXRlLmVudHJpZXM7XG4gICAgdmFyIGZvdW5kID0gZmFsc2U7XG4gICAgdmFyIGtleSA9IG5hbWUgKyAnJztcbiAgICB2YXIgdmFsID0gdmFsdWUgKyAnJztcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBlbnRyeTtcbiAgICBmb3IgKDsgaW5kZXggPCBlbnRyaWVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgIGlmIChlbnRyeS5rZXkgPT09IGtleSkge1xuICAgICAgICBpZiAoZm91bmQpIGVudHJpZXMuc3BsaWNlKGluZGV4LS0sIDEpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgZW50cnkudmFsdWUgPSB2YWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFmb3VuZCkgZW50cmllcy5wdXNoKHsga2V5OiBrZXksIHZhbHVlOiB2YWwgfSk7XG4gICAgc3RhdGUudXBkYXRlVVJMKCk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLnNvcnRgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtc29ydFxuICBzb3J0OiBmdW5jdGlvbiBzb3J0KCkge1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcyk7XG4gICAgdmFyIGVudHJpZXMgPSBzdGF0ZS5lbnRyaWVzO1xuICAgIC8vIEFycmF5I3NvcnQgaXMgbm90IHN0YWJsZSBpbiBzb21lIGVuZ2luZXNcbiAgICB2YXIgc2xpY2UgPSBlbnRyaWVzLnNsaWNlKCk7XG4gICAgdmFyIGVudHJ5LCBlbnRyaWVzSW5kZXgsIHNsaWNlSW5kZXg7XG4gICAgZW50cmllcy5sZW5ndGggPSAwO1xuICAgIGZvciAoc2xpY2VJbmRleCA9IDA7IHNsaWNlSW5kZXggPCBzbGljZS5sZW5ndGg7IHNsaWNlSW5kZXgrKykge1xuICAgICAgZW50cnkgPSBzbGljZVtzbGljZUluZGV4XTtcbiAgICAgIGZvciAoZW50cmllc0luZGV4ID0gMDsgZW50cmllc0luZGV4IDwgc2xpY2VJbmRleDsgZW50cmllc0luZGV4KyspIHtcbiAgICAgICAgaWYgKGVudHJpZXNbZW50cmllc0luZGV4XS5rZXkgPiBlbnRyeS5rZXkpIHtcbiAgICAgICAgICBlbnRyaWVzLnNwbGljZShlbnRyaWVzSW5kZXgsIDAsIGVudHJ5KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGVudHJpZXNJbmRleCA9PT0gc2xpY2VJbmRleCkgZW50cmllcy5wdXNoKGVudHJ5KTtcbiAgICB9XG4gICAgc3RhdGUudXBkYXRlVVJMKCk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBlbnRyaWVzID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKS5lbnRyaWVzO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFjaywgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGVudHJ5O1xuICAgIHdoaWxlIChpbmRleCA8IGVudHJpZXMubGVuZ3RoKSB7XG4gICAgICBlbnRyeSA9IGVudHJpZXNbaW5kZXgrK107XG4gICAgICBib3VuZEZ1bmN0aW9uKGVudHJ5LnZhbHVlLCBlbnRyeS5rZXksIHRoaXMpO1xuICAgIH1cbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUua2V5c2AgbWV0aG9kXG4gIGtleXM6IGZ1bmN0aW9uIGtleXMoKSB7XG4gICAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXNJdGVyYXRvcih0aGlzLCAna2V5cycpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS52YWx1ZXNgIG1ldGhvZFxuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtc0l0ZXJhdG9yKHRoaXMsICd2YWx1ZXMnKTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuZW50cmllc2AgbWV0aG9kXG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXNJdGVyYXRvcih0aGlzLCAnZW50cmllcycpO1xuICB9XG59LCB7IGVudW1lcmFibGU6IHRydWUgfSk7XG5cbi8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlW0BAaXRlcmF0b3JdYCBtZXRob2RcbnJlZGVmaW5lKFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSwgSVRFUkFUT1IsIFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZS5lbnRyaWVzKTtcblxuLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmxzZWFyY2hwYXJhbXMtc3RyaW5naWZpY2F0aW9uLWJlaGF2aW9yXG5yZWRlZmluZShVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICB2YXIgZW50cmllcyA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllcztcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgZW50cnk7XG4gIHdoaWxlIChpbmRleCA8IGVudHJpZXMubGVuZ3RoKSB7XG4gICAgZW50cnkgPSBlbnRyaWVzW2luZGV4KytdO1xuICAgIHJlc3VsdC5wdXNoKHNlcmlhbGl6ZShlbnRyeS5rZXkpICsgJz0nICsgc2VyaWFsaXplKGVudHJ5LnZhbHVlKSk7XG4gIH0gcmV0dXJuIHJlc3VsdC5qb2luKCcmJyk7XG59LCB7IGVudW1lcmFibGU6IHRydWUgfSk7XG5cbnNldFRvU3RyaW5nVGFnKFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yLCBVUkxfU0VBUkNIX1BBUkFNUyk7XG5cbiQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogIVVTRV9OQVRJVkVfVVJMIH0sIHtcbiAgVVJMU2VhcmNoUGFyYW1zOiBVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvclxufSk7XG5cbi8vIFdyYXAgYGZldGNoYCBmb3IgY29ycmVjdCB3b3JrIHdpdGggcG9seWZpbGxlZCBgVVJMU2VhcmNoUGFyYW1zYFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3NFxuaWYgKCFVU0VfTkFUSVZFX1VSTCAmJiB0eXBlb2YgJGZldGNoID09ICdmdW5jdGlvbicgJiYgdHlwZW9mIEhlYWRlcnMgPT0gJ2Z1bmN0aW9uJykge1xuICAkKHsgZ2xvYmFsOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgIGZldGNoOiBmdW5jdGlvbiBmZXRjaChpbnB1dCAvKiAsIGluaXQgKi8pIHtcbiAgICAgIHZhciBhcmdzID0gW2lucHV0XTtcbiAgICAgIHZhciBpbml0LCBib2R5LCBoZWFkZXJzO1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGluaXQgPSBhcmd1bWVudHNbMV07XG4gICAgICAgIGlmIChpc09iamVjdChpbml0KSkge1xuICAgICAgICAgIGJvZHkgPSBpbml0LmJvZHk7XG4gICAgICAgICAgaWYgKGNsYXNzb2YoYm9keSkgPT09IFVSTF9TRUFSQ0hfUEFSQU1TKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaW5pdC5oZWFkZXJzID8gbmV3IEhlYWRlcnMoaW5pdC5oZWFkZXJzKSA6IG5ldyBIZWFkZXJzKCk7XG4gICAgICAgICAgICBpZiAoIWhlYWRlcnMuaGFzKCdjb250ZW50LXR5cGUnKSkge1xuICAgICAgICAgICAgICBoZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PVVURi04Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbml0ID0gY3JlYXRlKGluaXQsIHtcbiAgICAgICAgICAgICAgYm9keTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIFN0cmluZyhib2R5KSksXG4gICAgICAgICAgICAgIGhlYWRlcnM6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCBoZWFkZXJzKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFyZ3MucHVzaChpbml0KTtcbiAgICAgIH0gcmV0dXJuICRmZXRjaC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgVVJMU2VhcmNoUGFyYW1zOiBVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvcixcbiAgZ2V0U3RhdGU6IGdldEludGVybmFsUGFyYW1zU3RhdGVcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXRlcmF0b3JNZXRob2QgPSBnZXRJdGVyYXRvck1ldGhvZChpdCk7XG4gIGlmICh0eXBlb2YgaXRlcmF0b3JNZXRob2QgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IFR5cGVFcnJvcihTdHJpbmcoaXQpICsgJyBpcyBub3QgaXRlcmFibGUnKTtcbiAgfSByZXR1cm4gYW5PYmplY3QoaXRlcmF0b3JNZXRob2QuY2FsbChpdCkpO1xufTtcbiIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJyZWxhdGl2ZSBiZy13aGl0ZSBleHRlbnNpb25cIiB9LCBbXG4gICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJweC00IHB0LTRcIiB9LCBbXG4gICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktYmV0d2VlbiBtYi04XCIgfSwgW1xuICAgICAgICBfYyhcbiAgICAgICAgICBcImFcIixcbiAgICAgICAgICB7IGF0dHJzOiB7IGhyZWY6IFwiaHR0cDovL3Z1ZXRlbGVzY29wZS5jb20vXCIsIHRhcmdldDogXCJfYmxhbmtcIiB9IH0sXG4gICAgICAgICAgW19jKFwiTG9nb0ljb25cIiwgeyBzdGF0aWNDbGFzczogXCJoLThcIiB9KV0sXG4gICAgICAgICAgMVxuICAgICAgICApLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiZmxleCBpdGVtcy1jZW50ZXJcIiB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF92bS5pc1Jvb3RVcmwgJiZcbiAgICAgICAgICAgIF92bS5zaG93Y2FzZSAmJlxuICAgICAgICAgICAgX3ZtLnNob3djYXNlLmhhc1Z1ZSAmJlxuICAgICAgICAgICAgX3ZtLnNob3djYXNlLmlzUHVibGljXG4gICAgICAgICAgICAgID8gX2MoXG4gICAgICAgICAgICAgICAgICBcImFcIixcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwibXItM1wiLFxuICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgIGhyZWY6XG4gICAgICAgICAgICAgICAgICAgICAgICBcImh0dHBzOi8vdnVldGVsZXNjb3BlLmNvbS9leHBsb3JlL1wiICsgX3ZtLnNob3djYXNlLnNsdWcsXG4gICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBcIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICAgIFwiQXBwQnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogXCJzbWFsbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlYXJhbmNlOiBcInByaW1hcnlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0bGluZWQ6IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJcXG4gICAgICAgICAgICBPcGVuXFxuICAgICAgICAgIFwiKV1cbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIDogX3ZtLmlzUm9vdFVybCAmJlxuICAgICAgICAgICAgICAgIF92bS5zaG93Y2FzZSAmJlxuICAgICAgICAgICAgICAgIF92bS5zaG93Y2FzZS5oYXNWdWUgJiZcbiAgICAgICAgICAgICAgICAhX3ZtLnNob3djYXNlLmlzUHVibGljICYmXG4gICAgICAgICAgICAgICAgIV92bS5zYXZpbmdFcnJvclxuICAgICAgICAgICAgICA/IF9jKFxuICAgICAgICAgICAgICAgICAgXCJBcHBCdXR0b25cIixcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwibXItM1wiLFxuICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBzaXplOiBcInNtYWxsXCIsIGFwcGVhcmFuY2U6IFwicHJpbWFyeVwiIH0sXG4gICAgICAgICAgICAgICAgICAgIG5hdGl2ZU9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5zYXZlU2hvd2Nhc2UoJGV2ZW50KVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICAgICAgIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhfdm0uc2F2aW5nID8gXCJTYXZpbmcuLi5cIiA6IFwiU2F2ZVwiKSArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlxcbiAgICAgICAgXCJcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgOiBfdm0uX2UoKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgXCJhXCIsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJtci0zXCIsXG4gICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgIGhyZWY6IFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9WdWVUZWxlc2NvcGVcIixcbiAgICAgICAgICAgICAgICAgIHRhcmdldDogXCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIF9jKFwiVHdpdHRlckljb25cIiwge1xuICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwidy01IGgtNSBob3Zlcjp0ZXh0LXByaW1hcnktNTAwXCJcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAxXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcImFcIixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICBocmVmOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9udXh0bGFicy92dWUtdGVsZXNjb3BlLWFuYWx5emVyXCIsXG4gICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBfYyhcIkdpdGh1Ykljb25cIiwge1xuICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwidy01IGgtNSBob3Zlcjp0ZXh0LXByaW1hcnktNTAwXCJcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAxXG4gICAgICAgICAgICApXG4gICAgICAgICAgXSxcbiAgICAgICAgICAxXG4gICAgICAgIClcbiAgICAgIF0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF92bS5pc0xvYWRpbmdcbiAgICAgICAgPyBfYyhcbiAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOlxuICAgICAgICAgICAgICAgIFwiYWJzb2x1dGUgdG9wLTAgbGVmdC0wIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHctZnVsbCBoLWZ1bGxcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJmb250LWJvbGQtYm9keS13ZWlnaHQgdGV4dC1zZXZlblwiIH0sIFtcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCJMb2FkaW5nLi4uXCIpXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdXG4gICAgICAgICAgKVxuICAgICAgICA6ICFfdm0uc2hvd2Nhc2UgfHwgIV92bS5zaG93Y2FzZS51cmxcbiAgICAgICAgPyBfYyhcbiAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOlxuICAgICAgICAgICAgICAgIFwiYWJzb2x1dGUgdG9wLTAgbGVmdC0wIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHctZnVsbCBoLWZ1bGxcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJmb250LWJvbGQtYm9keS13ZWlnaHQgdGV4dC1laWdodFwiIH0sIFtcbiAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICBcIlxcbiAgICAgICAgUGxlYXNlIGVudGVyIGFuIHVybCBpbiB0aGUgYWRkcmVzcyBiYXIuXFxuICAgICAgXCJcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdXG4gICAgICAgICAgKVxuICAgICAgICA6IF92bS5zaG93Y2FzZVxuICAgICAgICA/IF9jKFwiZGl2XCIsIFtcbiAgICAgICAgICAgIF92bS5zaG93Y2FzZS5oYXNWdWVcbiAgICAgICAgICAgICAgPyBfYyhcImRpdlwiLCBbXG4gICAgICAgICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcIm1iLThcIiB9LCBbXG4gICAgICAgICAgICAgICAgICAgIF92bS5zYXZpbmdFcnJvclxuICAgICAgICAgICAgICAgICAgICAgID8gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJtYi00IHRleHQtb3JhbmdlXCIgfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcXG4gICAgICAgICAgICBDb3VsZCBub3Qgc2F2ZSB3ZWJzaXRlIHRvIFZ1ZSBUZWxlc2NvcGUsIHBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIgb3JcXG4gICAgICAgICAgICBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJ1bmRlcmxpbmVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJtYWlsdG86dnVldGVsZXNjb3BlQG51eHRqcy5jb20/c3ViamVjdD1Db3VsZCBub3Qgc2F2ZSBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnNob3djYXNlLnVybFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdihcImNvbnRhY3QgdXNcIildXG4gICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIi5cXG4gICAgICAgICAgXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKCksXG4gICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwibWItNFwiIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaDNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJmbGV4IGl0ZW1zLWNlbnRlciBwbC0yIHVwcGVyY2FzZSBmb250LWJvbGQtYm9keS13ZWlnaHQgdGV4dC1wcmltYXJ5LTUwMFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfYyhcIkluZm9JY29uXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJoLTUgbXItMiBvcGFjaXR5LTUwIHRleHQtcHJpbWFyeS01NzAwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIkluZm9cXG4gICAgICAgICAgICBcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImdyaWQgZ3JpZC1jb2xzLTMgZ2FwLTRcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcIkV4cGxvcmVEYXRhSXRlbVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcIlZ1ZSBWZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWc6IFwiYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjogX3ZtLnZ1ZURvY3NVUkwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiX2JsYW5rXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWw6IFwibm9yZWZlcnJlciBub29wZW5lclwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJpbWdcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwidy02IGgtNiBtci0yXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBzcmM6IF92bS5pY29uVVJMKFwiL3Z1ZS5zdmdcIiksIGFsdDogXCJcIiB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidGV4dC1iYXNlIGxlYWRpbmctYmFzZSBmb250LWJvbGQtYm9keS13ZWlnaHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICAgICAgICAgICAgIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhfdm0uc2hvd2Nhc2UudnVlVmVyc2lvbikgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcXG4gICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnNob3djYXNlLmZyYW1ld29ya1xuICAgICAgICAgICAgICAgICAgICAgICAgICA/IF9jKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJFeHBsb3JlRGF0YUl0ZW1cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJGcmFtZXdvcmtcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWc6IFwiYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6IF92bS5zaG93Y2FzZS5mcmFtZXdvcmsudXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogXCJfYmxhbmtcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWw6IFwibm9yZWZlcnJlciBub29wZW5lclwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwiaW1nXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJ3LTYgaC02IG1yLTJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiBfdm0uaWNvblVSTChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnNob3djYXNlLmZyYW1ld29yay5pbWdQYXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0ZXh0LWJhc2UgbGVhZGluZy1zZXZlbiBmb250LWJvbGQtYm9keS13ZWlnaHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxcbiAgICAgICAgICAgICAgICBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKF92bS5zaG93Y2FzZS5mcmFtZXdvcmsubmFtZSkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uc2hvd2Nhc2UudWlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiRXhwbG9yZURhdGFJdGVtXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiVUkgRnJhbWV3b3JrXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnOiBcImFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmOiBfdm0uc2hvd2Nhc2UudWkudXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogXCJfYmxhbmtcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWw6IFwibm9yZWZlcnJlciBub29wZW5lclwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwiaW1nXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJ3LTYgaC02IG1yLTJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiBfdm0uaWNvblVSTChfdm0uc2hvd2Nhc2UudWkuaW1nUGF0aCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInRleHQtYmFzZSBsZWFkaW5nLXNldmVuIGZvbnQtYm9sZC1ib2R5LXdlaWdodFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICAgICAgICAgICAgIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLnNob3djYXNlLnVpLm5hbWUpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxcbiAgICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiRXhwbG9yZURhdGFJdGVtXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgbGFiZWw6IFwiUmVuZGVyaW5nXCIgfSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZsZXggaXRlbXMtY2VudGVyIHRleHQtYmFzZSBsZWFkaW5nLXNldmVuIGZvbnQtYm9sZC1ib2R5LXdlaWdodFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcXG4gICAgICAgICAgICAgICAgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uc2hvd2Nhc2UuaGFzU1NSXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBcIlVuaXZlcnNhbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcIkNsaWVudC1zaWRlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcXG4gICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnNob3djYXNlLmZyYW1ld29yayAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnNob3djYXNlLmZyYW1ld29yay5zbHVnID09PSBcIm51eHRqc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkV4cGxvcmVEYXRhSXRlbVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBsYWJlbDogXCJEZXBsb3ltZW50XCIgfSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZsZXggaXRlbXMtY2VudGVyIHRleHQtYmFzZSBsZWFkaW5nLXNldmVuIGZvbnQtYm9sZC1ib2R5LXdlaWdodFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICAgICAgICAgICAgIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uc2hvd2Nhc2UuaXNTdGF0aWNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBcIlN0YXRpY1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogXCJTZXJ2ZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKVxuICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICBfdm0uc2hvd2Nhc2UucGx1Z2lucy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgPyBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcIm1iLTRcIiB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcIm1iLTRcIiB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaDNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJmbGV4IGl0ZW1zLWNlbnRlciBwbC0yIHVwcGVyY2FzZSBmb250LWJvbGQtYm9keS13ZWlnaHQgdGV4dC1wcmltYXJ5LTUwMFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYyhcIlBsdWdpbnNJY29uXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJoLTYgbXItMiBvcGFjaXR5LTUwIHRleHQtcHJpbWFyeS01MDBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCJQbHVnaW5zXFxuICAgICAgICAgICAgXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImZsZXggZmxleC13cmFwXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9sKF92bS5zaG93Y2FzZS5wbHVnaW5zLCBmdW5jdGlvbihwbHVnaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBwbHVnaW4uaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibWItNCBtci00IGJvcmRlciBiZy1ncmV5LTUwIGhvdmVyOmJnLWdyZXktMTAwIGJvcmRlci1ncmV5LTIwMCByb3VuZGVkLXhsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6IHBsdWdpbi51cmwsIHRhcmdldDogXCJfYmxhbmtcIiB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInNwYW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJibG9jayBweC00IHB5LTIgdGV4dC1zbSBmb250LWJvbGQtYm9keS13ZWlnaHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdihfdm0uX3MocGx1Z2luLm5hbWUpKV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgIF92bS5zaG93Y2FzZS5tb2R1bGVzLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICA/IF9jKFwiZGl2XCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwibWItNFwiIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJoM1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZsZXggaXRlbXMtY2VudGVyIHBsLTIgdXBwZXJjYXNlIGZvbnQtYm9sZC1ib2R5LXdlaWdodCB0ZXh0LXByaW1hcnktNTAwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwiTW9kdWxlc0ljb25cIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImgtNiBtci0yIG9wYWNpdHktNTAgdGV4dC1wcmltYXJ5LTUwMFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJOdXh0XFxuICAgICAgICAgICAgICBNb2R1bGVzXFxuICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiZmxleCBmbGV4LXdyYXBcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX2woX3ZtLnNob3djYXNlLm1vZHVsZXMsIGZ1bmN0aW9uKG1vZHVsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IG1vZHVsZS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJtYi00IG1yLTQgYm9yZGVyIGJnLWdyZXktNTAgaG92ZXI6YmctZ3JleS0xMDAgYm9yZGVyLWdyZXktMjAwIHJvdW5kZWQteGxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogbW9kdWxlLnVybCwgdGFyZ2V0OiBcIl9ibGFua1wiIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3BhblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImJsb2NrIHB4LTQgcHktMiB0ZXh0LXNtIGZvbnQtYm9sZC1ib2R5LXdlaWdodFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KF92bS5fcyhtb2R1bGUubmFtZSkpXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKClcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICA6ICFfdm0uc2hvd2Nhc2UuaGFzVnVlXG4gICAgICAgICAgICAgID8gX2MoXG4gICAgICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczpcbiAgICAgICAgICAgICAgICAgICAgICBcImFic29sdXRlIHRvcC0wIGxlZnQtMCBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciB3LWZ1bGwgaC1mdWxsIHBvaW50ZXItZXZlbnRzLW5vbmVcIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImZvbnQtYm9sZC1ib2R5LXdlaWdodCB0ZXh0LWVpZ2h0XCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICAgICAgIFZ1ZSBpcyBub3QgdXNlZCBvbiB0aGlzIHdlYnNpdGVcXG4gICAgICAgIFwiXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICA6IF92bS5fZSgpXG4gICAgICAgICAgXSlcbiAgICAgICAgOiBfdm0uX2UoKVxuICAgIF0pXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBfdm0udGFnLFxuICAgIHtcbiAgICAgIHRhZzogXCJjb21wb25lbnRcIixcbiAgICAgIHN0YXRpY0NsYXNzOiBcInctZnVsbCBzbTp3LTEvMiBtZDp3LTEvMyBtYXgtdy1zbSBtLWF1dG8gc206bS0wXCJcbiAgICB9LFxuICAgIFtcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwicmVsYXRpdmUgdy1mdWxsIGgtZnVsbCBwdC0wXCIgfSwgW1xuICAgICAgICBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzOlxuICAgICAgICAgICAgICBcImZsZXggZmxleC1jb2wgaXRlbXMtY2VudGVyIGp1c3RpZnktYmV0d2VlbiBiZy1ncmV5LTUwIHJvdW5kZWQteGwgcGItMiBwci0yIHctZnVsbCBoLWZ1bGwgYm9yZGVyLTIgYm9yZGVyLWdyZXktMjAwXCIsXG4gICAgICAgICAgICBjbGFzczogW192bS50YWcgPT09IFwiYVwiICYmIFwiaG92ZXI6YmctZ3JleS0xMDBcIl1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6XG4gICAgICAgICAgICAgICAgICBcInNlbGYtc3RhcnQgYmctZ3JleS0yMDAgcHgtMyByb3VuZGVkLXhsIHJvdW5kZWQtYmwtbm9uZSByb3VuZGVkLXRyLW5vbmUgdGV4dC14cyB0cmFja2luZy00IHVwcGVyY2FzZSBsZWFkaW5nLXNtIGZvbnQtYm9sZC1ib2R5LXdlaWdodCBtYi0yXCIsXG4gICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgIFwiYm9yZGVyLXJhZGl1c1wiOiBcIjAuNzVyZW1cIixcbiAgICAgICAgICAgICAgICAgIFwiYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1c1wiOiBcIjBcIixcbiAgICAgICAgICAgICAgICAgIFwiYm9yZGVyLXRvcC1yaWdodC1yYWRpdXNcIjogXCIwXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFtfdm0uX3YoXCJcXG4gICAgICAgIFwiICsgX3ZtLl9zKF92bS5sYWJlbCkgKyBcIlxcbiAgICAgIFwiKV1cbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiZmxleCBpdGVtcy1jZW50ZXJcIiB9LFxuICAgICAgICAgICAgICBbX3ZtLl90KFwiZGVmYXVsdFwiKV0sXG4gICAgICAgICAgICAgIDJcbiAgICAgICAgICAgIClcbiAgICAgICAgICBdXG4gICAgICAgIClcbiAgICAgIF0pXG4gICAgXVxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiLyogZ2xvYmFscyBfX1ZVRV9TU1JfQ09OVEVYVF9fICovXG5cbi8vIElNUE9SVEFOVDogRG8gTk9UIHVzZSBFUzIwMTUgZmVhdHVyZXMgaW4gdGhpcyBmaWxlIChleGNlcHQgZm9yIG1vZHVsZXMpLlxuLy8gVGhpcyBtb2R1bGUgaXMgYSBydW50aW1lIHV0aWxpdHkgZm9yIGNsZWFuZXIgY29tcG9uZW50IG1vZHVsZSBvdXRwdXQgYW5kIHdpbGxcbi8vIGJlIGluY2x1ZGVkIGluIHRoZSBmaW5hbCB3ZWJwYWNrIHVzZXIgYnVuZGxlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQgKFxuICBzY3JpcHRFeHBvcnRzLFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZnVuY3Rpb25hbFRlbXBsYXRlLFxuICBpbmplY3RTdHlsZXMsXG4gIHNjb3BlSWQsXG4gIG1vZHVsZUlkZW50aWZpZXIsIC8qIHNlcnZlciBvbmx5ICovXG4gIHNoYWRvd01vZGUgLyogdnVlLWNsaSBvbmx5ICovXG4pIHtcbiAgLy8gVnVlLmV4dGVuZCBjb25zdHJ1Y3RvciBleHBvcnQgaW50ZXJvcFxuICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBzY3JpcHRFeHBvcnRzID09PSAnZnVuY3Rpb24nXG4gICAgPyBzY3JpcHRFeHBvcnRzLm9wdGlvbnNcbiAgICA6IHNjcmlwdEV4cG9ydHNcblxuICAvLyByZW5kZXIgZnVuY3Rpb25zXG4gIGlmIChyZW5kZXIpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IHJlbmRlclxuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gc3RhdGljUmVuZGVyRm5zXG4gICAgb3B0aW9ucy5fY29tcGlsZWQgPSB0cnVlXG4gIH1cblxuICAvLyBmdW5jdGlvbmFsIHRlbXBsYXRlXG4gIGlmIChmdW5jdGlvbmFsVGVtcGxhdGUpIHtcbiAgICBvcHRpb25zLmZ1bmN0aW9uYWwgPSB0cnVlXG4gIH1cblxuICAvLyBzY29wZWRJZFxuICBpZiAoc2NvcGVJZCkge1xuICAgIG9wdGlvbnMuX3Njb3BlSWQgPSAnZGF0YS12LScgKyBzY29wZUlkXG4gIH1cblxuICB2YXIgaG9va1xuICBpZiAobW9kdWxlSWRlbnRpZmllcikgeyAvLyBzZXJ2ZXIgYnVpbGRcbiAgICBob29rID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgIC8vIDIuMyBpbmplY3Rpb25cbiAgICAgIGNvbnRleHQgPVxuICAgICAgICBjb250ZXh0IHx8IC8vIGNhY2hlZCBjYWxsXG4gICAgICAgICh0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0KSB8fCAvLyBzdGF0ZWZ1bFxuICAgICAgICAodGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuJHZub2RlICYmIHRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0KSAvLyBmdW5jdGlvbmFsXG4gICAgICAvLyAyLjIgd2l0aCBydW5Jbk5ld0NvbnRleHQ6IHRydWVcbiAgICAgIGlmICghY29udGV4dCAmJiB0eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfXyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29udGV4dCA9IF9fVlVFX1NTUl9DT05URVhUX19cbiAgICAgIH1cbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgc3R5bGVzXG4gICAgICBpZiAoaW5qZWN0U3R5bGVzKSB7XG4gICAgICAgIGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIGNvbnRleHQpXG4gICAgICB9XG4gICAgICAvLyByZWdpc3RlciBjb21wb25lbnQgbW9kdWxlIGlkZW50aWZpZXIgZm9yIGFzeW5jIGNodW5rIGluZmVycmVuY2VcbiAgICAgIGlmIChjb250ZXh0ICYmIGNvbnRleHQuX3JlZ2lzdGVyZWRDb21wb25lbnRzKSB7XG4gICAgICAgIGNvbnRleHQuX3JlZ2lzdGVyZWRDb21wb25lbnRzLmFkZChtb2R1bGVJZGVudGlmaWVyKVxuICAgICAgfVxuICAgIH1cbiAgICAvLyB1c2VkIGJ5IHNzciBpbiBjYXNlIGNvbXBvbmVudCBpcyBjYWNoZWQgYW5kIGJlZm9yZUNyZWF0ZVxuICAgIC8vIG5ldmVyIGdldHMgY2FsbGVkXG4gICAgb3B0aW9ucy5fc3NyUmVnaXN0ZXIgPSBob29rXG4gIH0gZWxzZSBpZiAoaW5qZWN0U3R5bGVzKSB7XG4gICAgaG9vayA9IHNoYWRvd01vZGVcbiAgICAgID8gZnVuY3Rpb24gKCkge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbChcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIChvcHRpb25zLmZ1bmN0aW9uYWwgPyB0aGlzLnBhcmVudCA6IHRoaXMpLiRyb290LiRvcHRpb25zLnNoYWRvd1Jvb3RcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvbmFsIGNvbXBvbmVudCBpbiB2dWUgZmlsZVxuICAgICAgdmFyIG9yaWdpbmFsUmVuZGVyID0gb3B0aW9ucy5yZW5kZXJcbiAgICAgIG9wdGlvbnMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyV2l0aFN0eWxlSW5qZWN0aW9uIChoLCBjb250ZXh0KSB7XG4gICAgICAgIGhvb2suY2FsbChjb250ZXh0KVxuICAgICAgICByZXR1cm4gb3JpZ2luYWxSZW5kZXIoaCwgY29udGV4dClcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCByZWdpc3RyYXRpb24gYXMgYmVmb3JlQ3JlYXRlIGhvb2tcbiAgICAgIHZhciBleGlzdGluZyA9IG9wdGlvbnMuYmVmb3JlQ3JlYXRlXG4gICAgICBvcHRpb25zLmJlZm9yZUNyZWF0ZSA9IGV4aXN0aW5nXG4gICAgICAgID8gW10uY29uY2F0KGV4aXN0aW5nLCBob29rKVxuICAgICAgICA6IFtob29rXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZXhwb3J0czogc2NyaXB0RXhwb3J0cyxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH1cbn1cbiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vRXhwbG9yZURhdGFJdGVtLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0xZGFkMGRmNiZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9FeHBsb3JlRGF0YUl0ZW0udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9FeHBsb3JlRGF0YUl0ZW0udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCIvVXNlcnMvYXRpbnV4L1Byb2plY3RzL251eHRsYWJzL3Z1ZS10ZWxlc2NvcGUtZXh0ZW5zaW9ucy9ub2RlX21vZHVsZXMvdnVlLWhvdC1yZWxvYWQtYXBpL2Rpc3QvaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCcxZGFkMGRmNicpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCcxZGFkMGRmNicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCcxZGFkMGRmNicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vRXhwbG9yZURhdGFJdGVtLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0xZGFkMGRmNiZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCcxZGFkMGRmNicsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiY29tcG9uZW50cy9FeHBsb3JlRGF0YUl0ZW0udnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiPHRlbXBsYXRlPlxuICA8Y29tcG9uZW50XG4gICAgOmlzPVwidGFnXCJcbiAgICBjbGFzcz1cInctZnVsbCBzbTp3LTEvMiBtZDp3LTEvMyBtYXgtdy1zbSBtLWF1dG8gc206bS0wXCJcbiAgPlxuICAgIDxkaXYgY2xhc3M9XCJyZWxhdGl2ZSB3LWZ1bGwgaC1mdWxsIHB0LTBcIj5cbiAgICAgIDxkaXZcbiAgICAgICAgOmNsYXNzPVwiW3RhZyA9PT0gJ2EnICYmICdob3ZlcjpiZy1ncmV5LTEwMCddXCJcbiAgICAgICAgY2xhc3M9XCJmbGV4IGZsZXgtY29sIGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWJldHdlZW4gYmctZ3JleS01MCByb3VuZGVkLXhsIHBiLTIgcHItMiB3LWZ1bGwgaC1mdWxsIGJvcmRlci0yIGJvcmRlci1ncmV5LTIwMFwiXG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBzdHlsZT1cIlxuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMC43NXJlbTtcbiAgICAgICAgICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDA7XG4gICAgICAgICAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMDtcbiAgICAgICAgICBcIlxuICAgICAgICAgIGNsYXNzPVwic2VsZi1zdGFydCBiZy1ncmV5LTIwMCBweC0zIHJvdW5kZWQteGwgcm91bmRlZC1ibC1ub25lIHJvdW5kZWQtdHItbm9uZSB0ZXh0LXhzIHRyYWNraW5nLTQgdXBwZXJjYXNlIGxlYWRpbmctc20gZm9udC1ib2xkLWJvZHktd2VpZ2h0IG1iLTJcIlxuICAgICAgICA+XG4gICAgICAgICAge3sgbGFiZWwgfX1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGl0ZW1zLWNlbnRlclwiPlxuICAgICAgICAgIDxzbG90IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvY29tcG9uZW50PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcHJvcHM6IHtcbiAgICBsYWJlbDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJydcbiAgICB9LFxuICAgIHRhZzoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2RpdidcbiAgICB9XG4gIH1cbn1cbjwvc2NyaXB0PlxuXG48c3R5bGU+PC9zdHlsZT5cbiIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXG4gICAgX3ZtLnRhZyxcbiAgICB7XG4gICAgICB0YWc6IFwiY29tcG9uZW50XCIsXG4gICAgICBzdGF0aWNDbGFzczpcbiAgICAgICAgXCJpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXIgZm9udC1ib2xkLWJvZHktd2VpZ2h0IGZvY3VzOm91dGxpbmUtbm9uZSBib3JkZXItMiBib3JkZXItdHJhbnNwYXJlbnRcIixcbiAgICAgIGNsYXNzOiBbXG4gICAgICAgIF92bS5zaXppbmcuaGVpZ2h0LFxuICAgICAgICBfdm0uc2l6aW5nLmZvbnRTaXplLFxuICAgICAgICBfdm0uc2l6aW5nLnJvdW5kZWQsXG4gICAgICAgIF92bS5zaXppbmcucGFkZGluZyxcbiAgICAgICAgX3ZtLmNvbG9yLmJnLFxuICAgICAgICBfdm0uY29sb3IudGV4dCxcbiAgICAgICAgX3ZtLmNvbG9yLm91dGxpbmUsXG4gICAgICAgIF92bS5jb2xvci5ob3ZlclN0YXRlXG4gICAgICBdLFxuICAgICAgYXR0cnM6IHsgaHJlZjogX3ZtLmhyZWYgfVxuICAgIH0sXG4gICAgW192bS5fdChcImRlZmF1bHRcIildLFxuICAgIDJcbiAgKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cbiAgPGNvbXBvbmVudFxuICAgIDppcz1cInRhZ1wiXG4gICAgOmhyZWY9XCJocmVmXCJcbiAgICA6Y2xhc3M9XCJbXG4gICAgICBzaXppbmcuaGVpZ2h0LFxuICAgICAgc2l6aW5nLmZvbnRTaXplLFxuICAgICAgc2l6aW5nLnJvdW5kZWQsXG4gICAgICBzaXppbmcucGFkZGluZyxcbiAgICAgIGNvbG9yLmJnLFxuICAgICAgY29sb3IudGV4dCxcbiAgICAgIGNvbG9yLm91dGxpbmUsXG4gICAgICBjb2xvci5ob3ZlclN0YXRlXG4gICAgXVwiXG4gICAgY2xhc3M9XCJpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXIgZm9udC1ib2xkLWJvZHktd2VpZ2h0IGZvY3VzOm91dGxpbmUtbm9uZSBib3JkZXItMiBib3JkZXItdHJhbnNwYXJlbnRcIlxuICA+XG4gICAgPHNsb3Q+PC9zbG90PlxuICA8L2NvbXBvbmVudD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG4gIHByb3BzOiB7XG4gICAgc2l6ZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2Jhc2UnXG4gICAgfSxcbiAgICBhcHBlYXJhbmNlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJ1xuICAgIH0sXG4gICAgdGFnOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnYnV0dG9uJ1xuICAgIH0sXG4gICAgb3V0bGluZWQ6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH0sXG4gICAgaHJlZjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogbnVsbFxuICAgIH1cbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBzaXppbmcgKCkge1xuICAgICAgaWYgKHRoaXMuc2l6ZSA9PT0gJ3NtYWxsJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGhlaWdodDogJ2gtOCcsXG4gICAgICAgICAgZm9udFNpemU6ICd0ZXh0LXNtJyxcbiAgICAgICAgICByb3VuZGVkOiAncm91bmRlZC1tZCcsXG4gICAgICAgICAgcGFkZGluZzogJ3B4LTQnXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zaXplID09PSAnbGFyZ2UnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaGVpZ2h0OiAnaC0xMicsXG4gICAgICAgICAgZm9udFNpemU6ICd0ZXh0LWVpZ2h0JyxcbiAgICAgICAgICByb3VuZGVkOiAncm91bmRlZC0zbGcnLFxuICAgICAgICAgIHBhZGRpbmc6ICdweC02J1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGhlaWdodDogJ2gtMTAnLFxuICAgICAgICAgIGZvbnRTaXplOiAndGV4dC1iYXNlJyxcbiAgICAgICAgICByb3VuZGVkOiAncm91bmRlZC0ybGcnLFxuICAgICAgICAgIHBhZGRpbmc6ICdweC00J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBjb2xvciAoKSB7XG4gICAgICBpZiAodGhpcy5hcHBlYXJhbmNlID09PSAndHJhbnNwYXJlbnQnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgYmc6ICcnLFxuICAgICAgICAgIHRleHQ6ICcnLFxuICAgICAgICAgIG91dGxpbmU6ICcnLFxuICAgICAgICAgIGhvdmVyU3RhdGU6ICdob3Zlcjp0ZXh0LXByaW1hcnktNTAwJ1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuYXBwZWFyYW5jZSA9PT0gJ3ByaW1hcnknKSB7XG4gICAgICAgIGlmICh0aGlzLm91dGxpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC8vIGJnOiAnYmctcHJpbWFyeS01MDAnLFxuICAgICAgICAgICAgdGV4dDogJ3RleHQtcHJpbWFyeS01MDAnLFxuICAgICAgICAgICAgb3V0bGluZTogJ2JvcmRlci1wcmltYXJ5LTUwMCcsXG4gICAgICAgICAgICBob3ZlclN0YXRlOiAnaG92ZXI6YmctcHJpbWFyeS01MCBob3Zlcjpib3JkZXItcHJpbWFyeS0zMDAnXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBiZzogJ2JnLXByaW1hcnktNTAwJyxcbiAgICAgICAgICAgIHRleHQ6ICd0ZXh0LXdoaXRlJyxcbiAgICAgICAgICAgIG91dGxpbmU6ICdmb2N1czpib3JkZXItcHJpbWFyeS03MDAnLFxuICAgICAgICAgICAgaG92ZXJTdGF0ZTogJ2hvdmVyOmJnLXByaW1hcnktNDAwJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0aGlzLmFwcGVhcmFuY2UgPT09ICdkYW5nZXInKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgYmc6ICdiZy1yZWQtNTAwJyxcbiAgICAgICAgICB0ZXh0OiAndGV4dC13aGl0ZSdcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0aGlzLmFwcGVhcmFuY2UgPT09ICd3YXJuaW5nJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGJnOiAnYmcteWVsbG93LTUwMCcsXG4gICAgICAgICAgdGV4dDogJ3RleHQtZ3JleS05MDAnXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5hcHBlYXJhbmNlID09PSAnc3VjY2VzcycpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBiZzogJ2JnLWdyZWVuLTUwMCcsXG4gICAgICAgICAgdGV4dDogJ3RleHQtd2hpdGUnXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5hcHBlYXJhbmNlID09PSAnaW5mbycpIHtcbiAgICAgICAgaWYgKHRoaXMub3V0bGluZWQpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLy8gYmc6ICdiZy1ibHVlLTUwMCcsXG4gICAgICAgICAgICB0ZXh0OiAndGV4dC1ibHVlLTkwMCcsXG4gICAgICAgICAgICBvdXRsaW5lOiAnYm9yZGVyLWJsdWUtOTAwJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYmc6ICdiZy1ibHVlLTUwMCcsXG4gICAgICAgICAgICB0ZXh0OiAndGV4dC13aGl0ZScsXG4gICAgICAgICAgICBvdXRsaW5lOiAnZm9jdXM6Ym9yZGVyLWJsdWUtOTAwJyxcbiAgICAgICAgICAgIGhvdmVyU3RhdGU6ICdob3ZlcjpiZy1ibHVlLTQwMCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgYmc6ICdiZy1ncmV5LTIwMCcsXG4gICAgICAgICAgdGV4dDogJ3RleHQtZ3JleS05MDAnLFxuICAgICAgICAgIG91dGxpbmU6ICdmb2N1czpib3JkZXItZ3JleS03MDAnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbjwvc2NyaXB0PlxuXG48c3R5bGU+PC9zdHlsZT5cbiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vQXBwQnV0dG9uLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wMTUwZjQ2OCZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9BcHBCdXR0b24udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9BcHBCdXR0b24udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCIvVXNlcnMvYXRpbnV4L1Byb2plY3RzL251eHRsYWJzL3Z1ZS10ZWxlc2NvcGUtZXh0ZW5zaW9ucy9ub2RlX21vZHVsZXMvdnVlLWhvdC1yZWxvYWQtYXBpL2Rpc3QvaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCcwMTUwZjQ2OCcpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCcwMTUwZjQ2OCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCcwMTUwZjQ2OCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vQXBwQnV0dG9uLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wMTUwZjQ2OCZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCcwMTUwZjQ2OCcsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiY29tcG9uZW50cy9BcHBCdXR0b24udnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwicmVsYXRpdmUgYmctd2hpdGUgZXh0ZW5zaW9uXCI+XG4gICAgPGRpdiBjbGFzcz1cInB4LTQgcHQtNFwiPlxuICAgICAgPGRpdiBjbGFzcz1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktYmV0d2VlbiBtYi04XCI+XG4gICAgICAgIDxhIGhyZWY9XCJodHRwOi8vdnVldGVsZXNjb3BlLmNvbS9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5cbiAgICAgICAgICA8TG9nb0ljb24gY2xhc3M9XCJoLThcIiAvPlxuICAgICAgICA8L2E+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZsZXggaXRlbXMtY2VudGVyXCI+XG4gICAgICAgICAgPGFcbiAgICAgICAgICAgIHYtaWY9XCJpc1Jvb3RVcmwgJiYgc2hvd2Nhc2UgJiYgc2hvd2Nhc2UuaGFzVnVlICYmIHNob3djYXNlLmlzUHVibGljXCJcbiAgICAgICAgICAgIDpocmVmPVwiYGh0dHBzOi8vdnVldGVsZXNjb3BlLmNvbS9leHBsb3JlLyR7c2hvd2Nhc2Uuc2x1Z31gXCJcbiAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICBjbGFzcz1cIm1yLTNcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxBcHBCdXR0b24gc2l6ZT1cInNtYWxsXCIgYXBwZWFyYW5jZT1cInByaW1hcnlcIiBvdXRsaW5lZD5cbiAgICAgICAgICAgICAgT3BlblxuICAgICAgICAgICAgPC9BcHBCdXR0b24+XG4gICAgICAgICAgPC9hPlxuICAgICAgICAgIDxBcHBCdXR0b25cbiAgICAgICAgICAgIHYtZWxzZS1pZj1cIlxuICAgICAgICAgICAgICBpc1Jvb3RVcmwgJiZcbiAgICAgICAgICAgICAgICBzaG93Y2FzZSAmJlxuICAgICAgICAgICAgICAgIHNob3djYXNlLmhhc1Z1ZSAmJlxuICAgICAgICAgICAgICAgICFzaG93Y2FzZS5pc1B1YmxpYyAmJlxuICAgICAgICAgICAgICAgICFzYXZpbmdFcnJvclxuICAgICAgICAgICAgXCJcbiAgICAgICAgICAgIEBjbGljay5uYXRpdmU9XCJzYXZlU2hvd2Nhc2VcIlxuICAgICAgICAgICAgc2l6ZT1cInNtYWxsXCJcbiAgICAgICAgICAgIGFwcGVhcmFuY2U9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgIGNsYXNzPVwibXItM1wiXG4gICAgICAgICAgPlxuICAgICAgICAgICAge3sgc2F2aW5nID8gJ1NhdmluZy4uLicgOiAnU2F2ZScgfX1cbiAgICAgICAgICA8L0FwcEJ1dHRvbj5cblxuICAgICAgICAgIDxhXG4gICAgICAgICAgICBocmVmPVwiaHR0cHM6Ly90d2l0dGVyLmNvbS9WdWVUZWxlc2NvcGVcIlxuICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgIGNsYXNzPVwibXItM1wiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPFR3aXR0ZXJJY29uIGNsYXNzPVwidy01IGgtNSBob3Zlcjp0ZXh0LXByaW1hcnktNTAwXCIgLz5cbiAgICAgICAgICA8L2E+XG5cbiAgICAgICAgICA8YVxuICAgICAgICAgICAgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS9udXh0bGFicy92dWUtdGVsZXNjb3BlLWFuYWx5emVyXCJcbiAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPEdpdGh1Ykljb24gY2xhc3M9XCJ3LTUgaC01IGhvdmVyOnRleHQtcHJpbWFyeS01MDBcIiAvPlxuICAgICAgICAgIDwvYT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPCEtLSA8ZGl2IHYtaWY9XCJpc0xvYWRpbmcgJiYgKCFzaG93Y2FzZSB8fCAhc2hvd2Nhc2UudXJsKVwiPlBsZWFzZSByZWZyZXNoIHRoZSBwYWdlIHRvIGRldGVjdC48L2Rpdj4gLS0+XG5cbiAgICAgIDxkaXZcbiAgICAgICAgdi1pZj1cImlzTG9hZGluZ1wiXG4gICAgICAgIGNsYXNzPVwiYWJzb2x1dGUgdG9wLTAgbGVmdC0wIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHctZnVsbCBoLWZ1bGxcIlxuICAgICAgPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9udC1ib2xkLWJvZHktd2VpZ2h0IHRleHQtc2V2ZW5cIj5Mb2FkaW5nLi4uPC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdlxuICAgICAgICB2LWVsc2UtaWY9XCIhc2hvd2Nhc2UgfHwgIXNob3djYXNlLnVybFwiXG4gICAgICAgIGNsYXNzPVwiYWJzb2x1dGUgdG9wLTAgbGVmdC0wIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHctZnVsbCBoLWZ1bGxcIlxuICAgICAgPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9udC1ib2xkLWJvZHktd2VpZ2h0IHRleHQtZWlnaHRcIj5cbiAgICAgICAgICBQbGVhc2UgZW50ZXIgYW4gdXJsIGluIHRoZSBhZGRyZXNzIGJhci5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiB2LWVsc2UtaWY9XCJzaG93Y2FzZVwiPlxuICAgICAgICA8ZGl2IHYtaWY9XCJzaG93Y2FzZS5oYXNWdWVcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibWItOFwiPlxuICAgICAgICAgICAgPGRpdiB2LWlmPVwic2F2aW5nRXJyb3JcIiBjbGFzcz1cIm1iLTQgdGV4dC1vcmFuZ2VcIj5cbiAgICAgICAgICAgICAgQ291bGQgbm90IHNhdmUgd2Vic2l0ZSB0byBWdWUgVGVsZXNjb3BlLCBwbGVhc2UgdHJ5IGFnYWluIGxhdGVyIG9yXG4gICAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJ1bmRlcmxpbmVcIlxuICAgICAgICAgICAgICAgIDpocmVmPVwiXG4gICAgICAgICAgICAgICAgICBgbWFpbHRvOnZ1ZXRlbGVzY29wZUBudXh0anMuY29tP3N1YmplY3Q9Q291bGQgbm90IHNhdmUgJHtzaG93Y2FzZS51cmx9YFxuICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgPmNvbnRhY3QgdXM8L2FcbiAgICAgICAgICAgICAgPi5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1iLTRcIj5cbiAgICAgICAgICAgICAgPGgzXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJmbGV4IGl0ZW1zLWNlbnRlciBwbC0yIHVwcGVyY2FzZSBmb250LWJvbGQtYm9keS13ZWlnaHQgdGV4dC1wcmltYXJ5LTUwMFwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8SW5mb0ljb24gY2xhc3M9XCJoLTUgbXItMiBvcGFjaXR5LTUwIHRleHQtcHJpbWFyeS01NzAwXCIgLz5JbmZvXG4gICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImdyaWQgZ3JpZC1jb2xzLTMgZ2FwLTRcIj5cbiAgICAgICAgICAgICAgPEV4cGxvcmVEYXRhSXRlbVxuICAgICAgICAgICAgICAgIGxhYmVsPVwiVnVlIFZlcnNpb25cIlxuICAgICAgICAgICAgICAgIHRhZz1cImFcIlxuICAgICAgICAgICAgICAgIDpocmVmPVwidnVlRG9jc1VSTFwiXG4gICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICByZWw9XCJub3JlZmVycmVyIG5vb3BlbmVyXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9XCJ3LTYgaC02IG1yLTJcIiA6c3JjPVwiaWNvblVSTCgnL3Z1ZS5zdmcnKVwiIGFsdCAvPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWJhc2UgbGVhZGluZy1iYXNlIGZvbnQtYm9sZC1ib2R5LXdlaWdodFwiPlxuICAgICAgICAgICAgICAgICAge3sgc2hvd2Nhc2UudnVlVmVyc2lvbiB9fVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L0V4cGxvcmVEYXRhSXRlbT5cblxuICAgICAgICAgICAgICA8RXhwbG9yZURhdGFJdGVtXG4gICAgICAgICAgICAgICAgdi1pZj1cInNob3djYXNlLmZyYW1ld29ya1wiXG4gICAgICAgICAgICAgICAgbGFiZWw9XCJGcmFtZXdvcmtcIlxuICAgICAgICAgICAgICAgIHRhZz1cImFcIlxuICAgICAgICAgICAgICAgIDpocmVmPVwic2hvd2Nhc2UuZnJhbWV3b3JrLnVybFwiXG4gICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICByZWw9XCJub3JlZmVycmVyIG5vb3BlbmVyXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgIGNsYXNzPVwidy02IGgtNiBtci0yXCJcbiAgICAgICAgICAgICAgICAgIDpzcmM9XCJpY29uVVJMKHNob3djYXNlLmZyYW1ld29yay5pbWdQYXRoKVwiXG4gICAgICAgICAgICAgICAgICBhbHRcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWJhc2UgbGVhZGluZy1zZXZlbiBmb250LWJvbGQtYm9keS13ZWlnaHRcIj5cbiAgICAgICAgICAgICAgICAgIHt7IHNob3djYXNlLmZyYW1ld29yay5uYW1lIH19XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvRXhwbG9yZURhdGFJdGVtPlxuXG4gICAgICAgICAgICAgIDxFeHBsb3JlRGF0YUl0ZW1cbiAgICAgICAgICAgICAgICB2LWlmPVwic2hvd2Nhc2UudWlcIlxuICAgICAgICAgICAgICAgIGxhYmVsPVwiVUkgRnJhbWV3b3JrXCJcbiAgICAgICAgICAgICAgICB0YWc9XCJhXCJcbiAgICAgICAgICAgICAgICA6aHJlZj1cInNob3djYXNlLnVpLnVybFwiXG4gICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICByZWw9XCJub3JlZmVycmVyIG5vb3BlbmVyXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgIGNsYXNzPVwidy02IGgtNiBtci0yXCJcbiAgICAgICAgICAgICAgICAgIDpzcmM9XCJpY29uVVJMKHNob3djYXNlLnVpLmltZ1BhdGgpXCJcbiAgICAgICAgICAgICAgICAgIGFsdFxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtYmFzZSBsZWFkaW5nLXNldmVuIGZvbnQtYm9sZC1ib2R5LXdlaWdodFwiPlxuICAgICAgICAgICAgICAgICAge3sgc2hvd2Nhc2UudWkubmFtZSB9fVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L0V4cGxvcmVEYXRhSXRlbT5cblxuICAgICAgICAgICAgICA8RXhwbG9yZURhdGFJdGVtIGxhYmVsPVwiUmVuZGVyaW5nXCI+XG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgY2xhc3M9XCJmbGV4IGl0ZW1zLWNlbnRlciB0ZXh0LWJhc2UgbGVhZGluZy1zZXZlbiBmb250LWJvbGQtYm9keS13ZWlnaHRcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHt7IHNob3djYXNlLmhhc1NTUiA/ICdVbml2ZXJzYWwnIDogJ0NsaWVudC1zaWRlJyB9fVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L0V4cGxvcmVEYXRhSXRlbT5cblxuICAgICAgICAgICAgICA8RXhwbG9yZURhdGFJdGVtXG4gICAgICAgICAgICAgICAgdi1pZj1cIlxuICAgICAgICAgICAgICAgICAgc2hvd2Nhc2UuZnJhbWV3b3JrICYmIHNob3djYXNlLmZyYW1ld29yay5zbHVnID09PSAnbnV4dGpzJ1xuICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgbGFiZWw9XCJEZXBsb3ltZW50XCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgIGNsYXNzPVwiZmxleCBpdGVtcy1jZW50ZXIgdGV4dC1iYXNlIGxlYWRpbmctc2V2ZW4gZm9udC1ib2xkLWJvZHktd2VpZ2h0XCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7eyBzaG93Y2FzZS5pc1N0YXRpYyA/ICdTdGF0aWMnIDogJ1NlcnZlcicgfX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9FeHBsb3JlRGF0YUl0ZW0+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxkaXYgdi1pZj1cInNob3djYXNlLnBsdWdpbnMubGVuZ3RoXCIgY2xhc3M9XCJtYi00XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWItNFwiPlxuICAgICAgICAgICAgICA8aDNcbiAgICAgICAgICAgICAgICBjbGFzcz1cImZsZXggaXRlbXMtY2VudGVyIHBsLTIgdXBwZXJjYXNlIGZvbnQtYm9sZC1ib2R5LXdlaWdodCB0ZXh0LXByaW1hcnktNTAwXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxQbHVnaW5zSWNvblxuICAgICAgICAgICAgICAgICAgY2xhc3M9XCJoLTYgbXItMiBvcGFjaXR5LTUwIHRleHQtcHJpbWFyeS01MDBcIlxuICAgICAgICAgICAgICAgIC8+UGx1Z2luc1xuICAgICAgICAgICAgICA8L2gzPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGZsZXgtd3JhcFwiPlxuICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgIHYtZm9yPVwicGx1Z2luIGluIHNob3djYXNlLnBsdWdpbnNcIlxuICAgICAgICAgICAgICAgIDprZXk9XCJwbHVnaW4uaWRcIlxuICAgICAgICAgICAgICAgIDpocmVmPVwicGx1Z2luLnVybFwiXG4gICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICBjbGFzcz1cIm1iLTQgbXItNCBib3JkZXIgYmctZ3JleS01MCBob3ZlcjpiZy1ncmV5LTEwMCBib3JkZXItZ3JleS0yMDAgcm91bmRlZC14bFwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImJsb2NrIHB4LTQgcHktMiB0ZXh0LXNtIGZvbnQtYm9sZC1ib2R5LXdlaWdodFwiPnt7XG4gICAgICAgICAgICAgICAgICBwbHVnaW4ubmFtZVxuICAgICAgICAgICAgICAgIH19PC9zcGFuPlxuICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxkaXYgdi1pZj1cInNob3djYXNlLm1vZHVsZXMubGVuZ3RoXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWItNFwiPlxuICAgICAgICAgICAgICA8aDNcbiAgICAgICAgICAgICAgICBjbGFzcz1cImZsZXggaXRlbXMtY2VudGVyIHBsLTIgdXBwZXJjYXNlIGZvbnQtYm9sZC1ib2R5LXdlaWdodCB0ZXh0LXByaW1hcnktNTAwXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxNb2R1bGVzSWNvbiBjbGFzcz1cImgtNiBtci0yIG9wYWNpdHktNTAgdGV4dC1wcmltYXJ5LTUwMFwiIC8+TnV4dFxuICAgICAgICAgICAgICAgIE1vZHVsZXNcbiAgICAgICAgICAgICAgPC9oMz5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleCBmbGV4LXdyYXBcIj5cbiAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICB2LWZvcj1cIm1vZHVsZSBpbiBzaG93Y2FzZS5tb2R1bGVzXCJcbiAgICAgICAgICAgICAgICA6a2V5PVwibW9kdWxlLmlkXCJcbiAgICAgICAgICAgICAgICA6aHJlZj1cIm1vZHVsZS51cmxcIlxuICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJtYi00IG1yLTQgYm9yZGVyIGJnLWdyZXktNTAgaG92ZXI6YmctZ3JleS0xMDAgYm9yZGVyLWdyZXktMjAwIHJvdW5kZWQteGxcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJibG9jayBweC00IHB5LTIgdGV4dC1zbSBmb250LWJvbGQtYm9keS13ZWlnaHRcIj57e1xuICAgICAgICAgICAgICAgICAgbW9kdWxlLm5hbWVcbiAgICAgICAgICAgICAgICB9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXZcbiAgICAgICAgICB2LWVsc2UtaWY9XCIhc2hvd2Nhc2UuaGFzVnVlXCJcbiAgICAgICAgICBjbGFzcz1cImFic29sdXRlIHRvcC0wIGxlZnQtMCBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciB3LWZ1bGwgaC1mdWxsIHBvaW50ZXItZXZlbnRzLW5vbmVcIlxuICAgICAgICA+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImZvbnQtYm9sZC1ib2R5LXdlaWdodCB0ZXh0LWVpZ2h0XCI+XG4gICAgICAgICAgICBWdWUgaXMgbm90IHVzZWQgb24gdGhpcyB3ZWJzaXRlXG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBicm93c2VyIGZyb20gJ3dlYmV4dGVuc2lvbi1wb2x5ZmlsbCdcblxuaW1wb3J0IExvZ29JY29uIGZyb20gJy4uL2ltYWdlcy9sb2dvLnN2Zz9pbmxpbmUnXG4vLyAvLyBpbXBvcnQgRXh0ZXJuYWxMaW5rSWNvbiBmcm9tICcuLi9pbWFnZXMvZXh0ZXJuYWwtbGluay5zdmc/aW5saW5lJ1xuaW1wb3J0IFR3aXR0ZXJJY29uIGZyb20gJy4uL2ltYWdlcy90d2l0dGVyLnN2Zz9pbmxpbmUnXG5pbXBvcnQgR2l0aHViSWNvbiBmcm9tICcuLi9pbWFnZXMvZ2l0aHViLnN2Zz9pbmxpbmUnXG5pbXBvcnQgSW5mb0ljb24gZnJvbSAnLi4vaW1hZ2VzL2luZm8uc3ZnP2lubGluZSdcbmltcG9ydCBQbHVnaW5zSWNvbiBmcm9tICcuLi9pbWFnZXMvcGx1Z2lucy5zdmc/aW5saW5lJ1xuaW1wb3J0IE1vZHVsZXNJY29uIGZyb20gJy4uL2ltYWdlcy9tb2R1bGVzLnN2Zz9pbmxpbmUnXG4vLyBpbXBvcnQgUmVmcmVzaEljb24gZnJvbSAnLi4vaW1hZ2VzL3JlZnJlc2guc3ZnP2lubGluZSdcblxuaW1wb3J0IEV4cGxvcmVEYXRhSXRlbSBmcm9tICcuLi9jb21wb25lbnRzL0V4cGxvcmVEYXRhSXRlbS52dWUnXG5pbXBvcnQgQXBwQnV0dG9uIGZyb20gJy4uL2NvbXBvbmVudHMvQXBwQnV0dG9uLnZ1ZSdcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XG4gICAgLy8gICAvLyBFeHRlcm5hbExpbmtJY29uLFxuICAgIExvZ29JY29uLFxuICAgIFR3aXR0ZXJJY29uLFxuICAgIEdpdGh1Ykljb24sXG4gICAgSW5mb0ljb24sXG4gICAgUGx1Z2luc0ljb24sXG4gICAgTW9kdWxlc0ljb24sXG4gICAgLy8gICBSZWZyZXNoSWNvbixcbiAgICBFeHBsb3JlRGF0YUl0ZW0sXG4gICAgQXBwQnV0dG9uXG4gIH0sXG4gIGRhdGEgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpc0xvYWRpbmc6IHRydWUsXG4gICAgICBzYXZpbmc6IGZhbHNlLFxuICAgICAgc2F2aW5nRXJyb3I6IGZhbHNlLFxuICAgICAgc2hvd2Nhc2U6IG51bGwsXG4gICAgICBjdXJyZW50VGFiOiBudWxsXG4gICAgfVxuICB9LFxuICBjb21wdXRlZDoge1xuICAgIGlzUm9vdFVybCAoKSB7XG4gICAgICBpZiAoIXRoaXMuc2hvd2Nhc2UgfHwgIXRoaXMuc2hvd2Nhc2UudXJsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgY29uc3QgeyBob3N0bmFtZSB9ID0gbmV3IFVSTCh0aGlzLnNob3djYXNlLnVybClcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5zaG93Y2FzZS51cmwuZW5kc1dpdGgoaG9zdG5hbWUpIHx8XG4gICAgICAgIHRoaXMuc2hvd2Nhc2UudXJsLmVuZHNXaXRoKGhvc3RuYW1lICsgJy8nKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9LFxuICAgIHZ1ZURvY3NVUkwgKCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHRoaXMuc2hvd2Nhc2UudnVlVmVyc2lvbi5zdGFydHNXaXRoKCcxJykgJiYgJ2h0dHBzOi8vdjEudnVlanMub3JnJykgfHxcbiAgICAgICAgKHRoaXMuc2hvd2Nhc2UudnVlVmVyc2lvbi5zdGFydHNXaXRoKCcyJykgJiYgJ2h0dHBzOi8vdjIudnVlanMub3JnJykgfHxcbiAgICAgICAgKHRoaXMuc2hvd2Nhc2UudnVlVmVyc2lvbi5zdGFydHNXaXRoKCczJykgJiYgJ2h0dHBzOi8vdnVlanMub3JnJylcbiAgICAgIClcbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQgKCkge1xuICAgIHRoaXMuZGV0ZWN0KClcbiAgfSxcbiAgYmVmb3JlRGVzdHJveSAoKSB7XG4gICAgaWYgKCF0aGlzLl90aW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVyKVxuICAgICAgZGVsZXRlIHRoaXMuX3RpbWVyXG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgYXN5bmMgZGV0ZWN0IChuYlRyaWVzID0gMCkge1xuICAgICAgdGhpcy5jdXJyZW50VGFiID0gYXdhaXQgdGhpcy5nZXRDdXJyZW50VGFiKClcbiAgICAgIGlmICghdGhpcy5jdXJyZW50VGFiKSB7XG4gICAgICAgIHRoaXMuX3RpbWVyID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLmRldGVjdCgpLCAxMDAwKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGNvbnN0IHRhYklkID0gdGhpcy5jdXJyZW50VGFiLmlkXG4gICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLnNlbmRUb0JhY2tncm91bmQoe1xuICAgICAgICBmcm9tOiAncG9wdXAnLFxuICAgICAgICBhY3Rpb246ICdnZXRTaG93Y2FzZScsXG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICB0YWJJZFxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgaWYgKCFyZXMucGF5bG9hZCAmJiBuYlRyaWVzIDwgMykge1xuICAgICAgICB0aGlzLl90aW1lciA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5kZXRlY3QobmJUcmllcyArIDEpLCAxMDAwKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2VcbiAgICAgIHRoaXMuc2hvd2Nhc2UgPSByZXMucGF5bG9hZCB8fCBudWxsXG5cbiAgICAgIC8vIHRoaXMuc2VuZFRvQ29udGVudCh7XG4gICAgICAvLyAgIHByb3h5VG86ICdpbmplY3RlZCcsXG4gICAgICAvLyAgIGZyb206ICdwb3B1cCcsXG4gICAgICAvLyAgIHBheWxvYWQ6ICd0ZXN0IGZyb20gcG9wdXAnXG4gICAgICAvLyB9KVxuICAgIH0sXG4gICAgYXN5bmMgZ2V0Q3VycmVudFRhYiAoKSB7XG4gICAgICByZXR1cm4gYXdhaXQgYnJvd3Nlci50YWJzXG4gICAgICAgIC5xdWVyeSh7IGN1cnJlbnRXaW5kb3c6IHRydWUsIGFjdGl2ZTogdHJ1ZSB9KVxuICAgICAgICAudGhlbih0YWJzQXJyYXkgPT4ge1xuICAgICAgICAgIGNvbnN0IHsgaWQsIHN0YXR1cywgdXJsIH0gPSB0YWJzQXJyYXlbMF1cbiAgICAgICAgICBpZiAoc3RhdHVzID09PSAnY29tcGxldGUnKSB7XG4gICAgICAgICAgICByZXR1cm4geyBpZCwgdXJsIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgfSlcbiAgICB9LFxuICAgIHNlbmRUb0JhY2tncm91bmQgKG1lc3NhZ2UpIHtcbiAgICAgIHJldHVybiBicm93c2VyLnJ1bnRpbWUuc2VuZE1lc3NhZ2UobWVzc2FnZSlcbiAgICB9LFxuICAgIC8vIHNlbmRUb0NvbnRlbnQgKG1lc3NhZ2UpIHtcbiAgICAvLyAgIGNocm9tZS50YWJzLnF1ZXJ5KHsgYWN0aXZlOiB0cnVlLCBjdXJyZW50V2luZG93OiB0cnVlIH0sIGZ1bmN0aW9uICh0YWJzKSB7XG4gICAgLy8gICAgIGNocm9tZS50YWJzLnNlbmRNZXNzYWdlKHRhYnNbMF0uaWQsIG1lc3NhZ2UsIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgIC8vICAgICAgIGFsZXJ0KHJlc3BvbnNlKVxuICAgIC8vICAgICB9KVxuICAgIC8vICAgfSlcbiAgICAvLyB9LFxuICAgIGljb25VUkwgKHBhdGgpIHtcbiAgICAgIHJldHVybiBgaHR0cHM6Ly9pY29ucy52dWV0ZWxlc2NvcGUuY29tJHtwYXRofWBcbiAgICB9LFxuICAgIGFzeW5jIHNhdmVTaG93Y2FzZSAoKSB7XG4gICAgICB0aGlzLnNhdmluZyA9IHRydWVcbiAgICAgIHRoaXMuc2F2aW5nRXJyb3IgPSBmYWxzZVxuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBFdmVudFNvdXJjZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnRXZlbnRTb3VyY2UgaXMgbm90IHN1cHBvcnRlZCBpbiBjdXJyZW50IGJvcndzZXIhJylcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzc2UgPSBuZXcgRXZlbnRTb3VyY2UoXG4gICAgICAgICAgYGh0dHBzOi8vc2VydmljZS52dWV0ZWxlc2NvcGUuY29tP3VybD0ke3RoaXMuc2hvd2Nhc2UudXJsfSZpc1B1YmxpYz10cnVlYFxuICAgICAgICApXG4gICAgICAgIHNzZS5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZXZlbnQgPT4ge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXMgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpXG4gICAgICAgICAgICBpZiAoIXJlcy5lcnJvciAmJiAhcmVzLmlzQWR1bHRDb250ZW50KSB7XG4gICAgICAgICAgICAgIHRoaXMuc2hvd2Nhc2Uuc2x1ZyA9IHJlcy5zbHVnXG4gICAgICAgICAgICAgIHRoaXMuc2hvd2Nhc2UuaXNQdWJsaWMgPSByZXMuaXNQdWJsaWNcbiAgICAgICAgICAgICAgdGhpcy5zYXZpbmcgPSBmYWxzZVxuICAgICAgICAgICAgICBzc2UuY2xvc2UoKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBUEkgY2FsbCB0byBWVCBmYWlsZWQnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc3NlLmNsb3NlKClcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgY29uc3QgdGFiSWQgPSB0aGlzLmN1cnJlbnRUYWIuaWRcbiAgICAgICAgYXdhaXQgdGhpcy5zZW5kVG9CYWNrZ3JvdW5kKHtcbiAgICAgICAgICBmcm9tOiAncG9wdXAnLFxuICAgICAgICAgIGFjdGlvbjogJ2FuYWx5emUnLFxuICAgICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICAgIHRhYklkLFxuICAgICAgICAgICAgLi4udGhpcy5zaG93Y2FzZSAvLyBUT0RPOiB1Z2x5IHN0dWZmLCBtYWtlIHNlcGFyYXRlIGhhbmRsZXIgaW4gYmFja2dyb3VuZCBmb3IgcmVmcmVzaGluZyBiYWNrZW5kIGFuYWx5emVyIGRhdGEgbGF0ZXJcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgdGhpcy5zYXZpbmcgPSBmYWxzZVxuICAgICAgICB0aGlzLnNhdmluZ0Vycm9yID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuPC9zY3JpcHQ+XG4iLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MTI2ZmJkMDAmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiL1VzZXJzL2F0aW51eC9Qcm9qZWN0cy9udXh0bGFicy92dWUtdGVsZXNjb3BlLWV4dGVuc2lvbnMvbm9kZV9tb2R1bGVzL3Z1ZS1ob3QtcmVsb2FkLWFwaS9kaXN0L2luZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnMTI2ZmJkMDAnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnMTI2ZmJkMDAnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnMTI2ZmJkMDAnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0FwcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MTI2ZmJkMDAmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignMTI2ZmJkMDAnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInBvcHVwL0FwcC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSdcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAudnVlJ1xuXG5nbG9iYWwuYnJvd3NlciA9IHJlcXVpcmUoJ3dlYmV4dGVuc2lvbi1wb2x5ZmlsbCcpXG5WdWUucHJvdG90eXBlLiRicm93c2VyID0gZ2xvYmFsLmJyb3dzZXJcblxuLyogZXNsaW50LWRpc2FibGUgbm8tbmV3ICovXG5uZXcgVnVlKHtcbiAgZWw6ICcjYXBwJyxcbiAgcmVuZGVyOiBoID0+IGgoQXBwKVxufSlcbiJdLCJzb3VyY2VSb290IjoiIn0=